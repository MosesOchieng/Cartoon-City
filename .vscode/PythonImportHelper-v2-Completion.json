[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "test",
        "description": "test",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "request",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "request",
        "description": "request",
        "detail": "request",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "requests",
        "description": "requests",
        "isExtraImport": true,
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hello",
        "description": "hello",
        "detail": "hello",
        "documentation": {}
    },
    {
        "label": "phonenumbers",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "phonenumbers",
        "description": "phonenumbers",
        "detail": "phonenumbers",
        "documentation": {}
    },
    {
        "label": "geocoder",
        "importPath": "phonenumbers",
        "description": "phonenumbers",
        "isExtraImport": true,
        "detail": "phonenumbers",
        "documentation": {}
    },
    {
        "label": "carrier",
        "importPath": "phonenumbers",
        "description": "phonenumbers",
        "isExtraImport": true,
        "detail": "phonenumbers",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "HTTPDigestAuth",
        "importPath": "requests.auth",
        "description": "requests.auth",
        "isExtraImport": true,
        "detail": "requests.auth",
        "documentation": {}
    },
    {
        "label": "HTTPBasicAuth",
        "importPath": "requests.auth",
        "description": "requests.auth",
        "isExtraImport": true,
        "detail": "requests.auth",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "UndefinedValueError",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "AccessToken",
        "importPath": "django_daraja.models",
        "description": "django_daraja.models",
        "isExtraImport": true,
        "detail": "django_daraja.models",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "x509",
        "importPath": "cryptography",
        "description": "cryptography",
        "isExtraImport": true,
        "detail": "cryptography",
        "documentation": {}
    },
    {
        "label": "PKCS1v15",
        "importPath": "cryptography.hazmat.primitives.asymmetric.padding",
        "description": "cryptography.hazmat.primitives.asymmetric.padding",
        "isExtraImport": true,
        "detail": "cryptography.hazmat.primitives.asymmetric.padding",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "django_daraja.mpesa",
        "description": "django_daraja.mpesa",
        "isExtraImport": true,
        "detail": "django_daraja.mpesa",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "MpesaClient",
        "importPath": "django_daraja.mpesa.core",
        "description": "django_daraja.mpesa.core",
        "isExtraImport": true,
        "detail": "django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "MpesaClient",
        "importPath": "django_daraja.mpesa.core",
        "description": "django_daraja.mpesa.core",
        "isExtraImport": true,
        "detail": "django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "MpesaClient",
        "importPath": "django_daraja.mpesa.core",
        "description": "django_daraja.mpesa.core",
        "isExtraImport": true,
        "detail": "django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "MpesaClient",
        "importPath": "django_daraja.mpesa.core",
        "description": "django_daraja.mpesa.core",
        "isExtraImport": true,
        "detail": "django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "MpesaClient",
        "importPath": "django_daraja.mpesa.core",
        "description": "django_daraja.mpesa.core",
        "isExtraImport": true,
        "detail": "django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "MpesaClient",
        "importPath": "django_daraja.mpesa.core",
        "description": "django_daraja.mpesa.core",
        "isExtraImport": true,
        "detail": "django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "MpesaClient",
        "importPath": "django_daraja.mpesa.core",
        "description": "django_daraja.mpesa.core",
        "isExtraImport": true,
        "detail": "django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "nose",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "nose",
        "description": "nose",
        "detail": "nose",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "MpesaInvalidParameterException",
        "importPath": "django_daraja.mpesa.exceptions",
        "description": "django_daraja.mpesa.exceptions",
        "isExtraImport": true,
        "detail": "django_daraja.mpesa.exceptions",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "django_daraja.mpesa.exceptions",
        "description": "django_daraja.mpesa.exceptions",
        "isExtraImport": true,
        "detail": "django_daraja.mpesa.exceptions",
        "documentation": {}
    },
    {
        "label": "MpesaInvalidParameterException",
        "importPath": "django_daraja.mpesa.exceptions",
        "description": "django_daraja.mpesa.exceptions",
        "isExtraImport": true,
        "detail": "django_daraja.mpesa.exceptions",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "generate_access_token",
        "importPath": "django_daraja.mpesa.utils",
        "description": "django_daraja.mpesa.utils",
        "isExtraImport": true,
        "detail": "django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "generate_access_token_request",
        "importPath": "django_daraja.mpesa.utils",
        "description": "django_daraja.mpesa.utils",
        "isExtraImport": true,
        "detail": "django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "django_daraja.mpesa.utils",
        "description": "django_daraja.mpesa.utils",
        "isExtraImport": true,
        "detail": "django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "zipfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zipfile",
        "description": "zipfile",
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "optparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "optparse",
        "description": "optparse",
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "textwrap",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "textwrap",
        "description": "textwrap",
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "contextlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "contextlib",
        "description": "contextlib",
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "distutils",
        "description": "distutils",
        "isExtraImport": true,
        "detail": "distutils",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "username",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "password",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "username",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "password",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "username",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "password",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "username",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "password",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "hello_world",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012110834",
        "description": ".history.juakali.juakali.phone.hello_20221012110834",
        "peekOfCode": "def hello_world():\nreturn 'Hello world!'",
        "detail": ".history.juakali.juakali.phone.hello_20221012110834",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012110834",
        "description": ".history.juakali.juakali.phone.hello_20221012110834",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/')\ndef hello_world():\nreturn 'Hello world!'",
        "detail": ".history.juakali.juakali.phone.hello_20221012110834",
        "documentation": {}
    },
    {
        "label": "hello_world",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012110913",
        "description": ".history.juakali.juakali.phone.hello_20221012110913",
        "peekOfCode": "def hello_world():\nreturn 'Hello world!'",
        "detail": ".history.juakali.juakali.phone.hello_20221012110913",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012110913",
        "description": ".history.juakali.juakali.phone.hello_20221012110913",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/')\ndef hello_world():\nreturn 'Hello world!'",
        "detail": ".history.juakali.juakali.phone.hello_20221012110913",
        "documentation": {}
    },
    {
        "label": "hello_world",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012110914",
        "description": ".history.juakali.juakali.phone.hello_20221012110914",
        "peekOfCode": "def hello_world():\nreturn 'Hello world!'",
        "detail": ".history.juakali.juakali.phone.hello_20221012110914",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012110914",
        "description": ".history.juakali.juakali.phone.hello_20221012110914",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/')\ndef hello_world():\nreturn 'Hello world!'",
        "detail": ".history.juakali.juakali.phone.hello_20221012110914",
        "documentation": {}
    },
    {
        "label": "hello_world",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111123",
        "description": ".history.juakali.juakali.phone.hello_20221012111123",
        "peekOfCode": "def hello_world():\nreturn 'Hello world!'",
        "detail": ".history.juakali.juakali.phone.hello_20221012111123",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111123",
        "description": ".history.juakali.juakali.phone.hello_20221012111123",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/')\ndef hello_world():\nreturn 'Hello world!'",
        "detail": ".history.juakali.juakali.phone.hello_20221012111123",
        "documentation": {}
    },
    {
        "label": "hello_world",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111126",
        "description": ".history.juakali.juakali.phone.hello_20221012111126",
        "peekOfCode": "def hello_world():\n    return 'Hello world!'",
        "detail": ".history.juakali.juakali.phone.hello_20221012111126",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111126",
        "description": ".history.juakali.juakali.phone.hello_20221012111126",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/')\ndef hello_world():\n    return 'Hello world!'",
        "detail": ".history.juakali.juakali.phone.hello_20221012111126",
        "documentation": {}
    },
    {
        "label": "hello_world",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111128",
        "description": ".history.juakali.juakali.phone.hello_20221012111128",
        "peekOfCode": "def hello_world():\n    return 'Hello world!'",
        "detail": ".history.juakali.juakali.phone.hello_20221012111128",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111128",
        "description": ".history.juakali.juakali.phone.hello_20221012111128",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/')\ndef hello_world():\n    return 'Hello world!'",
        "detail": ".history.juakali.juakali.phone.hello_20221012111128",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111243",
        "description": ".history.juakali.juakali.phone.hello_20221012111243",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON What would you want to check \\n\"\n      response += \"1. My Account \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111243",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111243",
        "description": ".history.juakali.juakali.phone.hello_20221012111243",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111243",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111256",
        "description": ".history.juakali.juakali.phone.hello_20221012111256",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON What would you want to check \\n\"\n      response += \"1. My Account \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111256",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111256",
        "description": ".history.juakali.juakali.phone.hello_20221012111256",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111256",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111457",
        "description": ".history.juakali.juakali.phone.hello_20221012111457",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans\\n\"\n      response += \"1. My Account \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111457",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111457",
        "description": ".history.juakali.juakali.phone.hello_20221012111457",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111457",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111458",
        "description": ".history.juakali.juakali.phone.hello_20221012111458",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans \\n\"\n      response += \"1. My Account \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111458",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111458",
        "description": ".history.juakali.juakali.phone.hello_20221012111458",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111458",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111509",
        "description": ".history.juakali.juakali.phone.hello_20221012111509",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.KIdnly choose your type of user \\n\"\n      response += \"1. My Account \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111509",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111509",
        "description": ".history.juakali.juakali.phone.hello_20221012111509",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111509",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111514",
        "description": ".history.juakali.juakali.phone.hello_20221012111514",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kidnly choose your type of user \\n\"\n      response += \"1. My Account \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111514",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111514",
        "description": ".history.juakali.juakali.phone.hello_20221012111514",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111514",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111517",
        "description": ".history.juakali.juakali.phone.hello_20221012111517",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kinly choose your type of user \\n\"\n      response += \"1. My Account \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111517",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111517",
        "description": ".history.juakali.juakali.phone.hello_20221012111517",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111517",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111518",
        "description": ".history.juakali.juakali.phone.hello_20221012111518",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user \\n\"\n      response += \"1. My Account \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111518",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111518",
        "description": ".history.juakali.juakali.phone.hello_20221012111518",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111518",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111522",
        "description": ".history.juakali.juakali.phone.hello_20221012111522",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. My Account \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111522",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111522",
        "description": ".history.juakali.juakali.phone.hello_20221012111522",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111522",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111528",
        "description": ".history.juakali.juakali.phone.hello_20221012111528",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1.  \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111528",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111528",
        "description": ".history.juakali.juakali.phone.hello_20221012111528",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111528",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111531",
        "description": ".history.juakali.juakali.phone.hello_20221012111531",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111531",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111531",
        "description": ".history.juakali.juakali.phone.hello_20221012111531",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111531",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111543",
        "description": ".history.juakali.juakali.phone.hello_20221012111543",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111543",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111543",
        "description": ".history.juakali.juakali.phone.hello_20221012111543",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111543",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111546",
        "description": ".history.juakali.juakali.phone.hello_20221012111546",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111546",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111546",
        "description": ".history.juakali.juakali.phone.hello_20221012111546",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111546",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111549",
        "description": ".history.juakali.juakali.phone.hello_20221012111549",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employ \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111549",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111549",
        "description": ".history.juakali.juakali.phone.hello_20221012111549",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111549",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111551",
        "description": ".history.juakali.juakali.phone.hello_20221012111551",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111551",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111551",
        "description": ".history.juakali.juakali.phone.hello_20221012111551",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111551",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111556",
        "description": ".history.juakali.juakali.phone.hello_20221012111556",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111556",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111556",
        "description": ".history.juakali.juakali.phone.hello_20221012111556",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111556",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111559",
        "description": ".history.juakali.juakali.phone.hello_20221012111559",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111559",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111559",
        "description": ".history.juakali.juakali.phone.hello_20221012111559",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111559",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111603",
        "description": ".history.juakali.juakali.phone.hello_20221012111603",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111603",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111603",
        "description": ".history.juakali.juakali.phone.hello_20221012111603",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111603",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111605",
        "description": ".history.juakali.juakali.phone.hello_20221012111605",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111605",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111605",
        "description": ".history.juakali.juakali.phone.hello_20221012111605",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111605",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111607",
        "description": ".history.juakali.juakali.phone.hello_20221012111607",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111607",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111607",
        "description": ".history.juakali.juakali.phone.hello_20221012111607",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111607",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111609",
        "description": ".history.juakali.juakali.phone.hello_20221012111609",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111609",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111609",
        "description": ".history.juakali.juakali.phone.hello_20221012111609",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111609",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111611",
        "description": ".history.juakali.juakali.phone.hello_20221012111611",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111611",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111611",
        "description": ".history.juakali.juakali.phone.hello_20221012111611",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111611",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111616",
        "description": ".history.juakali.juakali.phone.hello_20221012111616",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111616",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111616",
        "description": ".history.juakali.juakali.phone.hello_20221012111616",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111616",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111622",
        "description": ".history.juakali.juakali.phone.hello_20221012111622",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111622",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111622",
        "description": ".history.juakali.juakali.phone.hello_20221012111622",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111622",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111623",
        "description": ".history.juakali.juakali.phone.hello_20221012111623",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111623",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111623",
        "description": ".history.juakali.juakali.phone.hello_20221012111623",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111623",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111637",
        "description": ".history.juakali.juakali.phone.hello_20221012111637",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111637",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111637",
        "description": ".history.juakali.juakali.phone.hello_20221012111637",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111637",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111716",
        "description": ".history.juakali.juakali.phone.hello_20221012111716",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111716",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111716",
        "description": ".history.juakali.juakali.phone.hello_20221012111716",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111716",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111727",
        "description": ".history.juakali.juakali.phone.hello_20221012111727",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111727",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111727",
        "description": ".history.juakali.juakali.phone.hello_20221012111727",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111727",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111730",
        "description": ".history.juakali.juakali.phone.hello_20221012111730",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111730",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111730",
        "description": ".history.juakali.juakali.phone.hello_20221012111730",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111730",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111814",
        "description": ".history.juakali.juakali.phone.hello_20221012111814",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111814",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111814",
        "description": ".history.juakali.juakali.phone.hello_20221012111814",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111814",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111817",
        "description": ".history.juakali.juakali.phone.hello_20221012111817",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111817",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111817",
        "description": ".history.juakali.juakali.phone.hello_20221012111817",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111817",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111822",
        "description": ".history.juakali.juakali.phone.hello_20221012111822",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111822",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111822",
        "description": ".history.juakali.juakali.phone.hello_20221012111822",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111822",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111827",
        "description": ".history.juakali.juakali.phone.hello_20221012111827",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111827",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111827",
        "description": ".history.juakali.juakali.phone.hello_20221012111827",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111827",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111828",
        "description": ".history.juakali.juakali.phone.hello_20221012111828",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111828",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111828",
        "description": ".history.juakali.juakali.phone.hello_20221012111828",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111828",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111834",
        "description": ".history.juakali.juakali.phone.hello_20221012111834",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111834",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111834",
        "description": ".history.juakali.juakali.phone.hello_20221012111834",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111834",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111837",
        "description": ".history.juakali.juakali.phone.hello_20221012111837",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111837",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111837",
        "description": ".history.juakali.juakali.phone.hello_20221012111837",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111837",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111839",
        "description": ".history.juakali.juakali.phone.hello_20221012111839",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111839",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111839",
        "description": ".history.juakali.juakali.phone.hello_20221012111839",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111839",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111840",
        "description": ".history.juakali.juakali.phone.hello_20221012111840",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111840",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111840",
        "description": ".history.juakali.juakali.phone.hello_20221012111840",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111840",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111843",
        "description": ".history.juakali.juakali.phone.hello_20221012111843",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111843",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111843",
        "description": ".history.juakali.juakali.phone.hello_20221012111843",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111843",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111845",
        "description": ".history.juakali.juakali.phone.hello_20221012111845",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111845",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111845",
        "description": ".history.juakali.juakali.phone.hello_20221012111845",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111845",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111848",
        "description": ".history.juakali.juakali.phone.hello_20221012111848",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111848",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111848",
        "description": ".history.juakali.juakali.phone.hello_20221012111848",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111848",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111851",
        "description": ".history.juakali.juakali.phone.hello_20221012111851",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111851",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111851",
        "description": ".history.juakali.juakali.phone.hello_20221012111851",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111851",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111854",
        "description": ".history.juakali.juakali.phone.hello_20221012111854",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111854",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111854",
        "description": ".history.juakali.juakali.phone.hello_20221012111854",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111854",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111859",
        "description": ".history.juakali.juakali.phone.hello_20221012111859",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111859",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111859",
        "description": ".history.juakali.juakali.phone.hello_20221012111859",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111859",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111907",
        "description": ".history.juakali.juakali.phone.hello_20221012111907",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111907",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111907",
        "description": ".history.juakali.juakali.phone.hello_20221012111907",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111907",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111930",
        "description": ".history.juakali.juakali.phone.hello_20221012111930",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111930",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111930",
        "description": ".history.juakali.juakali.phone.hello_20221012111930",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111930",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111932",
        "description": ".history.juakali.juakali.phone.hello_20221012111932",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111932",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111932",
        "description": ".history.juakali.juakali.phone.hello_20221012111932",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111932",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111935",
        "description": ".history.juakali.juakali.phone.hello_20221012111935",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111935",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111935",
        "description": ".history.juakali.juakali.phone.hello_20221012111935",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111935",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111936",
        "description": ".history.juakali.juakali.phone.hello_20221012111936",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111936",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111936",
        "description": ".history.juakali.juakali.phone.hello_20221012111936",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111936",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111938",
        "description": ".history.juakali.juakali.phone.hello_20221012111938",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111938",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111938",
        "description": ".history.juakali.juakali.phone.hello_20221012111938",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111938",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111939",
        "description": ".history.juakali.juakali.phone.hello_20221012111939",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111939",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111939",
        "description": ".history.juakali.juakali.phone.hello_20221012111939",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111939",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111955",
        "description": ".history.juakali.juakali.phone.hello_20221012111955",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012111955",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012111955",
        "description": ".history.juakali.juakali.phone.hello_20221012111955",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012111955",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112018",
        "description": ".history.juakali.juakali.phone.hello_20221012112018",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112018",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112018",
        "description": ".history.juakali.juakali.phone.hello_20221012112018",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112018",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112020",
        "description": ".history.juakali.juakali.phone.hello_20221012112020",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112020",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112020",
        "description": ".history.juakali.juakali.phone.hello_20221012112020",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112020",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112023",
        "description": ".history.juakali.juakali.phone.hello_20221012112023",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112023",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112023",
        "description": ".history.juakali.juakali.phone.hello_20221012112023",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112023",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112024",
        "description": ".history.juakali.juakali.phone.hello_20221012112024",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112024",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112024",
        "description": ".history.juakali.juakali.phone.hello_20221012112024",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112024",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112026",
        "description": ".history.juakali.juakali.phone.hello_20221012112026",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112026",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112026",
        "description": ".history.juakali.juakali.phone.hello_20221012112026",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112026",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112029",
        "description": ".history.juakali.juakali.phone.hello_20221012112029",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112029",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112029",
        "description": ".history.juakali.juakali.phone.hello_20221012112029",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112029",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112032",
        "description": ".history.juakali.juakali.phone.hello_20221012112032",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112032",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112032",
        "description": ".history.juakali.juakali.phone.hello_20221012112032",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112032",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112038",
        "description": ".history.juakali.juakali.phone.hello_20221012112038",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112038",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112038",
        "description": ".history.juakali.juakali.phone.hello_20221012112038",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112038",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112040",
        "description": ".history.juakali.juakali.phone.hello_20221012112040",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112040",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112040",
        "description": ".history.juakali.juakali.phone.hello_20221012112040",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112040",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112043",
        "description": ".history.juakali.juakali.phone.hello_20221012112043",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112043",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112043",
        "description": ".history.juakali.juakali.phone.hello_20221012112043",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112043",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112100",
        "description": ".history.juakali.juakali.phone.hello_20221012112100",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112100",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112100",
        "description": ".history.juakali.juakali.phone.hello_20221012112100",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112100",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112103",
        "description": ".history.juakali.juakali.phone.hello_20221012112103",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112103",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112103",
        "description": ".history.juakali.juakali.phone.hello_20221012112103",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112103",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112109",
        "description": ".history.juakali.juakali.phone.hello_20221012112109",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112109",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112109",
        "description": ".history.juakali.juakali.phone.hello_20221012112109",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112109",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112112",
        "description": ".history.juakali.juakali.phone.hello_20221012112112",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112112",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112112",
        "description": ".history.juakali.juakali.phone.hello_20221012112112",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112112",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112114",
        "description": ".history.juakali.juakali.phone.hello_20221012112114",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112114",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112114",
        "description": ".history.juakali.juakali.phone.hello_20221012112114",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112114",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112116",
        "description": ".history.juakali.juakali.phone.hello_20221012112116",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112116",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112116",
        "description": ".history.juakali.juakali.phone.hello_20221012112116",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112116",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112117",
        "description": ".history.juakali.juakali.phone.hello_20221012112117",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112117",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112117",
        "description": ".history.juakali.juakali.phone.hello_20221012112117",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112117",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112119",
        "description": ".history.juakali.juakali.phone.hello_20221012112119",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112119",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112119",
        "description": ".history.juakali.juakali.phone.hello_20221012112119",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112119",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112142",
        "description": ".history.juakali.juakali.phone.hello_20221012112142",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112142",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112142",
        "description": ".history.juakali.juakali.phone.hello_20221012112142",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112142",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112145",
        "description": ".history.juakali.juakali.phone.hello_20221012112145",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112145",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112145",
        "description": ".history.juakali.juakali.phone.hello_20221012112145",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112145",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112149",
        "description": ".history.juakali.juakali.phone.hello_20221012112149",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112149",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112149",
        "description": ".history.juakali.juakali.phone.hello_20221012112149",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112149",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112152",
        "description": ".history.juakali.juakali.phone.hello_20221012112152",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112152",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112152",
        "description": ".history.juakali.juakali.phone.hello_20221012112152",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112152",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112203",
        "description": ".history.juakali.juakali.phone.hello_20221012112203",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112203",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112203",
        "description": ".history.juakali.juakali.phone.hello_20221012112203",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112203",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112209",
        "description": ".history.juakali.juakali.phone.hello_20221012112209",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112209",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112209",
        "description": ".history.juakali.juakali.phone.hello_20221012112209",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112209",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112212",
        "description": ".history.juakali.juakali.phone.hello_20221012112212",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112212",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112212",
        "description": ".history.juakali.juakali.phone.hello_20221012112212",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112212",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112219",
        "description": ".history.juakali.juakali.phone.hello_20221012112219",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112219",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112219",
        "description": ".history.juakali.juakali.phone.hello_20221012112219",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112219",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112224",
        "description": ".history.juakali.juakali.phone.hello_20221012112224",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112224",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112224",
        "description": ".history.juakali.juakali.phone.hello_20221012112224",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112224",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112227",
        "description": ".history.juakali.juakali.phone.hello_20221012112227",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112227",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112227",
        "description": ".history.juakali.juakali.phone.hello_20221012112227",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112227",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112229",
        "description": ".history.juakali.juakali.phone.hello_20221012112229",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112229",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112229",
        "description": ".history.juakali.juakali.phone.hello_20221012112229",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112229",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112235",
        "description": ".history.juakali.juakali.phone.hello_20221012112235",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112235",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112235",
        "description": ".history.juakali.juakali.phone.hello_20221012112235",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112235",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112239",
        "description": ".history.juakali.juakali.phone.hello_20221012112239",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112239",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112239",
        "description": ".history.juakali.juakali.phone.hello_20221012112239",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112239",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112241",
        "description": ".history.juakali.juakali.phone.hello_20221012112241",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112241",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112241",
        "description": ".history.juakali.juakali.phone.hello_20221012112241",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112241",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112311",
        "description": ".history.juakali.juakali.phone.hello_20221012112311",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112311",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112311",
        "description": ".history.juakali.juakali.phone.hello_20221012112311",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112311",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112314",
        "description": ".history.juakali.juakali.phone.hello_20221012112314",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112314",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112314",
        "description": ".history.juakali.juakali.phone.hello_20221012112314",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112314",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112315",
        "description": ".history.juakali.juakali.phone.hello_20221012112315",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112315",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112315",
        "description": ".history.juakali.juakali.phone.hello_20221012112315",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112315",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112320",
        "description": ".history.juakali.juakali.phone.hello_20221012112320",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112320",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112320",
        "description": ".history.juakali.juakali.phone.hello_20221012112320",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112320",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112328",
        "description": ".history.juakali.juakali.phone.hello_20221012112328",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112328",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112328",
        "description": ".history.juakali.juakali.phone.hello_20221012112328",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112328",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112330",
        "description": ".history.juakali.juakali.phone.hello_20221012112330",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112330",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112330",
        "description": ".history.juakali.juakali.phone.hello_20221012112330",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112330",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112331",
        "description": ".history.juakali.juakali.phone.hello_20221012112331",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112331",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112331",
        "description": ".history.juakali.juakali.phone.hello_20221012112331",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112331",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112332",
        "description": ".history.juakali.juakali.phone.hello_20221012112332",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112332",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112332",
        "description": ".history.juakali.juakali.phone.hello_20221012112332",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112332",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112334",
        "description": ".history.juakali.juakali.phone.hello_20221012112334",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112334",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112334",
        "description": ".history.juakali.juakali.phone.hello_20221012112334",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112334",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112347",
        "description": ".history.juakali.juakali.phone.hello_20221012112347",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112347",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112347",
        "description": ".history.juakali.juakali.phone.hello_20221012112347",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112347",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112405",
        "description": ".history.juakali.juakali.phone.hello_20221012112405",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112405",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112405",
        "description": ".history.juakali.juakali.phone.hello_20221012112405",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112405",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112407",
        "description": ".history.juakali.juakali.phone.hello_20221012112407",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112407",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112407",
        "description": ".history.juakali.juakali.phone.hello_20221012112407",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112407",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112408",
        "description": ".history.juakali.juakali.phone.hello_20221012112408",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112408",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112408",
        "description": ".history.juakali.juakali.phone.hello_20221012112408",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112408",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112409",
        "description": ".history.juakali.juakali.phone.hello_20221012112409",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112409",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112409",
        "description": ".history.juakali.juakali.phone.hello_20221012112409",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112409",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112414",
        "description": ".history.juakali.juakali.phone.hello_20221012112414",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112414",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112414",
        "description": ".history.juakali.juakali.phone.hello_20221012112414",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112414",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112416",
        "description": ".history.juakali.juakali.phone.hello_20221012112416",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112416",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112416",
        "description": ".history.juakali.juakali.phone.hello_20221012112416",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112416",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112426",
        "description": ".history.juakali.juakali.phone.hello_20221012112426",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112426",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112426",
        "description": ".history.juakali.juakali.phone.hello_20221012112426",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112426",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112429",
        "description": ".history.juakali.juakali.phone.hello_20221012112429",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112429",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112429",
        "description": ".history.juakali.juakali.phone.hello_20221012112429",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112429",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112437",
        "description": ".history.juakali.juakali.phone.hello_20221012112437",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112437",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112437",
        "description": ".history.juakali.juakali.phone.hello_20221012112437",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112437",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112439",
        "description": ".history.juakali.juakali.phone.hello_20221012112439",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112439",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112439",
        "description": ".history.juakali.juakali.phone.hello_20221012112439",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112439",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112444",
        "description": ".history.juakali.juakali.phone.hello_20221012112444",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112444",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112444",
        "description": ".history.juakali.juakali.phone.hello_20221012112444",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112444",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112446",
        "description": ".history.juakali.juakali.phone.hello_20221012112446",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112446",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112446",
        "description": ".history.juakali.juakali.phone.hello_20221012112446",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112446",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112449",
        "description": ".history.juakali.juakali.phone.hello_20221012112449",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112449",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112449",
        "description": ".history.juakali.juakali.phone.hello_20221012112449",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112449",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112451",
        "description": ".history.juakali.juakali.phone.hello_20221012112451",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112451",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112451",
        "description": ".history.juakali.juakali.phone.hello_20221012112451",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112451",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112548",
        "description": ".history.juakali.juakali.phone.hello_20221012112548",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112548",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112548",
        "description": ".history.juakali.juakali.phone.hello_20221012112548",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112548",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112551",
        "description": ".history.juakali.juakali.phone.hello_20221012112551",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112551",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112551",
        "description": ".history.juakali.juakali.phone.hello_20221012112551",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112551",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112604",
        "description": ".history.juakali.juakali.phone.hello_20221012112604",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112604",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112604",
        "description": ".history.juakali.juakali.phone.hello_20221012112604",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112604",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112629",
        "description": ".history.juakali.juakali.phone.hello_20221012112629",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112629",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112629",
        "description": ".history.juakali.juakali.phone.hello_20221012112629",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112629",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112632",
        "description": ".history.juakali.juakali.phone.hello_20221012112632",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112632",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112632",
        "description": ".history.juakali.juakali.phone.hello_20221012112632",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112632",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112642",
        "description": ".history.juakali.juakali.phone.hello_20221012112642",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112642",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112642",
        "description": ".history.juakali.juakali.phone.hello_20221012112642",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112642",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112645",
        "description": ".history.juakali.juakali.phone.hello_20221012112645",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112645",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112645",
        "description": ".history.juakali.juakali.phone.hello_20221012112645",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112645",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112646",
        "description": ".history.juakali.juakali.phone.hello_20221012112646",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112646",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112646",
        "description": ".history.juakali.juakali.phone.hello_20221012112646",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112646",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112649",
        "description": ".history.juakali.juakali.phone.hello_20221012112649",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112649",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112649",
        "description": ".history.juakali.juakali.phone.hello_20221012112649",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112649",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112732",
        "description": ".history.juakali.juakali.phone.hello_20221012112732",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112732",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112732",
        "description": ".history.juakali.juakali.phone.hello_20221012112732",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112732",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112734",
        "description": ".history.juakali.juakali.phone.hello_20221012112734",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112734",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112734",
        "description": ".history.juakali.juakali.phone.hello_20221012112734",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112734",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112736",
        "description": ".history.juakali.juakali.phone.hello_20221012112736",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112736",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112736",
        "description": ".history.juakali.juakali.phone.hello_20221012112736",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112736",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112742",
        "description": ".history.juakali.juakali.phone.hello_20221012112742",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112742",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112742",
        "description": ".history.juakali.juakali.phone.hello_20221012112742",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112742",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112744",
        "description": ".history.juakali.juakali.phone.hello_20221012112744",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112744",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112744",
        "description": ".history.juakali.juakali.phone.hello_20221012112744",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112744",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112748",
        "description": ".history.juakali.juakali.phone.hello_20221012112748",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112748",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112748",
        "description": ".history.juakali.juakali.phone.hello_20221012112748",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112748",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112750",
        "description": ".history.juakali.juakali.phone.hello_20221012112750",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112750",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112750",
        "description": ".history.juakali.juakali.phone.hello_20221012112750",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112750",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112754",
        "description": ".history.juakali.juakali.phone.hello_20221012112754",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112754",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112754",
        "description": ".history.juakali.juakali.phone.hello_20221012112754",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112754",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112756",
        "description": ".history.juakali.juakali.phone.hello_20221012112756",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112756",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112756",
        "description": ".history.juakali.juakali.phone.hello_20221012112756",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112756",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112800",
        "description": ".history.juakali.juakali.phone.hello_20221012112800",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112800",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112800",
        "description": ".history.juakali.juakali.phone.hello_20221012112800",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112800",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112803",
        "description": ".history.juakali.juakali.phone.hello_20221012112803",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112803",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112803",
        "description": ".history.juakali.juakali.phone.hello_20221012112803",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112803",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112808",
        "description": ".history.juakali.juakali.phone.hello_20221012112808",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112808",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112808",
        "description": ".history.juakali.juakali.phone.hello_20221012112808",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112808",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112810",
        "description": ".history.juakali.juakali.phone.hello_20221012112810",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112810",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112810",
        "description": ".history.juakali.juakali.phone.hello_20221012112810",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112810",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112811",
        "description": ".history.juakali.juakali.phone.hello_20221012112811",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112811",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112811",
        "description": ".history.juakali.juakali.phone.hello_20221012112811",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112811",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112815",
        "description": ".history.juakali.juakali.phone.hello_20221012112815",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112815",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112815",
        "description": ".history.juakali.juakali.phone.hello_20221012112815",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112815",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112817",
        "description": ".history.juakali.juakali.phone.hello_20221012112817",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112817",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112817",
        "description": ".history.juakali.juakali.phone.hello_20221012112817",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112817",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112830",
        "description": ".history.juakali.juakali.phone.hello_20221012112830",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112830",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112830",
        "description": ".history.juakali.juakali.phone.hello_20221012112830",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112830",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112832",
        "description": ".history.juakali.juakali.phone.hello_20221012112832",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112832",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112832",
        "description": ".history.juakali.juakali.phone.hello_20221012112832",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112832",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112837",
        "description": ".history.juakali.juakali.phone.hello_20221012112837",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112837",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112837",
        "description": ".history.juakali.juakali.phone.hello_20221012112837",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112837",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112840",
        "description": ".history.juakali.juakali.phone.hello_20221012112840",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112840",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112840",
        "description": ".history.juakali.juakali.phone.hello_20221012112840",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112840",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112842",
        "description": ".history.juakali.juakali.phone.hello_20221012112842",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112842",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112842",
        "description": ".history.juakali.juakali.phone.hello_20221012112842",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112842",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112845",
        "description": ".history.juakali.juakali.phone.hello_20221012112845",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112845",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112845",
        "description": ".history.juakali.juakali.phone.hello_20221012112845",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112845",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112848",
        "description": ".history.juakali.juakali.phone.hello_20221012112848",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112848",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112848",
        "description": ".history.juakali.juakali.phone.hello_20221012112848",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112848",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112850",
        "description": ".history.juakali.juakali.phone.hello_20221012112850",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112850",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112850",
        "description": ".history.juakali.juakali.phone.hello_20221012112850",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112850",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112853",
        "description": ".history.juakali.juakali.phone.hello_20221012112853",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112853",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112853",
        "description": ".history.juakali.juakali.phone.hello_20221012112853",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112853",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112855",
        "description": ".history.juakali.juakali.phone.hello_20221012112855",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112855",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112855",
        "description": ".history.juakali.juakali.phone.hello_20221012112855",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112855",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112857",
        "description": ".history.juakali.juakali.phone.hello_20221012112857",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112857",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112857",
        "description": ".history.juakali.juakali.phone.hello_20221012112857",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112857",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112942",
        "description": ".history.juakali.juakali.phone.hello_20221012112942",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112942",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112942",
        "description": ".history.juakali.juakali.phone.hello_20221012112942",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112942",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112947",
        "description": ".history.juakali.juakali.phone.hello_20221012112947",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112947",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112947",
        "description": ".history.juakali.juakali.phone.hello_20221012112947",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112947",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112949",
        "description": ".history.juakali.juakali.phone.hello_20221012112949",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112949",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112949",
        "description": ".history.juakali.juakali.phone.hello_20221012112949",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112949",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112955",
        "description": ".history.juakali.juakali.phone.hello_20221012112955",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112955",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112955",
        "description": ".history.juakali.juakali.phone.hello_20221012112955",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112955",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112957",
        "description": ".history.juakali.juakali.phone.hello_20221012112957",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012112957",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012112957",
        "description": ".history.juakali.juakali.phone.hello_20221012112957",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012112957",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113002",
        "description": ".history.juakali.juakali.phone.hello_20221012113002",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113002",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113002",
        "description": ".history.juakali.juakali.phone.hello_20221012113002",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113002",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113005",
        "description": ".history.juakali.juakali.phone.hello_20221012113005",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113005",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113005",
        "description": ".history.juakali.juakali.phone.hello_20221012113005",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113005",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113010",
        "description": ".history.juakali.juakali.phone.hello_20221012113010",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113010",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113010",
        "description": ".history.juakali.juakali.phone.hello_20221012113010",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113010",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113012",
        "description": ".history.juakali.juakali.phone.hello_20221012113012",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113012",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113012",
        "description": ".history.juakali.juakali.phone.hello_20221012113012",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113012",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113016",
        "description": ".history.juakali.juakali.phone.hello_20221012113016",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113016",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113016",
        "description": ".history.juakali.juakali.phone.hello_20221012113016",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113016",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113017",
        "description": ".history.juakali.juakali.phone.hello_20221012113017",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113017",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113017",
        "description": ".history.juakali.juakali.phone.hello_20221012113017",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113017",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113022",
        "description": ".history.juakali.juakali.phone.hello_20221012113022",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113022",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113022",
        "description": ".history.juakali.juakali.phone.hello_20221012113022",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113022",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113024",
        "description": ".history.juakali.juakali.phone.hello_20221012113024",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113024",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113024",
        "description": ".history.juakali.juakali.phone.hello_20221012113024",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113024",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113025",
        "description": ".history.juakali.juakali.phone.hello_20221012113025",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113025",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113025",
        "description": ".history.juakali.juakali.phone.hello_20221012113025",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113025",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113029",
        "description": ".history.juakali.juakali.phone.hello_20221012113029",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113029",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113029",
        "description": ".history.juakali.juakali.phone.hello_20221012113029",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113029",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113037",
        "description": ".history.juakali.juakali.phone.hello_20221012113037",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113037",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113037",
        "description": ".history.juakali.juakali.phone.hello_20221012113037",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113037",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113041",
        "description": ".history.juakali.juakali.phone.hello_20221012113041",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113041",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113041",
        "description": ".history.juakali.juakali.phone.hello_20221012113041",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113041",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113042",
        "description": ".history.juakali.juakali.phone.hello_20221012113042",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113042",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113042",
        "description": ".history.juakali.juakali.phone.hello_20221012113042",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113042",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113044",
        "description": ".history.juakali.juakali.phone.hello_20221012113044",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113044",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113044",
        "description": ".history.juakali.juakali.phone.hello_20221012113044",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113044",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113045",
        "description": ".history.juakali.juakali.phone.hello_20221012113045",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113045",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113045",
        "description": ".history.juakali.juakali.phone.hello_20221012113045",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113045",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113048",
        "description": ".history.juakali.juakali.phone.hello_20221012113048",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113048",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113048",
        "description": ".history.juakali.juakali.phone.hello_20221012113048",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113048",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113052",
        "description": ".history.juakali.juakali.phone.hello_20221012113052",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113052",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113052",
        "description": ".history.juakali.juakali.phone.hello_20221012113052",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113052",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113053",
        "description": ".history.juakali.juakali.phone.hello_20221012113053",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113053",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113053",
        "description": ".history.juakali.juakali.phone.hello_20221012113053",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113053",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113055",
        "description": ".history.juakali.juakali.phone.hello_20221012113055",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113055",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113055",
        "description": ".history.juakali.juakali.phone.hello_20221012113055",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113055",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113056",
        "description": ".history.juakali.juakali.phone.hello_20221012113056",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113056",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113056",
        "description": ".history.juakali.juakali.phone.hello_20221012113056",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113056",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113103",
        "description": ".history.juakali.juakali.phone.hello_20221012113103",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113103",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113103",
        "description": ".history.juakali.juakali.phone.hello_20221012113103",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113103",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113123",
        "description": ".history.juakali.juakali.phone.hello_20221012113123",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113123",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113123",
        "description": ".history.juakali.juakali.phone.hello_20221012113123",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113123",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113127",
        "description": ".history.juakali.juakali.phone.hello_20221012113127",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113127",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113127",
        "description": ".history.juakali.juakali.phone.hello_20221012113127",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113127",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113130",
        "description": ".history.juakali.juakali.phone.hello_20221012113130",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113130",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113130",
        "description": ".history.juakali.juakali.phone.hello_20221012113130",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113130",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113134",
        "description": ".history.juakali.juakali.phone.hello_20221012113134",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113134",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113134",
        "description": ".history.juakali.juakali.phone.hello_20221012113134",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113134",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113136",
        "description": ".history.juakali.juakali.phone.hello_20221012113136",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113136",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113136",
        "description": ".history.juakali.juakali.phone.hello_20221012113136",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113136",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113137",
        "description": ".history.juakali.juakali.phone.hello_20221012113137",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113137",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113137",
        "description": ".history.juakali.juakali.phone.hello_20221012113137",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113137",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113143",
        "description": ".history.juakali.juakali.phone.hello_20221012113143",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113143",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113143",
        "description": ".history.juakali.juakali.phone.hello_20221012113143",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113143",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113148",
        "description": ".history.juakali.juakali.phone.hello_20221012113148",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113148",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113148",
        "description": ".history.juakali.juakali.phone.hello_20221012113148",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113148",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113149",
        "description": ".history.juakali.juakali.phone.hello_20221012113149",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113149",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113149",
        "description": ".history.juakali.juakali.phone.hello_20221012113149",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113149",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113151",
        "description": ".history.juakali.juakali.phone.hello_20221012113151",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113151",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113151",
        "description": ".history.juakali.juakali.phone.hello_20221012113151",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113151",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113152",
        "description": ".history.juakali.juakali.phone.hello_20221012113152",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113152",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113152",
        "description": ".history.juakali.juakali.phone.hello_20221012113152",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113152",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113155",
        "description": ".history.juakali.juakali.phone.hello_20221012113155",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113155",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113155",
        "description": ".history.juakali.juakali.phone.hello_20221012113155",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113155",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113200",
        "description": ".history.juakali.juakali.phone.hello_20221012113200",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113200",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113200",
        "description": ".history.juakali.juakali.phone.hello_20221012113200",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113200",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113205",
        "description": ".history.juakali.juakali.phone.hello_20221012113205",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113205",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113205",
        "description": ".history.juakali.juakali.phone.hello_20221012113205",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113205",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113207",
        "description": ".history.juakali.juakali.phone.hello_20221012113207",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113207",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113207",
        "description": ".history.juakali.juakali.phone.hello_20221012113207",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113207",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113220",
        "description": ".history.juakali.juakali.phone.hello_20221012113220",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113220",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113220",
        "description": ".history.juakali.juakali.phone.hello_20221012113220",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113220",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113231",
        "description": ".history.juakali.juakali.phone.hello_20221012113231",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113231",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113231",
        "description": ".history.juakali.juakali.phone.hello_20221012113231",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113231",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113234",
        "description": ".history.juakali.juakali.phone.hello_20221012113234",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113234",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113234",
        "description": ".history.juakali.juakali.phone.hello_20221012113234",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113234",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113245",
        "description": ".history.juakali.juakali.phone.hello_20221012113245",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113245",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113245",
        "description": ".history.juakali.juakali.phone.hello_20221012113245",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113245",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113248",
        "description": ".history.juakali.juakali.phone.hello_20221012113248",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113248",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113248",
        "description": ".history.juakali.juakali.phone.hello_20221012113248",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113248",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113253",
        "description": ".history.juakali.juakali.phone.hello_20221012113253",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113253",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113253",
        "description": ".history.juakali.juakali.phone.hello_20221012113253",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113253",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113258",
        "description": ".history.juakali.juakali.phone.hello_20221012113258",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113258",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113258",
        "description": ".history.juakali.juakali.phone.hello_20221012113258",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113258",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113300",
        "description": ".history.juakali.juakali.phone.hello_20221012113300",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113300",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113300",
        "description": ".history.juakali.juakali.phone.hello_20221012113300",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113300",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113305",
        "description": ".history.juakali.juakali.phone.hello_20221012113305",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113305",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113305",
        "description": ".history.juakali.juakali.phone.hello_20221012113305",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113305",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113310",
        "description": ".history.juakali.juakali.phone.hello_20221012113310",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113310",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113310",
        "description": ".history.juakali.juakali.phone.hello_20221012113310",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113310",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113312",
        "description": ".history.juakali.juakali.phone.hello_20221012113312",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113312",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113312",
        "description": ".history.juakali.juakali.phone.hello_20221012113312",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113312",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113314",
        "description": ".history.juakali.juakali.phone.hello_20221012113314",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113314",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113314",
        "description": ".history.juakali.juakali.phone.hello_20221012113314",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113314",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113320",
        "description": ".history.juakali.juakali.phone.hello_20221012113320",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113320",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113320",
        "description": ".history.juakali.juakali.phone.hello_20221012113320",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113320",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113325",
        "description": ".history.juakali.juakali.phone.hello_20221012113325",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113325",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113325",
        "description": ".history.juakali.juakali.phone.hello_20221012113325",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113325",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113329",
        "description": ".history.juakali.juakali.phone.hello_20221012113329",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113329",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113329",
        "description": ".history.juakali.juakali.phone.hello_20221012113329",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113329",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113331",
        "description": ".history.juakali.juakali.phone.hello_20221012113331",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113331",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113331",
        "description": ".history.juakali.juakali.phone.hello_20221012113331",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113331",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113334",
        "description": ".history.juakali.juakali.phone.hello_20221012113334",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113334",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113334",
        "description": ".history.juakali.juakali.phone.hello_20221012113334",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113334",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113346",
        "description": ".history.juakali.juakali.phone.hello_20221012113346",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113346",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113346",
        "description": ".history.juakali.juakali.phone.hello_20221012113346",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113346",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113405",
        "description": ".history.juakali.juakali.phone.hello_20221012113405",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113405",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113405",
        "description": ".history.juakali.juakali.phone.hello_20221012113405",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113405",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113408",
        "description": ".history.juakali.juakali.phone.hello_20221012113408",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113408",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113408",
        "description": ".history.juakali.juakali.phone.hello_20221012113408",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113408",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113409",
        "description": ".history.juakali.juakali.phone.hello_20221012113409",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113409",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113409",
        "description": ".history.juakali.juakali.phone.hello_20221012113409",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113409",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113416",
        "description": ".history.juakali.juakali.phone.hello_20221012113416",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113416",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113416",
        "description": ".history.juakali.juakali.phone.hello_20221012113416",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113416",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113417",
        "description": ".history.juakali.juakali.phone.hello_20221012113417",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113417",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113417",
        "description": ".history.juakali.juakali.phone.hello_20221012113417",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113417",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113419",
        "description": ".history.juakali.juakali.phone.hello_20221012113419",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012113419",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012113419",
        "description": ".history.juakali.juakali.phone.hello_20221012113419",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012113419",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114332",
        "description": ".history.juakali.juakali.phone.hello_20221012114332",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114332",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114332",
        "description": ".history.juakali.juakali.phone.hello_20221012114332",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114332",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114334",
        "description": ".history.juakali.juakali.phone.hello_20221012114334",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114334",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114334",
        "description": ".history.juakali.juakali.phone.hello_20221012114334",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114334",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114336",
        "description": ".history.juakali.juakali.phone.hello_20221012114336",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114336",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114336",
        "description": ".history.juakali.juakali.phone.hello_20221012114336",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114336",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114337",
        "description": ".history.juakali.juakali.phone.hello_20221012114337",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114337",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114337",
        "description": ".history.juakali.juakali.phone.hello_20221012114337",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114337",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114340",
        "description": ".history.juakali.juakali.phone.hello_20221012114340",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114340",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114340",
        "description": ".history.juakali.juakali.phone.hello_20221012114340",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114340",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114346",
        "description": ".history.juakali.juakali.phone.hello_20221012114346",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114346",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114346",
        "description": ".history.juakali.juakali.phone.hello_20221012114346",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114346",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114347",
        "description": ".history.juakali.juakali.phone.hello_20221012114347",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114347",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114347",
        "description": ".history.juakali.juakali.phone.hello_20221012114347",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114347",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114356",
        "description": ".history.juakali.juakali.phone.hello_20221012114356",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114356",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114356",
        "description": ".history.juakali.juakali.phone.hello_20221012114356",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114356",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114416",
        "description": ".history.juakali.juakali.phone.hello_20221012114416",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114416",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114416",
        "description": ".history.juakali.juakali.phone.hello_20221012114416",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114416",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114424",
        "description": ".history.juakali.juakali.phone.hello_20221012114424",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114424",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114424",
        "description": ".history.juakali.juakali.phone.hello_20221012114424",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114424",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114446",
        "description": ".history.juakali.juakali.phone.hello_20221012114446",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114446",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114446",
        "description": ".history.juakali.juakali.phone.hello_20221012114446",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114446",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114449",
        "description": ".history.juakali.juakali.phone.hello_20221012114449",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114449",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114449",
        "description": ".history.juakali.juakali.phone.hello_20221012114449",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114449",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114451",
        "description": ".history.juakali.juakali.phone.hello_20221012114451",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114451",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114451",
        "description": ".history.juakali.juakali.phone.hello_20221012114451",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114451",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114501",
        "description": ".history.juakali.juakali.phone.hello_20221012114501",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114501",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114501",
        "description": ".history.juakali.juakali.phone.hello_20221012114501",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114501",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114506",
        "description": ".history.juakali.juakali.phone.hello_20221012114506",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114506",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114506",
        "description": ".history.juakali.juakali.phone.hello_20221012114506",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114506",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114511",
        "description": ".history.juakali.juakali.phone.hello_20221012114511",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114511",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114511",
        "description": ".history.juakali.juakali.phone.hello_20221012114511",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114511",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114528",
        "description": ".history.juakali.juakali.phone.hello_20221012114528",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114528",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114528",
        "description": ".history.juakali.juakali.phone.hello_20221012114528",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114528",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114532",
        "description": ".history.juakali.juakali.phone.hello_20221012114532",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114532",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114532",
        "description": ".history.juakali.juakali.phone.hello_20221012114532",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114532",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114534",
        "description": ".history.juakali.juakali.phone.hello_20221012114534",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114534",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114534",
        "description": ".history.juakali.juakali.phone.hello_20221012114534",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114534",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114535",
        "description": ".history.juakali.juakali.phone.hello_20221012114535",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114535",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114535",
        "description": ".history.juakali.juakali.phone.hello_20221012114535",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114535",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114537",
        "description": ".history.juakali.juakali.phone.hello_20221012114537",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114537",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114537",
        "description": ".history.juakali.juakali.phone.hello_20221012114537",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114537",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114707",
        "description": ".history.juakali.juakali.phone.hello_20221012114707",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114707",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114707",
        "description": ".history.juakali.juakali.phone.hello_20221012114707",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114707",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114708",
        "description": ".history.juakali.juakali.phone.hello_20221012114708",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114708",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114708",
        "description": ".history.juakali.juakali.phone.hello_20221012114708",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114708",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114715",
        "description": ".history.juakali.juakali.phone.hello_20221012114715",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114715",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114715",
        "description": ".history.juakali.juakali.phone.hello_20221012114715",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114715",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114731",
        "description": ".history.juakali.juakali.phone.hello_20221012114731",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114731",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114731",
        "description": ".history.juakali.juakali.phone.hello_20221012114731",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114731",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114733",
        "description": ".history.juakali.juakali.phone.hello_20221012114733",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114733",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114733",
        "description": ".history.juakali.juakali.phone.hello_20221012114733",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114733",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114740",
        "description": ".history.juakali.juakali.phone.hello_20221012114740",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114740",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114740",
        "description": ".history.juakali.juakali.phone.hello_20221012114740",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114740",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114743",
        "description": ".history.juakali.juakali.phone.hello_20221012114743",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114743",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114743",
        "description": ".history.juakali.juakali.phone.hello_20221012114743",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114743",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114747",
        "description": ".history.juakali.juakali.phone.hello_20221012114747",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114747",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114747",
        "description": ".history.juakali.juakali.phone.hello_20221012114747",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114747",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114812",
        "description": ".history.juakali.juakali.phone.hello_20221012114812",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114812",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114812",
        "description": ".history.juakali.juakali.phone.hello_20221012114812",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114812",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114817",
        "description": ".history.juakali.juakali.phone.hello_20221012114817",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114817",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114817",
        "description": ".history.juakali.juakali.phone.hello_20221012114817",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114817",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114819",
        "description": ".history.juakali.juakali.phone.hello_20221012114819",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114819",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114819",
        "description": ".history.juakali.juakali.phone.hello_20221012114819",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114819",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114821",
        "description": ".history.juakali.juakali.phone.hello_20221012114821",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114821",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114821",
        "description": ".history.juakali.juakali.phone.hello_20221012114821",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114821",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114825",
        "description": ".history.juakali.juakali.phone.hello_20221012114825",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114825",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114825",
        "description": ".history.juakali.juakali.phone.hello_20221012114825",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114825",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114832",
        "description": ".history.juakali.juakali.phone.hello_20221012114832",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114832",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114832",
        "description": ".history.juakali.juakali.phone.hello_20221012114832",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114832",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114834",
        "description": ".history.juakali.juakali.phone.hello_20221012114834",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114834",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114834",
        "description": ".history.juakali.juakali.phone.hello_20221012114834",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114834",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114906",
        "description": ".history.juakali.juakali.phone.hello_20221012114906",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114906",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114906",
        "description": ".history.juakali.juakali.phone.hello_20221012114906",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114906",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114908",
        "description": ".history.juakali.juakali.phone.hello_20221012114908",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114908",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114908",
        "description": ".history.juakali.juakali.phone.hello_20221012114908",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114908",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114932",
        "description": ".history.juakali.juakali.phone.hello_20221012114932",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114932",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114932",
        "description": ".history.juakali.juakali.phone.hello_20221012114932",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114932",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114953",
        "description": ".history.juakali.juakali.phone.hello_20221012114953",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012114953",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012114953",
        "description": ".history.juakali.juakali.phone.hello_20221012114953",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012114953",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012115129",
        "description": ".history.juakali.juakali.phone.hello_20221012115129",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012115129",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012115129",
        "description": ".history.juakali.juakali.phone.hello_20221012115129",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012115129",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012115138",
        "description": ".history.juakali.juakali.phone.hello_20221012115138",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012115138",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012115138",
        "description": ".history.juakali.juakali.phone.hello_20221012115138",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012115138",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012115143",
        "description": ".history.juakali.juakali.phone.hello_20221012115143",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012115143",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012115143",
        "description": ".history.juakali.juakali.phone.hello_20221012115143",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012115143",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012115144",
        "description": ".history.juakali.juakali.phone.hello_20221012115144",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012115144",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012115144",
        "description": ".history.juakali.juakali.phone.hello_20221012115144",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012115144",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012115146",
        "description": ".history.juakali.juakali.phone.hello_20221012115146",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012115146",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012115146",
        "description": ".history.juakali.juakali.phone.hello_20221012115146",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012115146",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012115148",
        "description": ".history.juakali.juakali.phone.hello_20221012115148",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012115148",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012115148",
        "description": ".history.juakali.juakali.phone.hello_20221012115148",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012115148",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012115151",
        "description": ".history.juakali.juakali.phone.hello_20221012115151",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012115151",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012115151",
        "description": ".history.juakali.juakali.phone.hello_20221012115151",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012115151",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012115154",
        "description": ".history.juakali.juakali.phone.hello_20221012115154",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012115154",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012115154",
        "description": ".history.juakali.juakali.phone.hello_20221012115154",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012115154",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012115157",
        "description": ".history.juakali.juakali.phone.hello_20221012115157",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012115157",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012115157",
        "description": ".history.juakali.juakali.phone.hello_20221012115157",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012115157",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012115205",
        "description": ".history.juakali.juakali.phone.hello_20221012115205",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012115205",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012115205",
        "description": ".history.juakali.juakali.phone.hello_20221012115205",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012115205",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012115209",
        "description": ".history.juakali.juakali.phone.hello_20221012115209",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012115209",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012115209",
        "description": ".history.juakali.juakali.phone.hello_20221012115209",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012115209",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012115212",
        "description": ".history.juakali.juakali.phone.hello_20221012115212",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012115212",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012115212",
        "description": ".history.juakali.juakali.phone.hello_20221012115212",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012115212",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012115217",
        "description": ".history.juakali.juakali.phone.hello_20221012115217",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012115217",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012115217",
        "description": ".history.juakali.juakali.phone.hello_20221012115217",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012115217",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012115218",
        "description": ".history.juakali.juakali.phone.hello_20221012115218",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012115218",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012115218",
        "description": ".history.juakali.juakali.phone.hello_20221012115218",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012115218",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012115224",
        "description": ".history.juakali.juakali.phone.hello_20221012115224",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012115224",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012115224",
        "description": ".history.juakali.juakali.phone.hello_20221012115224",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012115224",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012115227",
        "description": ".history.juakali.juakali.phone.hello_20221012115227",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012115227",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012115227",
        "description": ".history.juakali.juakali.phone.hello_20221012115227",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012115227",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012120158",
        "description": ".history.juakali.juakali.phone.hello_20221012120158",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012120158",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012120158",
        "description": ".history.juakali.juakali.phone.hello_20221012120158",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012120158",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012120203",
        "description": ".history.juakali.juakali.phone.hello_20221012120203",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012120203",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012120203",
        "description": ".history.juakali.juakali.phone.hello_20221012120203",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012120203",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012120205",
        "description": ".history.juakali.juakali.phone.hello_20221012120205",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012120205",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012120205",
        "description": ".history.juakali.juakali.phone.hello_20221012120205",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012120205",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221012120323",
        "description": ".history.juakali.juakali.phone.hello_20221012120323",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221012120323",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221012120323",
        "description": ".history.juakali.juakali.phone.hello_20221012120323",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221012120323",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.hello_20221013151207",
        "description": ".history.juakali.juakali.phone.hello_20221013151207",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": ".history.juakali.juakali.phone.hello_20221013151207",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.hello_20221013151207",
        "description": ".history.juakali.juakali.phone.hello_20221013151207",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": ".history.juakali.juakali.phone.hello_20221013151207",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20220925070604",
        "description": ".history.juakali.juakali.phone.test_20220925070604",
        "peekOfCode": "number = inpft(\"Enter Phone number :\")",
        "detail": ".history.juakali.juakali.phone.test_20220925070604",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012103741",
        "description": ".history.juakali.juakali.phone.test_20221012103741",
        "peekOfCode": "number = inpft(\"Enter Phone number :\")",
        "detail": ".history.juakali.juakali.phone.test_20221012103741",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012103748",
        "description": ".history.juakali.juakali.phone.test_20221012103748",
        "peekOfCode": "number = inpfskfkskldkskldklskdklt(\"Enter Phone number :\")",
        "detail": ".history.juakali.juakali.phone.test_20221012103748",
        "documentation": {}
    },
    {
        "label": "center",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105001",
        "description": ".history.juakali.juakali.phone.test_20221012105001",
        "peekOfCode": "center = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode",
        "detail": ".history.juakali.juakali.phone.test_20221012105001",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105001",
        "description": ".history.juakali.juakali.phone.test_20221012105001",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105001",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105001",
        "description": ".history.juakali.juakali.phone.test_20221012105001",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105001",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105001",
        "description": ".history.juakali.juakali.phone.test_20221012105001",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105001",
        "documentation": {}
    },
    {
        "label": "center",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105012",
        "description": ".history.juakali.juakali.phone.test_20221012105012",
        "peekOfCode": "center = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode",
        "detail": ".history.juakali.juakali.phone.test_20221012105012",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105012",
        "description": ".history.juakali.juakali.phone.test_20221012105012",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105012",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105012",
        "description": ".history.juakali.juakali.phone.test_20221012105012",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105012",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105012",
        "description": ".history.juakali.juakali.phone.test_20221012105012",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close(",
        "detail": ".history.juakali.juakali.phone.test_20221012105012",
        "documentation": {}
    },
    {
        "label": "center",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105018",
        "description": ".history.juakali.juakali.phone.test_20221012105018",
        "peekOfCode": "center = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode",
        "detail": ".history.juakali.juakali.phone.test_20221012105018",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105018",
        "description": ".history.juakali.juakali.phone.test_20221012105018",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105018",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105018",
        "description": ".history.juakali.juakali.phone.test_20221012105018",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105018",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105018",
        "description": ".history.juakali.juakali.phone.test_20221012105018",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close(",
        "detail": ".history.juakali.juakali.phone.test_20221012105018",
        "documentation": {}
    },
    {
        "label": "center",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105019",
        "description": ".history.juakali.juakali.phone.test_20221012105019",
        "peekOfCode": "center = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode",
        "detail": ".history.juakali.juakali.phone.test_20221012105019",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105019",
        "description": ".history.juakali.juakali.phone.test_20221012105019",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105019",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105019",
        "description": ".history.juakali.juakali.phone.test_20221012105019",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105019",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105019",
        "description": ".history.juakali.juakali.phone.test_20221012105019",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close(?",
        "detail": ".history.juakali.juakali.phone.test_20221012105019",
        "documentation": {}
    },
    {
        "label": "center",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105020",
        "description": ".history.juakali.juakali.phone.test_20221012105020",
        "peekOfCode": "center = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode",
        "detail": ".history.juakali.juakali.phone.test_20221012105020",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105020",
        "description": ".history.juakali.juakali.phone.test_20221012105020",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105020",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105020",
        "description": ".history.juakali.juakali.phone.test_20221012105020",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105020",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105020",
        "description": ".history.juakali.juakali.phone.test_20221012105020",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close(",
        "detail": ".history.juakali.juakali.phone.test_20221012105020",
        "documentation": {}
    },
    {
        "label": "center",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105022",
        "description": ".history.juakali.juakali.phone.test_20221012105022",
        "peekOfCode": "center = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode",
        "detail": ".history.juakali.juakali.phone.test_20221012105022",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105022",
        "description": ".history.juakali.juakali.phone.test_20221012105022",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105022",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105022",
        "description": ".history.juakali.juakali.phone.test_20221012105022",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105022",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105022",
        "description": ".history.juakali.juakali.phone.test_20221012105022",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105022",
        "documentation": {}
    },
    {
        "label": "center",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105224",
        "description": ".history.juakali.juakali.phone.test_20221012105224",
        "peekOfCode": "center = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode",
        "detail": ".history.juakali.juakali.phone.test_20221012105224",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105224",
        "description": ".history.juakali.juakali.phone.test_20221012105224",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105224",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105224",
        "description": ".history.juakali.juakali.phone.test_20221012105224",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105224",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105224",
        "description": ".history.juakali.juakali.phone.test_20221012105224",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105224",
        "documentation": {}
    },
    {
        "label": "center",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105227",
        "description": ".history.juakali.juakali.phone.test_20221012105227",
        "peekOfCode": "center = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode",
        "detail": ".history.juakali.juakali.phone.test_20221012105227",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105227",
        "description": ".history.juakali.juakali.phone.test_20221012105227",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105227",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105227",
        "description": ".history.juakali.juakali.phone.test_20221012105227",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105227",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105227",
        "description": ".history.juakali.juakali.phone.test_20221012105227",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105227",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105232",
        "description": ".history.juakali.juakali.phone.test_20221012105232",
        "peekOfCode": "api_key = \"\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \ncenter = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +",
        "detail": ".history.juakali.juakali.phone.test_20221012105232",
        "documentation": {}
    },
    {
        "label": "center",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105232",
        "description": ".history.juakali.juakali.phone.test_20221012105232",
        "peekOfCode": "center = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode",
        "detail": ".history.juakali.juakali.phone.test_20221012105232",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105232",
        "description": ".history.juakali.juakali.phone.test_20221012105232",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105232",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105232",
        "description": ".history.juakali.juakali.phone.test_20221012105232",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105232",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105232",
        "description": ".history.juakali.juakali.phone.test_20221012105232",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105232",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105244",
        "description": ".history.juakali.juakali.phone.test_20221012105244",
        "peekOfCode": "api_key = \"\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \ncenter = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +",
        "detail": ".history.juakali.juakali.phone.test_20221012105244",
        "documentation": {}
    },
    {
        "label": "center",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105244",
        "description": ".history.juakali.juakali.phone.test_20221012105244",
        "peekOfCode": "center = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode",
        "detail": ".history.juakali.juakali.phone.test_20221012105244",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105244",
        "description": ".history.juakali.juakali.phone.test_20221012105244",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105244",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105244",
        "description": ".history.juakali.juakali.phone.test_20221012105244",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105244",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105244",
        "description": ".history.juakali.juakali.phone.test_20221012105244",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105244",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105249",
        "description": ".history.juakali.juakali.phone.test_20221012105249",
        "peekOfCode": "api_key = \"\"\n#variable to \n# center defines the center of the map,\n# equidistant from all edges of the map. \ncenter = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object",
        "detail": ".history.juakali.juakali.phone.test_20221012105249",
        "documentation": {}
    },
    {
        "label": "center",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105249",
        "description": ".history.juakali.juakali.phone.test_20221012105249",
        "peekOfCode": "center = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode",
        "detail": ".history.juakali.juakali.phone.test_20221012105249",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105249",
        "description": ".history.juakali.juakali.phone.test_20221012105249",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105249",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105249",
        "description": ".history.juakali.juakali.phone.test_20221012105249",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105249",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105249",
        "description": ".history.juakali.juakali.phone.test_20221012105249",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105249",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105255",
        "description": ".history.juakali.juakali.phone.test_20221012105255",
        "peekOfCode": "api_key = \"\"\n#variable to store \n# center defines the center of the map,\n# equidistant from all edges of the map. \ncenter = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object",
        "detail": ".history.juakali.juakali.phone.test_20221012105255",
        "documentation": {}
    },
    {
        "label": "center",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105255",
        "description": ".history.juakali.juakali.phone.test_20221012105255",
        "peekOfCode": "center = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode",
        "detail": ".history.juakali.juakali.phone.test_20221012105255",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105255",
        "description": ".history.juakali.juakali.phone.test_20221012105255",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105255",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105255",
        "description": ".history.juakali.juakali.phone.test_20221012105255",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105255",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105255",
        "description": ".history.juakali.juakali.phone.test_20221012105255",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105255",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105256",
        "description": ".history.juakali.juakali.phone.test_20221012105256",
        "peekOfCode": "api_key = \"\"\n#variable to store url\n# center defines the center of the map,\n# equidistant from all edges of the map. \ncenter = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object",
        "detail": ".history.juakali.juakali.phone.test_20221012105256",
        "documentation": {}
    },
    {
        "label": "center",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105256",
        "description": ".history.juakali.juakali.phone.test_20221012105256",
        "peekOfCode": "center = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode",
        "detail": ".history.juakali.juakali.phone.test_20221012105256",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105256",
        "description": ".history.juakali.juakali.phone.test_20221012105256",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105256",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105256",
        "description": ".history.juakali.juakali.phone.test_20221012105256",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105256",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105256",
        "description": ".history.juakali.juakali.phone.test_20221012105256",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105256",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105300",
        "description": ".history.juakali.juakali.phone.test_20221012105300",
        "peekOfCode": "api_key = \"\"\n#variable to store url\n# center defines the center of the map,\n# equidistant from all edges of the map. \ncenter = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object",
        "detail": ".history.juakali.juakali.phone.test_20221012105300",
        "documentation": {}
    },
    {
        "label": "center",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105300",
        "description": ".history.juakali.juakali.phone.test_20221012105300",
        "peekOfCode": "center = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode",
        "detail": ".history.juakali.juakali.phone.test_20221012105300",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105300",
        "description": ".history.juakali.juakali.phone.test_20221012105300",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105300",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105300",
        "description": ".history.juakali.juakali.phone.test_20221012105300",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105300",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105300",
        "description": ".history.juakali.juakali.phone.test_20221012105300",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105300",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105314",
        "description": ".history.juakali.juakali.phone.test_20221012105314",
        "peekOfCode": "api_key = \"\"\n#variable to store url\n# center defines the center of the map,\nur\n# equidistant from all edges of the map. \ncenter = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module",
        "detail": ".history.juakali.juakali.phone.test_20221012105314",
        "documentation": {}
    },
    {
        "label": "center",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105314",
        "description": ".history.juakali.juakali.phone.test_20221012105314",
        "peekOfCode": "center = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode",
        "detail": ".history.juakali.juakali.phone.test_20221012105314",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105314",
        "description": ".history.juakali.juakali.phone.test_20221012105314",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105314",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105314",
        "description": ".history.juakali.juakali.phone.test_20221012105314",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105314",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105314",
        "description": ".history.juakali.juakali.phone.test_20221012105314",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105314",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105317",
        "description": ".history.juakali.juakali.phone.test_20221012105317",
        "peekOfCode": "api_key = \"\"\n#variable to store url\n# center defines the center of the map,\n# equidistant from all edges of the map. \ncenter = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object",
        "detail": ".history.juakali.juakali.phone.test_20221012105317",
        "documentation": {}
    },
    {
        "label": "center",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105317",
        "description": ".history.juakali.juakali.phone.test_20221012105317",
        "peekOfCode": "center = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode",
        "detail": ".history.juakali.juakali.phone.test_20221012105317",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105317",
        "description": ".history.juakali.juakali.phone.test_20221012105317",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105317",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105317",
        "description": ".history.juakali.juakali.phone.test_20221012105317",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105317",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105317",
        "description": ".history.juakali.juakali.phone.test_20221012105317",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105317",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105318",
        "description": ".history.juakali.juakali.phone.test_20221012105318",
        "peekOfCode": "api_key = \"\"\n#variable to store ur\n# center defines the center of the map,\n# equidistant from all edges of the map. \ncenter = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object",
        "detail": ".history.juakali.juakali.phone.test_20221012105318",
        "documentation": {}
    },
    {
        "label": "center",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105318",
        "description": ".history.juakali.juakali.phone.test_20221012105318",
        "peekOfCode": "center = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode",
        "detail": ".history.juakali.juakali.phone.test_20221012105318",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105318",
        "description": ".history.juakali.juakali.phone.test_20221012105318",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105318",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105318",
        "description": ".history.juakali.juakali.phone.test_20221012105318",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105318",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105318",
        "description": ".history.juakali.juakali.phone.test_20221012105318",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105318",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105320",
        "description": ".history.juakali.juakali.phone.test_20221012105320",
        "peekOfCode": "api_key = \"\"\n#variable to store url\n# center defines the center of the map,\n# equidistant from all edges of the map. \ncenter = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object",
        "detail": ".history.juakali.juakali.phone.test_20221012105320",
        "documentation": {}
    },
    {
        "label": "center",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105320",
        "description": ".history.juakali.juakali.phone.test_20221012105320",
        "peekOfCode": "center = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode",
        "detail": ".history.juakali.juakali.phone.test_20221012105320",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105320",
        "description": ".history.juakali.juakali.phone.test_20221012105320",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105320",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105320",
        "description": ".history.juakali.juakali.phone.test_20221012105320",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105320",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105320",
        "description": ".history.juakali.juakali.phone.test_20221012105320",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105320",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105325",
        "description": ".history.juakali.juakali.phone.test_20221012105325",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \ncenter = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module",
        "detail": ".history.juakali.juakali.phone.test_20221012105325",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105325",
        "description": ".history.juakali.juakali.phone.test_20221012105325",
        "peekOfCode": "url = \"\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \ncenter = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +",
        "detail": ".history.juakali.juakali.phone.test_20221012105325",
        "documentation": {}
    },
    {
        "label": "center",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105325",
        "description": ".history.juakali.juakali.phone.test_20221012105325",
        "peekOfCode": "center = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode",
        "detail": ".history.juakali.juakali.phone.test_20221012105325",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105325",
        "description": ".history.juakali.juakali.phone.test_20221012105325",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105325",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105325",
        "description": ".history.juakali.juakali.phone.test_20221012105325",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105325",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105325",
        "description": ".history.juakali.juakali.phone.test_20221012105325",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105325",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105333",
        "description": ".history.juakali.juakali.phone.test_20221012105333",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter name \"\n# center defines the center of the map,\n# equidistant from all edges of the map. \ncenter = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module",
        "detail": ".history.juakali.juakali.phone.test_20221012105333",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105333",
        "description": ".history.juakali.juakali.phone.test_20221012105333",
        "peekOfCode": "url = \"Enter name \"\n# center defines the center of the map,\n# equidistant from all edges of the map. \ncenter = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +",
        "detail": ".history.juakali.juakali.phone.test_20221012105333",
        "documentation": {}
    },
    {
        "label": "center",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105333",
        "description": ".history.juakali.juakali.phone.test_20221012105333",
        "peekOfCode": "center = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode",
        "detail": ".history.juakali.juakali.phone.test_20221012105333",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105333",
        "description": ".history.juakali.juakali.phone.test_20221012105333",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105333",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105333",
        "description": ".history.juakali.juakali.phone.test_20221012105333",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105333",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105333",
        "description": ".history.juakali.juakali.phone.test_20221012105333",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105333",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105339",
        "description": ".history.juakali.juakali.phone.test_20221012105339",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \ncenter = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module",
        "detail": ".history.juakali.juakali.phone.test_20221012105339",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105339",
        "description": ".history.juakali.juakali.phone.test_20221012105339",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \ncenter = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +",
        "detail": ".history.juakali.juakali.phone.test_20221012105339",
        "documentation": {}
    },
    {
        "label": "center",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105339",
        "description": ".history.juakali.juakali.phone.test_20221012105339",
        "peekOfCode": "center = \"Dehradun\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode",
        "detail": ".history.juakali.juakali.phone.test_20221012105339",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105339",
        "description": ".history.juakali.juakali.phone.test_20221012105339",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105339",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105339",
        "description": ".history.juakali.juakali.phone.test_20221012105339",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105339",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105339",
        "description": ".history.juakali.juakali.phone.test_20221012105339",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105339",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105352",
        "description": ".history.juakali.juakali.phone.test_20221012105352",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \ncenter = \"\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module",
        "detail": ".history.juakali.juakali.phone.test_20221012105352",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105352",
        "description": ".history.juakali.juakali.phone.test_20221012105352",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \ncenter = \"\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +",
        "detail": ".history.juakali.juakali.phone.test_20221012105352",
        "documentation": {}
    },
    {
        "label": "center",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105352",
        "description": ".history.juakali.juakali.phone.test_20221012105352",
        "peekOfCode": "center = \"\"\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode",
        "detail": ".history.juakali.juakali.phone.test_20221012105352",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105352",
        "description": ".history.juakali.juakali.phone.test_20221012105352",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105352",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105352",
        "description": ".history.juakali.juakali.phone.test_20221012105352",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105352",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105352",
        "description": ".history.juakali.juakali.phone.test_20221012105352",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105352",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105357",
        "description": ".history.juakali.juakali.phone.test_20221012105357",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object",
        "detail": ".history.juakali.juakali.phone.test_20221012105357",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105357",
        "description": ".history.juakali.juakali.phone.test_20221012105357",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +",
        "detail": ".history.juakali.juakali.phone.test_20221012105357",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105357",
        "description": ".history.juakali.juakali.phone.test_20221012105357",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105357",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105357",
        "description": ".history.juakali.juakali.phone.test_20221012105357",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105357",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105357",
        "description": ".history.juakali.juakali.phone.test_20221012105357",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105357",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105359",
        "description": ".history.juakali.juakali.phone.test_20221012105359",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object",
        "detail": ".history.juakali.juakali.phone.test_20221012105359",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105359",
        "description": ".history.juakali.juakali.phone.test_20221012105359",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +",
        "detail": ".history.juakali.juakali.phone.test_20221012105359",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105359",
        "description": ".history.juakali.juakali.phone.test_20221012105359",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105359",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105359",
        "description": ".history.juakali.juakali.phone.test_20221012105359",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105359",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105359",
        "description": ".history.juakali.juakali.phone.test_20221012105359",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105359",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105401",
        "description": ".history.juakali.juakali.phone.test_20221012105401",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module",
        "detail": ".history.juakali.juakali.phone.test_20221012105401",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105401",
        "description": ".history.juakali.juakali.phone.test_20221012105401",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +",
        "detail": ".history.juakali.juakali.phone.test_20221012105401",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105401",
        "description": ".history.juakali.juakali.phone.test_20221012105401",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105401",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105401",
        "description": ".history.juakali.juakali.phone.test_20221012105401",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105401",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105401",
        "description": ".history.juakali.juakali.phone.test_20221012105401",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105401",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105406",
        "description": ".history.juakali.juakali.phone.test_20221012105406",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define \n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module",
        "detail": ".history.juakali.juakali.phone.test_20221012105406",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105406",
        "description": ".history.juakali.juakali.phone.test_20221012105406",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define \n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +",
        "detail": ".history.juakali.juakali.phone.test_20221012105406",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105406",
        "description": ".history.juakali.juakali.phone.test_20221012105406",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105406",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105406",
        "description": ".history.juakali.juakali.phone.test_20221012105406",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105406",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105406",
        "description": ".history.juakali.juakali.phone.test_20221012105406",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105406",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105452",
        "description": ".history.juakali.juakali.phone.test_20221012105452",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module",
        "detail": ".history.juakali.juakali.phone.test_20221012105452",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105452",
        "description": ".history.juakali.juakali.phone.test_20221012105452",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +",
        "detail": ".history.juakali.juakali.phone.test_20221012105452",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105452",
        "description": ".history.juakali.juakali.phone.test_20221012105452",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105452",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105452",
        "description": ".history.juakali.juakali.phone.test_20221012105452",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105452",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105452",
        "description": ".history.juakali.juakali.phone.test_20221012105452",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105452",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105453",
        "description": ".history.juakali.juakali.phone.test_20221012105453",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module",
        "detail": ".history.juakali.juakali.phone.test_20221012105453",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105453",
        "description": ".history.juakali.juakali.phone.test_20221012105453",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +",
        "detail": ".history.juakali.juakali.phone.test_20221012105453",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105453",
        "description": ".history.juakali.juakali.phone.test_20221012105453",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105453",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105453",
        "description": ".history.juakali.juakali.phone.test_20221012105453",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105453",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105453",
        "description": ".history.juakali.juakali.phone.test_20221012105453",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105453",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 2,
            "peekOfCode": "def \n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode"
        },
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.test_20221012105634",
        "description": ".history.juakali.juakali.phone.test_20221012105634",
        "peekOfCode": "def \n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode",
        "detail": ".history.juakali.juakali.phone.test_20221012105634",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105634",
        "description": ".history.juakali.juakali.phone.test_20221012105634",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef \n# zoom defines the zoom\n# level of the map\nzoom = 10",
        "detail": ".history.juakali.juakali.phone.test_20221012105634",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105634",
        "description": ".history.juakali.juakali.phone.test_20221012105634",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef \n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object",
        "detail": ".history.juakali.juakali.phone.test_20221012105634",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105634",
        "description": ".history.juakali.juakali.phone.test_20221012105634",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105634",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105634",
        "description": ".history.juakali.juakali.phone.test_20221012105634",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105634",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105634",
        "description": ".history.juakali.juakali.phone.test_20221012105634",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105634",
        "documentation": {}
    },
    {
        "label": "GetD",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.test_20221012105647",
        "description": ".history.juakali.juakali.phone.test_20221012105647",
        "peekOfCode": "def GetDE\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode",
        "detail": ".history.juakali.juakali.phone.test_20221012105647",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105647",
        "description": ".history.juakali.juakali.phone.test_20221012105647",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef GetDE\n# zoom defines the zoom\n# level of the map\nzoom = 10",
        "detail": ".history.juakali.juakali.phone.test_20221012105647",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105647",
        "description": ".history.juakali.juakali.phone.test_20221012105647",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef GetDE\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object",
        "detail": ".history.juakali.juakali.phone.test_20221012105647",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105647",
        "description": ".history.juakali.juakali.phone.test_20221012105647",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105647",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105647",
        "description": ".history.juakali.juakali.phone.test_20221012105647",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105647",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105647",
        "description": ".history.juakali.juakali.phone.test_20221012105647",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105647",
        "documentation": {}
    },
    {
        "label": "GetDet",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.test_20221012105649",
        "description": ".history.juakali.juakali.phone.test_20221012105649",
        "peekOfCode": "def GetDeta\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode",
        "detail": ".history.juakali.juakali.phone.test_20221012105649",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105649",
        "description": ".history.juakali.juakali.phone.test_20221012105649",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef GetDeta\n# zoom defines the zoom\n# level of the map\nzoom = 10",
        "detail": ".history.juakali.juakali.phone.test_20221012105649",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105649",
        "description": ".history.juakali.juakali.phone.test_20221012105649",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef GetDeta\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object",
        "detail": ".history.juakali.juakali.phone.test_20221012105649",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105649",
        "description": ".history.juakali.juakali.phone.test_20221012105649",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105649",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105649",
        "description": ".history.juakali.juakali.phone.test_20221012105649",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105649",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105649",
        "description": ".history.juakali.juakali.phone.test_20221012105649",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105649",
        "documentation": {}
    },
    {
        "label": "GetDetai",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.test_20221012105650",
        "description": ".history.juakali.juakali.phone.test_20221012105650",
        "peekOfCode": "def GetDetail\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode",
        "detail": ".history.juakali.juakali.phone.test_20221012105650",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105650",
        "description": ".history.juakali.juakali.phone.test_20221012105650",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef GetDetail\n# zoom defines the zoom\n# level of the map\nzoom = 10",
        "detail": ".history.juakali.juakali.phone.test_20221012105650",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105650",
        "description": ".history.juakali.juakali.phone.test_20221012105650",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef GetDetail\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object",
        "detail": ".history.juakali.juakali.phone.test_20221012105650",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105650",
        "description": ".history.juakali.juakali.phone.test_20221012105650",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105650",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105650",
        "description": ".history.juakali.juakali.phone.test_20221012105650",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105650",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105650",
        "description": ".history.juakali.juakali.phone.test_20221012105650",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105650",
        "documentation": {}
    },
    {
        "label": "getDetai",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.test_20221012105654",
        "description": ".history.juakali.juakali.phone.test_20221012105654",
        "peekOfCode": "def getDetail\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode",
        "detail": ".history.juakali.juakali.phone.test_20221012105654",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105654",
        "description": ".history.juakali.juakali.phone.test_20221012105654",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail\n# zoom defines the zoom\n# level of the map\nzoom = 10",
        "detail": ".history.juakali.juakali.phone.test_20221012105654",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105654",
        "description": ".history.juakali.juakali.phone.test_20221012105654",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object",
        "detail": ".history.juakali.juakali.phone.test_20221012105654",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105654",
        "description": ".history.juakali.juakali.phone.test_20221012105654",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105654",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105654",
        "description": ".history.juakali.juakali.phone.test_20221012105654",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105654",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105654",
        "description": ".history.juakali.juakali.phone.test_20221012105654",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105654",
        "documentation": {}
    },
    {
        "label": "getDetail",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.test_20221012105659",
        "description": ".history.juakali.juakali.phone.test_20221012105659",
        "peekOfCode": "def getDetail()\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode",
        "detail": ".history.juakali.juakali.phone.test_20221012105659",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105659",
        "description": ".history.juakali.juakali.phone.test_20221012105659",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail()\n# zoom defines the zoom\n# level of the map\nzoom = 10",
        "detail": ".history.juakali.juakali.phone.test_20221012105659",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105659",
        "description": ".history.juakali.juakali.phone.test_20221012105659",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail()\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object",
        "detail": ".history.juakali.juakali.phone.test_20221012105659",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105659",
        "description": ".history.juakali.juakali.phone.test_20221012105659",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105659",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105659",
        "description": ".history.juakali.juakali.phone.test_20221012105659",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105659",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105659",
        "description": ".history.juakali.juakali.phone.test_20221012105659",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105659",
        "documentation": {}
    },
    {
        "label": "getDetail",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.test_20221012105702",
        "description": ".history.juakali.juakali.phone.test_20221012105702",
        "peekOfCode": "def getDetail(){\n}\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")",
        "detail": ".history.juakali.juakali.phone.test_20221012105702",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105702",
        "description": ".history.juakali.juakali.phone.test_20221012105702",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail(){\n}\n# zoom defines the zoom\n# level of the map",
        "detail": ".history.juakali.juakali.phone.test_20221012105702",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105702",
        "description": ".history.juakali.juakali.phone.test_20221012105702",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail(){\n}\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module",
        "detail": ".history.juakali.juakali.phone.test_20221012105702",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105702",
        "description": ".history.juakali.juakali.phone.test_20221012105702",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105702",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105702",
        "description": ".history.juakali.juakali.phone.test_20221012105702",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105702",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105702",
        "description": ".history.juakali.juakali.phone.test_20221012105702",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105702",
        "documentation": {}
    },
    {
        "label": "getDetail",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.test_20221012105713",
        "description": ".history.juakali.juakali.phone.test_20221012105713",
        "peekOfCode": "def getDetail():{\n}\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")",
        "detail": ".history.juakali.juakali.phone.test_20221012105713",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105713",
        "description": ".history.juakali.juakali.phone.test_20221012105713",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail():{\n}\n# zoom defines the zoom\n# level of the map",
        "detail": ".history.juakali.juakali.phone.test_20221012105713",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105713",
        "description": ".history.juakali.juakali.phone.test_20221012105713",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail():{\n}\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module",
        "detail": ".history.juakali.juakali.phone.test_20221012105713",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105713",
        "description": ".history.juakali.juakali.phone.test_20221012105713",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105713",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105713",
        "description": ".history.juakali.juakali.phone.test_20221012105713",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105713",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105713",
        "description": ".history.juakali.juakali.phone.test_20221012105713",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105713",
        "documentation": {}
    },
    {
        "label": "getDetail",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.test_20221012105720",
        "description": ".history.juakali.juakali.phone.test_20221012105720",
        "peekOfCode": "def getDetail():\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode",
        "detail": ".history.juakali.juakali.phone.test_20221012105720",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105720",
        "description": ".history.juakali.juakali.phone.test_20221012105720",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail():\n# zoom defines the zoom\n# level of the map\nzoom = 10",
        "detail": ".history.juakali.juakali.phone.test_20221012105720",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105720",
        "description": ".history.juakali.juakali.phone.test_20221012105720",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail():\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object",
        "detail": ".history.juakali.juakali.phone.test_20221012105720",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105720",
        "description": ".history.juakali.juakali.phone.test_20221012105720",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105720",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105720",
        "description": ".history.juakali.juakali.phone.test_20221012105720",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105720",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105720",
        "description": ".history.juakali.juakali.phone.test_20221012105720",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105720",
        "documentation": {}
    },
    {
        "label": "getDetail",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.test_20221012105750",
        "description": ".history.juakali.juakali.phone.test_20221012105750",
        "peekOfCode": "def getDetail(url):\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode",
        "detail": ".history.juakali.juakali.phone.test_20221012105750",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105750",
        "description": ".history.juakali.juakali.phone.test_20221012105750",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail(url):\n# zoom defines the zoom\n# level of the map\nzoom = 10",
        "detail": ".history.juakali.juakali.phone.test_20221012105750",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105750",
        "description": ".history.juakali.juakali.phone.test_20221012105750",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail(url):\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object",
        "detail": ".history.juakali.juakali.phone.test_20221012105750",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105750",
        "description": ".history.juakali.juakali.phone.test_20221012105750",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105750",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105750",
        "description": ".history.juakali.juakali.phone.test_20221012105750",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105750",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105750",
        "description": ".history.juakali.juakali.phone.test_20221012105750",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105750",
        "documentation": {}
    },
    {
        "label": "getDetail",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.test_20221012105802",
        "description": ".history.juakali.juakali.phone.test_20221012105802",
        "peekOfCode": "def getDetail(url):\n    p\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")",
        "detail": ".history.juakali.juakali.phone.test_20221012105802",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105802",
        "description": ".history.juakali.juakali.phone.test_20221012105802",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail(url):\n    p\n# zoom defines the zoom\n# level of the map",
        "detail": ".history.juakali.juakali.phone.test_20221012105802",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105802",
        "description": ".history.juakali.juakali.phone.test_20221012105802",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail(url):\n    p\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module",
        "detail": ".history.juakali.juakali.phone.test_20221012105802",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105802",
        "description": ".history.juakali.juakali.phone.test_20221012105802",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105802",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105802",
        "description": ".history.juakali.juakali.phone.test_20221012105802",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105802",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105802",
        "description": ".history.juakali.juakali.phone.test_20221012105802",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105802",
        "documentation": {}
    },
    {
        "label": "getDetail",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.test_20221012105804",
        "description": ".history.juakali.juakali.phone.test_20221012105804",
        "peekOfCode": "def getDetail(url):\n    print \n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")",
        "detail": ".history.juakali.juakali.phone.test_20221012105804",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105804",
        "description": ".history.juakali.juakali.phone.test_20221012105804",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail(url):\n    print \n# zoom defines the zoom\n# level of the map",
        "detail": ".history.juakali.juakali.phone.test_20221012105804",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105804",
        "description": ".history.juakali.juakali.phone.test_20221012105804",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail(url):\n    print \n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module",
        "detail": ".history.juakali.juakali.phone.test_20221012105804",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105804",
        "description": ".history.juakali.juakali.phone.test_20221012105804",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105804",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105804",
        "description": ".history.juakali.juakali.phone.test_20221012105804",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105804",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105804",
        "description": ".history.juakali.juakali.phone.test_20221012105804",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105804",
        "documentation": {}
    },
    {
        "label": "getDetail",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.test_20221012105806",
        "description": ".history.juakali.juakali.phone.test_20221012105806",
        "peekOfCode": "def getDetail(url):\n    print\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")",
        "detail": ".history.juakali.juakali.phone.test_20221012105806",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105806",
        "description": ".history.juakali.juakali.phone.test_20221012105806",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail(url):\n    print\n# zoom defines the zoom\n# level of the map",
        "detail": ".history.juakali.juakali.phone.test_20221012105806",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105806",
        "description": ".history.juakali.juakali.phone.test_20221012105806",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail(url):\n    print\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module",
        "detail": ".history.juakali.juakali.phone.test_20221012105806",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105806",
        "description": ".history.juakali.juakali.phone.test_20221012105806",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105806",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105806",
        "description": ".history.juakali.juakali.phone.test_20221012105806",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105806",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105806",
        "description": ".history.juakali.juakali.phone.test_20221012105806",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105806",
        "documentation": {}
    },
    {
        "label": "getDetail",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.test_20221012105807",
        "description": ".history.juakali.juakali.phone.test_20221012105807",
        "peekOfCode": "def getDetail(url):\n    print()\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")",
        "detail": ".history.juakali.juakali.phone.test_20221012105807",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105807",
        "description": ".history.juakali.juakali.phone.test_20221012105807",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail(url):\n    print()\n# zoom defines the zoom\n# level of the map",
        "detail": ".history.juakali.juakali.phone.test_20221012105807",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105807",
        "description": ".history.juakali.juakali.phone.test_20221012105807",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail(url):\n    print()\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module",
        "detail": ".history.juakali.juakali.phone.test_20221012105807",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105807",
        "description": ".history.juakali.juakali.phone.test_20221012105807",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105807",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105807",
        "description": ".history.juakali.juakali.phone.test_20221012105807",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105807",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105807",
        "description": ".history.juakali.juakali.phone.test_20221012105807",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105807",
        "documentation": {}
    },
    {
        "label": "getDetail",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.test_20221012105809",
        "description": ".history.juakali.juakali.phone.test_20221012105809",
        "peekOfCode": "def getDetail(url):\n    print(\"\")\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")",
        "detail": ".history.juakali.juakali.phone.test_20221012105809",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105809",
        "description": ".history.juakali.juakali.phone.test_20221012105809",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail(url):\n    print(\"\")\n# zoom defines the zoom\n# level of the map",
        "detail": ".history.juakali.juakali.phone.test_20221012105809",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105809",
        "description": ".history.juakali.juakali.phone.test_20221012105809",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail(url):\n    print(\"\")\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module",
        "detail": ".history.juakali.juakali.phone.test_20221012105809",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105809",
        "description": ".history.juakali.juakali.phone.test_20221012105809",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105809",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105809",
        "description": ".history.juakali.juakali.phone.test_20221012105809",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105809",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105809",
        "description": ".history.juakali.juakali.phone.test_20221012105809",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105809",
        "documentation": {}
    },
    {
        "label": "getDetail",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.test_20221012105812",
        "description": ".history.juakali.juakali.phone.test_20221012105812",
        "peekOfCode": "def getDetail(url):\n    print(\"The closes\")\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")",
        "detail": ".history.juakali.juakali.phone.test_20221012105812",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105812",
        "description": ".history.juakali.juakali.phone.test_20221012105812",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail(url):\n    print(\"The closes\")\n# zoom defines the zoom\n# level of the map",
        "detail": ".history.juakali.juakali.phone.test_20221012105812",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105812",
        "description": ".history.juakali.juakali.phone.test_20221012105812",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail(url):\n    print(\"The closes\")\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module",
        "detail": ".history.juakali.juakali.phone.test_20221012105812",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105812",
        "description": ".history.juakali.juakali.phone.test_20221012105812",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105812",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105812",
        "description": ".history.juakali.juakali.phone.test_20221012105812",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105812",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105812",
        "description": ".history.juakali.juakali.phone.test_20221012105812",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105812",
        "documentation": {}
    },
    {
        "label": "getDetail",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.test_20221012105817",
        "description": ".history.juakali.juakali.phone.test_20221012105817",
        "peekOfCode": "def getDetail(url):\n    print(\"The closest person to yo\")\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")",
        "detail": ".history.juakali.juakali.phone.test_20221012105817",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105817",
        "description": ".history.juakali.juakali.phone.test_20221012105817",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail(url):\n    print(\"The closest person to yo\")\n# zoom defines the zoom\n# level of the map",
        "detail": ".history.juakali.juakali.phone.test_20221012105817",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105817",
        "description": ".history.juakali.juakali.phone.test_20221012105817",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail(url):\n    print(\"The closest person to yo\")\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module",
        "detail": ".history.juakali.juakali.phone.test_20221012105817",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105817",
        "description": ".history.juakali.juakali.phone.test_20221012105817",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105817",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105817",
        "description": ".history.juakali.juakali.phone.test_20221012105817",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105817",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105817",
        "description": ".history.juakali.juakali.phone.test_20221012105817",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105817",
        "documentation": {}
    },
    {
        "label": "getDetail",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.test_20221012105824",
        "description": ".history.juakali.juakali.phone.test_20221012105824",
        "peekOfCode": "def getDetail(url):\n    print(\"\")\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")",
        "detail": ".history.juakali.juakali.phone.test_20221012105824",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105824",
        "description": ".history.juakali.juakali.phone.test_20221012105824",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail(url):\n    print(\"\")\n# zoom defines the zoom\n# level of the map",
        "detail": ".history.juakali.juakali.phone.test_20221012105824",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105824",
        "description": ".history.juakali.juakali.phone.test_20221012105824",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail(url):\n    print(\"\")\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module",
        "detail": ".history.juakali.juakali.phone.test_20221012105824",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105824",
        "description": ".history.juakali.juakali.phone.test_20221012105824",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105824",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105824",
        "description": ".history.juakali.juakali.phone.test_20221012105824",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105824",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105824",
        "description": ".history.juakali.juakali.phone.test_20221012105824",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105824",
        "documentation": {}
    },
    {
        "label": "getDetail",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.test_20221012105853",
        "description": ".history.juakali.juakali.phone.test_20221012105853",
        "peekOfCode": "def getDetail():\n    print(\"\")\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")",
        "detail": ".history.juakali.juakali.phone.test_20221012105853",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105853",
        "description": ".history.juakali.juakali.phone.test_20221012105853",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail():\n    print(\"\")\n# zoom defines the zoom\n# level of the map",
        "detail": ".history.juakali.juakali.phone.test_20221012105853",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105853",
        "description": ".history.juakali.juakali.phone.test_20221012105853",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail():\n    print(\"\")\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module",
        "detail": ".history.juakali.juakali.phone.test_20221012105853",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105853",
        "description": ".history.juakali.juakali.phone.test_20221012105853",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012105853",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105853",
        "description": ".history.juakali.juakali.phone.test_20221012105853",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012105853",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012105853",
        "description": ".history.juakali.juakali.phone.test_20221012105853",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012105853",
        "documentation": {}
    },
    {
        "label": "getDetail",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.test_20221012110133",
        "description": ".history.juakali.juakali.phone.test_20221012110133",
        "peekOfCode": "def getDetail():\n    prin\")\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")",
        "detail": ".history.juakali.juakali.phone.test_20221012110133",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012110133",
        "description": ".history.juakali.juakali.phone.test_20221012110133",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail():\n    prin\")\n# zoom defines the zoom\n# level of the map",
        "detail": ".history.juakali.juakali.phone.test_20221012110133",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012110133",
        "description": ".history.juakali.juakali.phone.test_20221012110133",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail():\n    prin\")\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module",
        "detail": ".history.juakali.juakali.phone.test_20221012110133",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012110133",
        "description": ".history.juakali.juakali.phone.test_20221012110133",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012110133",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012110133",
        "description": ".history.juakali.juakali.phone.test_20221012110133",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012110133",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012110133",
        "description": ".history.juakali.juakali.phone.test_20221012110133",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012110133",
        "documentation": {}
    },
    {
        "label": "getDetail",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.test_20221012110137",
        "description": ".history.juakali.juakali.phone.test_20221012110137",
        "peekOfCode": "def getDetail():\n    print\")\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")",
        "detail": ".history.juakali.juakali.phone.test_20221012110137",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012110137",
        "description": ".history.juakali.juakali.phone.test_20221012110137",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail():\n    print\")\n# zoom defines the zoom\n# level of the map",
        "detail": ".history.juakali.juakali.phone.test_20221012110137",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012110137",
        "description": ".history.juakali.juakali.phone.test_20221012110137",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail():\n    print\")\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module",
        "detail": ".history.juakali.juakali.phone.test_20221012110137",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012110137",
        "description": ".history.juakali.juakali.phone.test_20221012110137",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012110137",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012110137",
        "description": ".history.juakali.juakali.phone.test_20221012110137",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012110137",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012110137",
        "description": ".history.juakali.juakali.phone.test_20221012110137",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012110137",
        "documentation": {}
    },
    {
        "label": "getDetail",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.test_20221012110141",
        "description": ".history.juakali.juakali.phone.test_20221012110141",
        "peekOfCode": "def getDetail():\n    prin\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")",
        "detail": ".history.juakali.juakali.phone.test_20221012110141",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012110141",
        "description": ".history.juakali.juakali.phone.test_20221012110141",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail():\n    prin\n# zoom defines the zoom\n# level of the map",
        "detail": ".history.juakali.juakali.phone.test_20221012110141",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012110141",
        "description": ".history.juakali.juakali.phone.test_20221012110141",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail():\n    prin\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module",
        "detail": ".history.juakali.juakali.phone.test_20221012110141",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012110141",
        "description": ".history.juakali.juakali.phone.test_20221012110141",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012110141",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012110141",
        "description": ".history.juakali.juakali.phone.test_20221012110141",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012110141",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012110141",
        "description": ".history.juakali.juakali.phone.test_20221012110141",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012110141",
        "documentation": {}
    },
    {
        "label": "getDetail",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.test_20221012110143",
        "description": ".history.juakali.juakali.phone.test_20221012110143",
        "peekOfCode": "def getDetail():\n    print\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")",
        "detail": ".history.juakali.juakali.phone.test_20221012110143",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012110143",
        "description": ".history.juakali.juakali.phone.test_20221012110143",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail():\n    print\n# zoom defines the zoom\n# level of the map",
        "detail": ".history.juakali.juakali.phone.test_20221012110143",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012110143",
        "description": ".history.juakali.juakali.phone.test_20221012110143",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail():\n    print\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module",
        "detail": ".history.juakali.juakali.phone.test_20221012110143",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012110143",
        "description": ".history.juakali.juakali.phone.test_20221012110143",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012110143",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012110143",
        "description": ".history.juakali.juakali.phone.test_20221012110143",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012110143",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012110143",
        "description": ".history.juakali.juakali.phone.test_20221012110143",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012110143",
        "documentation": {}
    },
    {
        "label": "getDetail",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.test_20221012113633",
        "description": ".history.juakali.juakali.phone.test_20221012113633",
        "peekOfCode": "def getDetail():\n    print\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")",
        "detail": ".history.juakali.juakali.phone.test_20221012113633",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012113633",
        "description": ".history.juakali.juakali.phone.test_20221012113633",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail():\n    print\n# zoom defines the zoom\n# level of the map",
        "detail": ".history.juakali.juakali.phone.test_20221012113633",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012113633",
        "description": ".history.juakali.juakali.phone.test_20221012113633",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail():\n    print\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module",
        "detail": ".history.juakali.juakali.phone.test_20221012113633",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012113633",
        "description": ".history.juakali.juakali.phone.test_20221012113633",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012113633",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012113633",
        "description": ".history.juakali.juakali.phone.test_20221012113633",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012113633",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012113633",
        "description": ".history.juakali.juakali.phone.test_20221012113633",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012113633",
        "documentation": {}
    },
    {
        "label": "getDetail",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.test_20221012113636",
        "description": ".history.juakali.juakali.phone.test_20221012113636",
        "peekOfCode": "def getDetail():\n    print\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")",
        "detail": ".history.juakali.juakali.phone.test_20221012113636",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012113636",
        "description": ".history.juakali.juakali.phone.test_20221012113636",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail():\n    print\n# zoom defines the zoom\n# level of the map",
        "detail": ".history.juakali.juakali.phone.test_20221012113636",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012113636",
        "description": ".history.juakali.juakali.phone.test_20221012113636",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail():\n    print\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module",
        "detail": ".history.juakali.juakali.phone.test_20221012113636",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012113636",
        "description": ".history.juakali.juakali.phone.test_20221012113636",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012113636",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012113636",
        "description": ".history.juakali.juakali.phone.test_20221012113636",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012113636",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012113636",
        "description": ".history.juakali.juakali.phone.test_20221012113636",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012113636",
        "documentation": {}
    },
    {
        "label": "getDetail",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.test_20221012114806",
        "description": ".history.juakali.juakali.phone.test_20221012114806",
        "peekOfCode": "def getDetail():\n    print\nskills\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +",
        "detail": ".history.juakali.juakali.phone.test_20221012114806",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012114806",
        "description": ".history.juakali.juakali.phone.test_20221012114806",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail():\n    print\nskills\n# zoom defines the zoom",
        "detail": ".history.juakali.juakali.phone.test_20221012114806",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012114806",
        "description": ".history.juakali.juakali.phone.test_20221012114806",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail():\n    print\nskills\n# zoom defines the zoom\n# level of the map\nzoom = 10",
        "detail": ".history.juakali.juakali.phone.test_20221012114806",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012114806",
        "description": ".history.juakali.juakali.phone.test_20221012114806",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221012114806",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012114806",
        "description": ".history.juakali.juakali.phone.test_20221012114806",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221012114806",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221012114806",
        "description": ".history.juakali.juakali.phone.test_20221012114806",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221012114806",
        "documentation": {}
    },
    {
        "label": "getDetail",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.test_20221013151705",
        "description": ".history.juakali.juakali.phone.test_20221013151705",
        "peekOfCode": "def getDetail():\n    print\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")",
        "detail": ".history.juakali.juakali.phone.test_20221013151705",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221013151705",
        "description": ".history.juakali.juakali.phone.test_20221013151705",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail():\n    print\n# zoom defines the zoom\n# level of the map",
        "detail": ".history.juakali.juakali.phone.test_20221013151705",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221013151705",
        "description": ".history.juakali.juakali.phone.test_20221013151705",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail():\n    print\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module",
        "detail": ".history.juakali.juakali.phone.test_20221013151705",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221013151705",
        "description": ".history.juakali.juakali.phone.test_20221013151705",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221013151705",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221013151705",
        "description": ".history.juakali.juakali.phone.test_20221013151705",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221013151705",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221013151705",
        "description": ".history.juakali.juakali.phone.test_20221013151705",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221013151705",
        "documentation": {}
    },
    {
        "label": "getDetail",
        "kind": 2,
        "importPath": ".history.juakali.juakali.phone.test_20221013151710",
        "description": ".history.juakali.juakali.phone.test_20221013151710",
        "peekOfCode": "def getDetail():\n    print\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")",
        "detail": ".history.juakali.juakali.phone.test_20221013151710",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221013151710",
        "description": ".history.juakali.juakali.phone.test_20221013151710",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail():\n    print\n# zoom defines the zoom\n# level of the map",
        "detail": ".history.juakali.juakali.phone.test_20221013151710",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221013151710",
        "description": ".history.juakali.juakali.phone.test_20221013151710",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail():\n    print\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module",
        "detail": ".history.juakali.juakali.phone.test_20221013151710",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221013151710",
        "description": ".history.juakali.juakali.phone.test_20221013151710",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": ".history.juakali.juakali.phone.test_20221013151710",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221013151710",
        "description": ".history.juakali.juakali.phone.test_20221013151710",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": ".history.juakali.juakali.phone.test_20221013151710",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": ".history.juakali.juakali.phone.test_20221013151710",
        "description": ".history.juakali.juakali.phone.test_20221013151710",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": ".history.juakali.juakali.phone.test_20221013151710",
        "documentation": {}
    },
    {
        "label": "ussd",
        "kind": 2,
        "importPath": "juakali.phone.hello",
        "description": "juakali.phone.hello",
        "peekOfCode": "def ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON\n      response  = \"CON Hello there welcome to Plan B artisans.Kindly choose your type of user. \\n\"\n      response += \"1. Employer \\n\"",
        "detail": "juakali.phone.hello",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "juakali.phone.hello",
        "description": "juakali.phone.hello",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/ussd\", methods = ['POST'])\ndef ussd():\n  # Read the variables sent via POST from our API\n  session_id   = request.values.get(\"sessionId\", None)\n  serviceCode  = request.values.get(\"serviceCode\", None)\n  phone_number = request.values.get(\"phoneNumber\", None)\n  text         = request.values.get(\"text\", \"default\")\n  if text      == '':\n      # This is the first request. Note how we start the response with CON",
        "detail": "juakali.phone.hello",
        "documentation": {}
    },
    {
        "label": "phoneNumber",
        "kind": 5,
        "importPath": "juakali.phone.main",
        "description": "juakali.phone.main",
        "peekOfCode": "phoneNumber = input(\"Enter your phone number starting with country code:\")\ninphonenumber = phonenumbers.parse(phoneNumber)\n# Getting carrier of a phone number\nCarrier = carrier.name_for_number(inphonenumber, 'en')\n# Getting region information\nRegion = geocoder.description_for_number(inphonenumber, 'en')\n# Printing the carrier and region of a phone number\nprint(Carrier)\nprint(Region)",
        "detail": "juakali.phone.main",
        "documentation": {}
    },
    {
        "label": "inphonenumber",
        "kind": 5,
        "importPath": "juakali.phone.main",
        "description": "juakali.phone.main",
        "peekOfCode": "inphonenumber = phonenumbers.parse(phoneNumber)\n# Getting carrier of a phone number\nCarrier = carrier.name_for_number(inphonenumber, 'en')\n# Getting region information\nRegion = geocoder.description_for_number(inphonenumber, 'en')\n# Printing the carrier and region of a phone number\nprint(Carrier)\nprint(Region)",
        "detail": "juakali.phone.main",
        "documentation": {}
    },
    {
        "label": "Carrier",
        "kind": 5,
        "importPath": "juakali.phone.main",
        "description": "juakali.phone.main",
        "peekOfCode": "Carrier = carrier.name_for_number(inphonenumber, 'en')\n# Getting region information\nRegion = geocoder.description_for_number(inphonenumber, 'en')\n# Printing the carrier and region of a phone number\nprint(Carrier)\nprint(Region)",
        "detail": "juakali.phone.main",
        "documentation": {}
    },
    {
        "label": "Region",
        "kind": 5,
        "importPath": "juakali.phone.main",
        "description": "juakali.phone.main",
        "peekOfCode": "Region = geocoder.description_for_number(inphonenumber, 'en')\n# Printing the carrier and region of a phone number\nprint(Carrier)\nprint(Region)",
        "detail": "juakali.phone.main",
        "documentation": {}
    },
    {
        "label": "getDetail",
        "kind": 2,
        "importPath": "juakali.phone.test",
        "description": "juakali.phone.test",
        "peekOfCode": "def getDetail():\n    print\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")",
        "detail": "juakali.phone.test",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "juakali.phone.test",
        "description": "juakali.phone.test",
        "peekOfCode": "api_key = \"\"\n#variable to store url\nurl = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail():\n    print\n# zoom defines the zoom\n# level of the map",
        "detail": "juakali.phone.test",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "juakali.phone.test",
        "description": "juakali.phone.test",
        "peekOfCode": "url = \"Enter you location.\"\n# center defines the center of the map,\n# equidistant from all edges of the map. \n#function to define the values to be stored\ndef getDetail():\n    print\n# zoom defines the zoom\n# level of the map\nzoom = 10\n# get method of requests module",
        "detail": "juakali.phone.test",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 5,
        "importPath": "juakali.phone.test",
        "description": "juakali.phone.test",
        "peekOfCode": "zoom = 10\n# get method of requests module\n# return response object\nr = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image",
        "detail": "juakali.phone.test",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "juakali.phone.test",
        "description": "juakali.phone.test",
        "peekOfCode": "r = requests.get(url + \"center =\" + center + \"&zoom =\" +\n                   str(zoom) + \"&size = 400x400&key =\" +\n                             api_key + \"sensor = false\")\n# wb mode is stand for write binary mode\nf = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file",
        "detail": "juakali.phone.test",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "juakali.phone.test",
        "description": "juakali.phone.test",
        "peekOfCode": "f = open('address of the file location ', 'wb')\n# r.content gives content,\n# in this case gives image\nf.write(r.content)\n# close method of file object\n# save and close the file\nf.close()",
        "detail": "juakali.phone.test",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.migrations.0001_initial",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='AccessToken',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('token', models.CharField(max_length=30)),",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.migrations.0002_auto_20181108_1219",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.migrations.0002_auto_20181108_1219",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('django_daraja', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='accesstoken',\n            name='created_at',\n            field=models.DateTimeField(auto_now_add=True),\n        ),",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.migrations.0002_auto_20181108_1219",
        "documentation": {}
    },
    {
        "label": "MpesaClient",
        "kind": 6,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "class MpesaClient:\n\t\"\"\"\n\tThis is the core MPESA client. \n\tThe Mpesa Client will access all interactions with the MPESA Daraja API.\n\t\"\"\"\n\tauth_token = ''\n\tdef __init__(self):\n\t\t\"\"\"\n\t\tThe constructor for MpesaClient class\n\t\t\"\"\"",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\tauth_token",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\tauth_token = ''\n\tdef __init__(self):\n\t\t\"\"\"\n\t\tThe constructor for MpesaClient class\n\t\t\"\"\"\n\tdef access_token(self):\n\t\t\"\"\"\n\t\tGenerate an OAuth access token.\n\t\tReturns:\n\t\t\tbool: A string containg a valid OAuth access token",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\tpayload",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\tpayload = json.loads(result)\n\t\tdata = {}\n\t\tcallback = payload['Body']['stkCallback']\n\t\tdata['ResultCode'] = callback['ResultCode']\n\t\tdata['ResultDesc'] = callback['ResultDesc']\n\t\tdata['MerchantRequestID'] = callback['MerchantRequestID']\n\t\tdata['CheckoutRequestID'] = callback['CheckoutRequestID']\n\t\tmetadata = callback.get('CallbackMetadata')\n\t\tif metadata:\n\t\t\tmetadata_items = metadata.get('Item')",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\tdata = {}\n\t\tcallback = payload['Body']['stkCallback']\n\t\tdata['ResultCode'] = callback['ResultCode']\n\t\tdata['ResultDesc'] = callback['ResultDesc']\n\t\tdata['MerchantRequestID'] = callback['MerchantRequestID']\n\t\tdata['CheckoutRequestID'] = callback['CheckoutRequestID']\n\t\tmetadata = callback.get('CallbackMetadata')\n\t\tif metadata:\n\t\t\tmetadata_items = metadata.get('Item')\n\t\t\tfor item in metadata_items:",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\tcallback",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\tcallback = payload['Body']['stkCallback']\n\t\tdata['ResultCode'] = callback['ResultCode']\n\t\tdata['ResultDesc'] = callback['ResultDesc']\n\t\tdata['MerchantRequestID'] = callback['MerchantRequestID']\n\t\tdata['CheckoutRequestID'] = callback['CheckoutRequestID']\n\t\tmetadata = callback.get('CallbackMetadata')\n\t\tif metadata:\n\t\t\tmetadata_items = metadata.get('Item')\n\t\t\tfor item in metadata_items:\n\t\t\t\tdata[item['Name']] = item.get('Value')",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\tdata['ResultCode']",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\tdata['ResultCode'] = callback['ResultCode']\n\t\tdata['ResultDesc'] = callback['ResultDesc']\n\t\tdata['MerchantRequestID'] = callback['MerchantRequestID']\n\t\tdata['CheckoutRequestID'] = callback['CheckoutRequestID']\n\t\tmetadata = callback.get('CallbackMetadata')\n\t\tif metadata:\n\t\t\tmetadata_items = metadata.get('Item')\n\t\t\tfor item in metadata_items:\n\t\t\t\tdata[item['Name']] = item.get('Value')\n\t\treturn data",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\tdata['ResultDesc']",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\tdata['ResultDesc'] = callback['ResultDesc']\n\t\tdata['MerchantRequestID'] = callback['MerchantRequestID']\n\t\tdata['CheckoutRequestID'] = callback['CheckoutRequestID']\n\t\tmetadata = callback.get('CallbackMetadata')\n\t\tif metadata:\n\t\t\tmetadata_items = metadata.get('Item')\n\t\t\tfor item in metadata_items:\n\t\t\t\tdata[item['Name']] = item.get('Value')\n\t\treturn data\n\tdef stk_push(self, phone_number, amount, account_reference, transaction_desc, callback_url):",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\tdata['MerchantRequestID']",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\tdata['MerchantRequestID'] = callback['MerchantRequestID']\n\t\tdata['CheckoutRequestID'] = callback['CheckoutRequestID']\n\t\tmetadata = callback.get('CallbackMetadata')\n\t\tif metadata:\n\t\t\tmetadata_items = metadata.get('Item')\n\t\t\tfor item in metadata_items:\n\t\t\t\tdata[item['Name']] = item.get('Value')\n\t\treturn data\n\tdef stk_push(self, phone_number, amount, account_reference, transaction_desc, callback_url):\n\t\t\"\"\"",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\tdata['CheckoutRequestID']",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\tdata['CheckoutRequestID'] = callback['CheckoutRequestID']\n\t\tmetadata = callback.get('CallbackMetadata')\n\t\tif metadata:\n\t\t\tmetadata_items = metadata.get('Item')\n\t\t\tfor item in metadata_items:\n\t\t\t\tdata[item['Name']] = item.get('Value')\n\t\treturn data\n\tdef stk_push(self, phone_number, amount, account_reference, transaction_desc, callback_url):\n\t\t\"\"\"\n\t\tAttempt to send an STK prompt to customer phone",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\tmetadata",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\tmetadata = callback.get('CallbackMetadata')\n\t\tif metadata:\n\t\t\tmetadata_items = metadata.get('Item')\n\t\t\tfor item in metadata_items:\n\t\t\t\tdata[item['Name']] = item.get('Value')\n\t\treturn data\n\tdef stk_push(self, phone_number, amount, account_reference, transaction_desc, callback_url):\n\t\t\"\"\"\n\t\tAttempt to send an STK prompt to customer phone\n\t\tArgs:",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\t\tmetadata_items",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\t\tmetadata_items = metadata.get('Item')\n\t\t\tfor item in metadata_items:\n\t\t\t\tdata[item['Name']] = item.get('Value')\n\t\treturn data\n\tdef stk_push(self, phone_number, amount, account_reference, transaction_desc, callback_url):\n\t\t\"\"\"\n\t\tAttempt to send an STK prompt to customer phone\n\t\tArgs:\n\t\t\tphone_number (str): -- The Mobile Number to receive the STK Pin Prompt.\n\t\t\tamount (int) -- This is the Amount transacted normaly a numeric value. Money that customer pays to the Shorcode. Only whole numbers are supported.",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tdata[item['Name']]",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\t\t\tdata[item['Name']] = item.get('Value')\n\t\treturn data\n\tdef stk_push(self, phone_number, amount, account_reference, transaction_desc, callback_url):\n\t\t\"\"\"\n\t\tAttempt to send an STK prompt to customer phone\n\t\tArgs:\n\t\t\tphone_number (str): -- The Mobile Number to receive the STK Pin Prompt.\n\t\t\tamount (int) -- This is the Amount transacted normaly a numeric value. Money that customer pays to the Shorcode. Only whole numbers are supported.\n\t\t\taccount_reference (str) -- This is an Alpha-Numeric parameter that is defined by your system as an Identifier of the transaction for CustomerPayBillOnline transaction type. Along with the business name, this value is also displayed to the customer in the STK Pin Prompt message. Maximum of 12 characters.\n\t\t\ttransaction_desc (str) -- This is any additional information/comment that can be sent along with the request from your system. Maximum of 13 Characters.",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\tphone_number",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\tphone_number = format_phone_number(phone_number)\n\t\turl = api_base_url() + 'mpesa/stkpush/v1/processrequest'\n\t\tpasskey = mpesa_config('MPESA_PASSKEY')\n\t\tmpesa_environment = mpesa_config('MPESA_ENVIRONMENT')\n\t\tif mpesa_environment == 'sandbox':\n\t\t\tbusiness_short_code = mpesa_config('MPESA_EXPRESS_SHORTCODE')\n\t\telse:\n\t\t\tbusiness_short_code = mpesa_config('MPESA_SHORTCODE')\n\t\ttimestamp = datetime.now().strftime('%Y%m%d%H%M%S')\n\t\tpassword = base64.b64encode((business_short_code + passkey + timestamp).encode('ascii')).decode('utf-8') ",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\turl",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\turl = api_base_url() + 'mpesa/stkpush/v1/processrequest'\n\t\tpasskey = mpesa_config('MPESA_PASSKEY')\n\t\tmpesa_environment = mpesa_config('MPESA_ENVIRONMENT')\n\t\tif mpesa_environment == 'sandbox':\n\t\t\tbusiness_short_code = mpesa_config('MPESA_EXPRESS_SHORTCODE')\n\t\telse:\n\t\t\tbusiness_short_code = mpesa_config('MPESA_SHORTCODE')\n\t\ttimestamp = datetime.now().strftime('%Y%m%d%H%M%S')\n\t\tpassword = base64.b64encode((business_short_code + passkey + timestamp).encode('ascii')).decode('utf-8') \n\t\ttransaction_type = 'CustomerPayBillOnline'",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\tpasskey",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\tpasskey = mpesa_config('MPESA_PASSKEY')\n\t\tmpesa_environment = mpesa_config('MPESA_ENVIRONMENT')\n\t\tif mpesa_environment == 'sandbox':\n\t\t\tbusiness_short_code = mpesa_config('MPESA_EXPRESS_SHORTCODE')\n\t\telse:\n\t\t\tbusiness_short_code = mpesa_config('MPESA_SHORTCODE')\n\t\ttimestamp = datetime.now().strftime('%Y%m%d%H%M%S')\n\t\tpassword = base64.b64encode((business_short_code + passkey + timestamp).encode('ascii')).decode('utf-8') \n\t\ttransaction_type = 'CustomerPayBillOnline'\n\t\tparty_a = phone_number",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\tmpesa_environment",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\tmpesa_environment = mpesa_config('MPESA_ENVIRONMENT')\n\t\tif mpesa_environment == 'sandbox':\n\t\t\tbusiness_short_code = mpesa_config('MPESA_EXPRESS_SHORTCODE')\n\t\telse:\n\t\t\tbusiness_short_code = mpesa_config('MPESA_SHORTCODE')\n\t\ttimestamp = datetime.now().strftime('%Y%m%d%H%M%S')\n\t\tpassword = base64.b64encode((business_short_code + passkey + timestamp).encode('ascii')).decode('utf-8') \n\t\ttransaction_type = 'CustomerPayBillOnline'\n\t\tparty_a = phone_number\n\t\tparty_b = business_short_code",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\t\tbusiness_short_code",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\t\tbusiness_short_code = mpesa_config('MPESA_EXPRESS_SHORTCODE')\n\t\telse:\n\t\t\tbusiness_short_code = mpesa_config('MPESA_SHORTCODE')\n\t\ttimestamp = datetime.now().strftime('%Y%m%d%H%M%S')\n\t\tpassword = base64.b64encode((business_short_code + passkey + timestamp).encode('ascii')).decode('utf-8') \n\t\ttransaction_type = 'CustomerPayBillOnline'\n\t\tparty_a = phone_number\n\t\tparty_b = business_short_code\n\t\tdata = {\n\t\t\t'BusinessShortCode': business_short_code,",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\t\tbusiness_short_code",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\t\tbusiness_short_code = mpesa_config('MPESA_SHORTCODE')\n\t\ttimestamp = datetime.now().strftime('%Y%m%d%H%M%S')\n\t\tpassword = base64.b64encode((business_short_code + passkey + timestamp).encode('ascii')).decode('utf-8') \n\t\ttransaction_type = 'CustomerPayBillOnline'\n\t\tparty_a = phone_number\n\t\tparty_b = business_short_code\n\t\tdata = {\n\t\t\t'BusinessShortCode': business_short_code,\n\t\t\t'Password': password,\n\t\t\t'Timestamp': timestamp,",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\ttimestamp",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\ttimestamp = datetime.now().strftime('%Y%m%d%H%M%S')\n\t\tpassword = base64.b64encode((business_short_code + passkey + timestamp).encode('ascii')).decode('utf-8') \n\t\ttransaction_type = 'CustomerPayBillOnline'\n\t\tparty_a = phone_number\n\t\tparty_b = business_short_code\n\t\tdata = {\n\t\t\t'BusinessShortCode': business_short_code,\n\t\t\t'Password': password,\n\t\t\t'Timestamp': timestamp,\n\t\t\t'TransactionType': transaction_type,",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\tpassword",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\tpassword = base64.b64encode((business_short_code + passkey + timestamp).encode('ascii')).decode('utf-8') \n\t\ttransaction_type = 'CustomerPayBillOnline'\n\t\tparty_a = phone_number\n\t\tparty_b = business_short_code\n\t\tdata = {\n\t\t\t'BusinessShortCode': business_short_code,\n\t\t\t'Password': password,\n\t\t\t'Timestamp': timestamp,\n\t\t\t'TransactionType': transaction_type,\n\t\t\t'Amount': amount,",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\ttransaction_type",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\ttransaction_type = 'CustomerPayBillOnline'\n\t\tparty_a = phone_number\n\t\tparty_b = business_short_code\n\t\tdata = {\n\t\t\t'BusinessShortCode': business_short_code,\n\t\t\t'Password': password,\n\t\t\t'Timestamp': timestamp,\n\t\t\t'TransactionType': transaction_type,\n\t\t\t'Amount': amount,\n\t\t\t'PartyA': party_a,",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\tparty_a",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\tparty_a = phone_number\n\t\tparty_b = business_short_code\n\t\tdata = {\n\t\t\t'BusinessShortCode': business_short_code,\n\t\t\t'Password': password,\n\t\t\t'Timestamp': timestamp,\n\t\t\t'TransactionType': transaction_type,\n\t\t\t'Amount': amount,\n\t\t\t'PartyA': party_a,\n\t\t\t'PartyB': party_b,",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\tparty_b",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\tparty_b = business_short_code\n\t\tdata = {\n\t\t\t'BusinessShortCode': business_short_code,\n\t\t\t'Password': password,\n\t\t\t'Timestamp': timestamp,\n\t\t\t'TransactionType': transaction_type,\n\t\t\t'Amount': amount,\n\t\t\t'PartyA': party_a,\n\t\t\t'PartyB': party_b,\n\t\t\t'PhoneNumber': phone_number,",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\tdata = {\n\t\t\t'BusinessShortCode': business_short_code,\n\t\t\t'Password': password,\n\t\t\t'Timestamp': timestamp,\n\t\t\t'TransactionType': transaction_type,\n\t\t\t'Amount': amount,\n\t\t\t'PartyA': party_a,\n\t\t\t'PartyB': party_b,\n\t\t\t'PhoneNumber': phone_number,\n\t\t\t'CallBackURL': callback_url,",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\theaders",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\theaders = {\n\t\t\t'Authorization': 'Bearer ' + mpesa_access_token(),\n\t\t\t'Content-type': 'application/json'\n\t\t}\n\t\ttry:\n\t\t\tr = requests.post(url, json=data, headers=headers)\n\t\t\tresponse = mpesa_response(r)\n\t\t\treturn response\n\t\texcept requests.exceptions.ConnectionError:\n\t\t\traise MpesaConnectionError('Connection failed')",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\t\tr",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\t\tr = requests.post(url, json=data, headers=headers)\n\t\t\tresponse = mpesa_response(r)\n\t\t\treturn response\n\t\texcept requests.exceptions.ConnectionError:\n\t\t\traise MpesaConnectionError('Connection failed')\n\t\texcept Exception as ex:\n\t\t\traise MpesaConnectionError(str(ex))\n\tdef b2c_payment(self, phone_number, amount, transaction_desc, callback_url, occassion, command_id):\n\t\t\"\"\"\n\t\tAttempt to perform a business payment transaction",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\t\tresponse = mpesa_response(r)\n\t\t\treturn response\n\t\texcept requests.exceptions.ConnectionError:\n\t\t\traise MpesaConnectionError('Connection failed')\n\t\texcept Exception as ex:\n\t\t\traise MpesaConnectionError(str(ex))\n\tdef b2c_payment(self, phone_number, amount, transaction_desc, callback_url, occassion, command_id):\n\t\t\"\"\"\n\t\tAttempt to perform a business payment transaction\n\t\tArgs:",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\tphone_number",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\tphone_number = format_phone_number(phone_number)\n\t\turl = api_base_url() + 'mpesa/b2c/v1/paymentrequest'\n\t\tbusiness_short_code = mpesa_config('MPESA_SHORTCODE')\n\t\tparty_a = business_short_code\n\t\tparty_b = phone_number\n\t\tinitiator_username = mpesa_config('MPESA_INITIATOR_USERNAME')\n\t\tinitiator_security_credential = encrypt_security_credential(mpesa_config('MPESA_INITIATOR_SECURITY_CREDENTIAL'))\n\t\tdata = {\n\t\t\t'InitiatorName': initiator_username,\n\t\t\t'SecurityCredential': initiator_security_credential,",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\turl",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\turl = api_base_url() + 'mpesa/b2c/v1/paymentrequest'\n\t\tbusiness_short_code = mpesa_config('MPESA_SHORTCODE')\n\t\tparty_a = business_short_code\n\t\tparty_b = phone_number\n\t\tinitiator_username = mpesa_config('MPESA_INITIATOR_USERNAME')\n\t\tinitiator_security_credential = encrypt_security_credential(mpesa_config('MPESA_INITIATOR_SECURITY_CREDENTIAL'))\n\t\tdata = {\n\t\t\t'InitiatorName': initiator_username,\n\t\t\t'SecurityCredential': initiator_security_credential,\n\t\t\t'CommandID': command_id,",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\tbusiness_short_code",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\tbusiness_short_code = mpesa_config('MPESA_SHORTCODE')\n\t\tparty_a = business_short_code\n\t\tparty_b = phone_number\n\t\tinitiator_username = mpesa_config('MPESA_INITIATOR_USERNAME')\n\t\tinitiator_security_credential = encrypt_security_credential(mpesa_config('MPESA_INITIATOR_SECURITY_CREDENTIAL'))\n\t\tdata = {\n\t\t\t'InitiatorName': initiator_username,\n\t\t\t'SecurityCredential': initiator_security_credential,\n\t\t\t'CommandID': command_id,\n\t\t\t'Amount': amount,",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\tparty_a",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\tparty_a = business_short_code\n\t\tparty_b = phone_number\n\t\tinitiator_username = mpesa_config('MPESA_INITIATOR_USERNAME')\n\t\tinitiator_security_credential = encrypt_security_credential(mpesa_config('MPESA_INITIATOR_SECURITY_CREDENTIAL'))\n\t\tdata = {\n\t\t\t'InitiatorName': initiator_username,\n\t\t\t'SecurityCredential': initiator_security_credential,\n\t\t\t'CommandID': command_id,\n\t\t\t'Amount': amount,\n\t\t\t'PartyA': party_a,",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\tparty_b",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\tparty_b = phone_number\n\t\tinitiator_username = mpesa_config('MPESA_INITIATOR_USERNAME')\n\t\tinitiator_security_credential = encrypt_security_credential(mpesa_config('MPESA_INITIATOR_SECURITY_CREDENTIAL'))\n\t\tdata = {\n\t\t\t'InitiatorName': initiator_username,\n\t\t\t'SecurityCredential': initiator_security_credential,\n\t\t\t'CommandID': command_id,\n\t\t\t'Amount': amount,\n\t\t\t'PartyA': party_a,\n\t\t\t'PartyB': party_b,",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\tinitiator_username",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\tinitiator_username = mpesa_config('MPESA_INITIATOR_USERNAME')\n\t\tinitiator_security_credential = encrypt_security_credential(mpesa_config('MPESA_INITIATOR_SECURITY_CREDENTIAL'))\n\t\tdata = {\n\t\t\t'InitiatorName': initiator_username,\n\t\t\t'SecurityCredential': initiator_security_credential,\n\t\t\t'CommandID': command_id,\n\t\t\t'Amount': amount,\n\t\t\t'PartyA': party_a,\n\t\t\t'PartyB': party_b,\n\t\t\t'Remarks': transaction_desc,",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\tinitiator_security_credential",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\tinitiator_security_credential = encrypt_security_credential(mpesa_config('MPESA_INITIATOR_SECURITY_CREDENTIAL'))\n\t\tdata = {\n\t\t\t'InitiatorName': initiator_username,\n\t\t\t'SecurityCredential': initiator_security_credential,\n\t\t\t'CommandID': command_id,\n\t\t\t'Amount': amount,\n\t\t\t'PartyA': party_a,\n\t\t\t'PartyB': party_b,\n\t\t\t'Remarks': transaction_desc,\n\t\t\t'QueueTimeOutURL': callback_url,",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\tdata = {\n\t\t\t'InitiatorName': initiator_username,\n\t\t\t'SecurityCredential': initiator_security_credential,\n\t\t\t'CommandID': command_id,\n\t\t\t'Amount': amount,\n\t\t\t'PartyA': party_a,\n\t\t\t'PartyB': party_b,\n\t\t\t'Remarks': transaction_desc,\n\t\t\t'QueueTimeOutURL': callback_url,\n\t\t\t'ResultURL': callback_url,",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\theaders",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\theaders = {\n\t\t\t'Authorization': 'Bearer ' + mpesa_access_token(),\n\t\t\t'Content-type': 'application/json'\n\t\t}\n\t\ttry:\n\t\t\tr = requests.post(url, json=data, headers=headers)\n\t\t\tresponse = mpesa_response(r)\n\t\t\treturn response\n\t\texcept requests.exceptions.ConnectionError:\n\t\t\traise MpesaConnectionError('Connection failed')",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\t\tr",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\t\tr = requests.post(url, json=data, headers=headers)\n\t\t\tresponse = mpesa_response(r)\n\t\t\treturn response\n\t\texcept requests.exceptions.ConnectionError:\n\t\t\traise MpesaConnectionError('Connection failed')\n\t\texcept Exception as ex:\n\t\t\traise MpesaConnectionError(str(ex))\n\tdef business_payment (self, phone_number, amount, transaction_desc, callback_url, occassion):\n\t\tcommand_id = 'BusinessPayment'\n\t\treturn self.b2c_payment(phone_number, amount, transaction_desc, callback_url, occassion, command_id)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\t\tresponse",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\t\tresponse = mpesa_response(r)\n\t\t\treturn response\n\t\texcept requests.exceptions.ConnectionError:\n\t\t\traise MpesaConnectionError('Connection failed')\n\t\texcept Exception as ex:\n\t\t\traise MpesaConnectionError(str(ex))\n\tdef business_payment (self, phone_number, amount, transaction_desc, callback_url, occassion):\n\t\tcommand_id = 'BusinessPayment'\n\t\treturn self.b2c_payment(phone_number, amount, transaction_desc, callback_url, occassion, command_id)\n\tdef salary_payment (self, phone_number, amount, transaction_desc, callback_url, occassion):",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\tcommand_id",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\tcommand_id = 'BusinessPayment'\n\t\treturn self.b2c_payment(phone_number, amount, transaction_desc, callback_url, occassion, command_id)\n\tdef salary_payment (self, phone_number, amount, transaction_desc, callback_url, occassion):\n\t\tcommand_id = 'SalaryPayment'\n\t\treturn self.b2c_payment(phone_number, amount, transaction_desc, callback_url, occassion, command_id)\n\tdef promotion_payment (self, phone_number, amount, transaction_desc, callback_url, occassion):\n\t\tcommand_id = 'PromotionPayment'\n\t\treturn self.b2c_payment(phone_number, amount, transaction_desc, callback_url, occassion, command_id)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\tcommand_id",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\tcommand_id = 'SalaryPayment'\n\t\treturn self.b2c_payment(phone_number, amount, transaction_desc, callback_url, occassion, command_id)\n\tdef promotion_payment (self, phone_number, amount, transaction_desc, callback_url, occassion):\n\t\tcommand_id = 'PromotionPayment'\n\t\treturn self.b2c_payment(phone_number, amount, transaction_desc, callback_url, occassion, command_id)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "\t\tcommand_id",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "peekOfCode": "\t\tcommand_id = 'PromotionPayment'\n\t\treturn self.b2c_payment(phone_number, amount, transaction_desc, callback_url, occassion, command_id)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.core",
        "documentation": {}
    },
    {
        "label": "MpesaError",
        "kind": 6,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.exceptions",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.exceptions",
        "peekOfCode": "class MpesaError(Exception):\n\t\"\"\"\n\tRaised for a general error regarding the library\n\t\"\"\"\nclass IllegalPhoneNumberException(Exception):\n\t\"\"\"\n\tRaised when phone number is in illegal format.\n\t\"\"\"\n\tpass\nclass MpesaConnectionError(Exception):",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.exceptions",
        "documentation": {}
    },
    {
        "label": "IllegalPhoneNumberException",
        "kind": 6,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.exceptions",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.exceptions",
        "peekOfCode": "class IllegalPhoneNumberException(Exception):\n\t\"\"\"\n\tRaised when phone number is in illegal format.\n\t\"\"\"\n\tpass\nclass MpesaConnectionError(Exception):\n\t\"\"\"\n\tRaised when connection has an error\n\t\"\"\"\n\tpass",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.exceptions",
        "documentation": {}
    },
    {
        "label": "MpesaConnectionError",
        "kind": 6,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.exceptions",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.exceptions",
        "peekOfCode": "class MpesaConnectionError(Exception):\n\t\"\"\"\n\tRaised when connection has an error\n\t\"\"\"\n\tpass\nclass MpesaConfigurationException(Exception):\n\t\"\"\"\n\tRaised when Mpesa environment variables are not configured properly\n\t\"\"\"\n\tpass",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.exceptions",
        "documentation": {}
    },
    {
        "label": "MpesaConfigurationException",
        "kind": 6,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.exceptions",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.exceptions",
        "peekOfCode": "class MpesaConfigurationException(Exception):\n\t\"\"\"\n\tRaised when Mpesa environment variables are not configured properly\n\t\"\"\"\n\tpass\nclass MpesaInvalidParameterException(Exception):\n\t\"\"\"\n\tRaised when an an invalid parameter is passed in a function call\n\tExtends:\n\t\tException: Exception",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.exceptions",
        "documentation": {}
    },
    {
        "label": "MpesaInvalidParameterException",
        "kind": 6,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.exceptions",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.exceptions",
        "peekOfCode": "class MpesaInvalidParameterException(Exception):\n\t\"\"\"\n\tRaised when an an invalid parameter is passed in a function call\n\tExtends:\n\t\tException: Exception\n\t\"\"\"\n\tpass",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.exceptions",
        "documentation": {}
    },
    {
        "label": "MpesaResponse",
        "kind": 6,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "class MpesaResponse(Response):\n\tresponse_description = \"\"\n\terror_code = None\n\terror_message = ''\ndef mpesa_response(r):\n\t\"\"\"\n\tCreate MpesaResponse object from requests.Response object\n\tArguments:\n\t\tr (requests.Response) -- The response to convert\n\t\"\"\"",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "mpesa_response",
        "kind": 2,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "def mpesa_response(r):\n\t\"\"\"\n\tCreate MpesaResponse object from requests.Response object\n\tArguments:\n\t\tr (requests.Response) -- The response to convert\n\t\"\"\"\n\tr.__class__ = MpesaResponse\n\tjson_response = r.json()\n\tr.response_description = json_response.get('ResponseDescription', '')\n\tr.error_code = json_response.get('errorCode')",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "mpesa_config",
        "kind": 2,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "def mpesa_config(key):\n\t\"\"\"\n\tGet Mpesa configuration variable with the matching key\n\tArguments:\n\t\tkey (str) -- The configuration key\n\tReturns:\n\t\tstr: Mpesa configuration variable with the matching key\n\tRaises:\n\t\tMpesaConfigurationException: Key not found\n\t\"\"\"",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "api_base_url",
        "kind": 2,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "def api_base_url():\n\t\"\"\"\n\tGets the base URL for making API calls\n\tReturns:\n\t\tThe base URL depending on development environment (sandbox or production)\n\tRaises:\n\t\tMpesaConfigurationException: Environment not sandbox or production\n\t\"\"\"\n\tmpesa_environment = mpesa_config('MPESA_ENVIRONMENT')\n\tif mpesa_environment == 'development':",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "generate_access_token_request",
        "kind": 2,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "def generate_access_token_request(consumer_key = None, consumer_secret = None):\n\t\"\"\"\n\tMake a call to OAuth API to generate access token\n\tArguments:\n\t\tconsumer_key (str) -- (Optional) The Consumer Key to use\n\t\tconsumer_secret (str) -- (Optional) The Consumer Secret to use\n\tReturns:\n\t\trequests.Response: Response object with the response details\n\tRaises:\n\t\tMpesaConnectionError: Connection error",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "generate_access_token",
        "kind": 2,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "def generate_access_token():\n\t\"\"\"\n\tParse generated OAuth access token, then updates database access token value\n\tReturns:\n\t\tAccessToken: The AccessToken object from the database\n\tRaises:\n\t\tMpesaError: Error generating access token\n\t\"\"\"\n\tr = generate_access_token_request()\n\tif r.status_code != 200:",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "mpesa_access_token",
        "kind": 2,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "def mpesa_access_token():\n\t\"\"\"\n\tGenerate access token if the current one has expired or if token is non-existent\n\tOtherwise return existing access token\n\tReturns:\n\t\tstr: A valid access token\n\t\"\"\"\n\taccess_token = AccessToken.objects.first()\n\tif access_token == None:\n\t\t# No access token found",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "format_phone_number",
        "kind": 2,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "def format_phone_number(phone_number):\n\t\"\"\"\n\tFormat phone number into the format 2547XXXXXXXX\n\tArguments:\n\t\tphone_number (str) -- The phone number to format\n\t\"\"\"\n\tif len(phone_number) < 9:\n\t\traise IllegalPhoneNumberException('Phone number too short')\n\telse:\n\t\treturn '254' + phone_number[-9:]",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "encrypt_security_credential",
        "kind": 2,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "def encrypt_security_credential(credential):\n\t\"\"\"\n\tGenerate an encrypted security credential from a plaintext value\n\tArguments:\n\t\tcredential (str) -- The plaintext credential display\n\t\"\"\"\n\tmpesa_environment = mpesa_config('MPESA_ENVIRONMENT')\n\tif mpesa_environment in ('development', 'sandbox', 'production'):\n\t\tcertificate_name = mpesa_environment + '.cer'\n\telse:",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "encrypt_rsa",
        "kind": 2,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "def encrypt_rsa(certificate_path, input):\n\tmessage = input.encode('ascii')\n\twith open(certificate_path, \"rb\") as cert_file:\n\t\tcert = x509.load_pem_x509_certificate(cert_file.read())\n\t\tencrypted = cert.public_key().encrypt(message, PKCS1v15())\n\t\toutput = base64.b64encode(encrypted).decode('ascii')\n\treturn output",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "\tresponse_description",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "\tresponse_description = \"\"\n\terror_code = None\n\terror_message = ''\ndef mpesa_response(r):\n\t\"\"\"\n\tCreate MpesaResponse object from requests.Response object\n\tArguments:\n\t\tr (requests.Response) -- The response to convert\n\t\"\"\"\n\tr.__class__ = MpesaResponse",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "\terror_code",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "\terror_code = None\n\terror_message = ''\ndef mpesa_response(r):\n\t\"\"\"\n\tCreate MpesaResponse object from requests.Response object\n\tArguments:\n\t\tr (requests.Response) -- The response to convert\n\t\"\"\"\n\tr.__class__ = MpesaResponse\n\tjson_response = r.json()",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "\terror_message",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "\terror_message = ''\ndef mpesa_response(r):\n\t\"\"\"\n\tCreate MpesaResponse object from requests.Response object\n\tArguments:\n\t\tr (requests.Response) -- The response to convert\n\t\"\"\"\n\tr.__class__ = MpesaResponse\n\tjson_response = r.json()\n\tr.response_description = json_response.get('ResponseDescription', '')",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "\tr.__class__",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "\tr.__class__ = MpesaResponse\n\tjson_response = r.json()\n\tr.response_description = json_response.get('ResponseDescription', '')\n\tr.error_code = json_response.get('errorCode')\n\tr.error_message = json_response.get('errorMessage', '')\n\treturn r\ndef mpesa_config(key):\n\t\"\"\"\n\tGet Mpesa configuration variable with the matching key\n\tArguments:",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "\tjson_response",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "\tjson_response = r.json()\n\tr.response_description = json_response.get('ResponseDescription', '')\n\tr.error_code = json_response.get('errorCode')\n\tr.error_message = json_response.get('errorMessage', '')\n\treturn r\ndef mpesa_config(key):\n\t\"\"\"\n\tGet Mpesa configuration variable with the matching key\n\tArguments:\n\t\tkey (str) -- The configuration key",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "\tr.response_description",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "\tr.response_description = json_response.get('ResponseDescription', '')\n\tr.error_code = json_response.get('errorCode')\n\tr.error_message = json_response.get('errorMessage', '')\n\treturn r\ndef mpesa_config(key):\n\t\"\"\"\n\tGet Mpesa configuration variable with the matching key\n\tArguments:\n\t\tkey (str) -- The configuration key\n\tReturns:",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "\tr.error_code",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "\tr.error_code = json_response.get('errorCode')\n\tr.error_message = json_response.get('errorMessage', '')\n\treturn r\ndef mpesa_config(key):\n\t\"\"\"\n\tGet Mpesa configuration variable with the matching key\n\tArguments:\n\t\tkey (str) -- The configuration key\n\tReturns:\n\t\tstr: Mpesa configuration variable with the matching key",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "\tr.error_message",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "\tr.error_message = json_response.get('errorMessage', '')\n\treturn r\ndef mpesa_config(key):\n\t\"\"\"\n\tGet Mpesa configuration variable with the matching key\n\tArguments:\n\t\tkey (str) -- The configuration key\n\tReturns:\n\t\tstr: Mpesa configuration variable with the matching key\n\tRaises:",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "\tvalue",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "\tvalue = getattr(settings, key, None)\n\tif value is None:\n\t\ttry:\n\t\t\tvalue = config(key)\n\t\texcept UndefinedValueError:\n\t\t\t# Check key in settings file\n\t\t\traise MpesaConfigurationException('Mpesa environment not configured properly - ' + key + ' not found')\n\treturn value\ndef api_base_url():\n\t\"\"\"",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "\t\t\tvalue",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "\t\t\tvalue = config(key)\n\t\texcept UndefinedValueError:\n\t\t\t# Check key in settings file\n\t\t\traise MpesaConfigurationException('Mpesa environment not configured properly - ' + key + ' not found')\n\treturn value\ndef api_base_url():\n\t\"\"\"\n\tGets the base URL for making API calls\n\tReturns:\n\t\tThe base URL depending on development environment (sandbox or production)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "\tmpesa_environment",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "\tmpesa_environment = mpesa_config('MPESA_ENVIRONMENT')\n\tif mpesa_environment == 'development':\n\t\treturn 'https://darajasimulator.azurewebsites.net/'\n\telif mpesa_environment == 'sandbox':\n\t\treturn 'https://sandbox.safaricom.co.ke/'\n\telif mpesa_environment == 'production':\n\t\treturn 'https://api.safaricom.co.ke/'\n\telse:\n\t\traise MpesaConfigurationException('Mpesa environment not configured properly - MPESA_ENVIRONMENT should be sandbox or production')\ndef generate_access_token_request(consumer_key = None, consumer_secret = None):",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "\turl",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "\turl = api_base_url() + 'oauth/v1/generate?grant_type=client_credentials'\n\tconsumer_key = consumer_key if consumer_key is not None else mpesa_config('MPESA_CONSUMER_KEY') \n\tconsumer_secret = consumer_secret if consumer_secret is not None else mpesa_config('MPESA_CONSUMER_SECRET')\n\ttry:\n\t\tr = requests.get(url, auth=(consumer_key, consumer_secret))\n\texcept requests.exceptions.ConnectionError:\n\t\traise MpesaConnectionError('Connection failed')\n\texcept Exception as ex:\n\t\treturn ex.message\n\treturn r",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "\tconsumer_key",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "\tconsumer_key = consumer_key if consumer_key is not None else mpesa_config('MPESA_CONSUMER_KEY') \n\tconsumer_secret = consumer_secret if consumer_secret is not None else mpesa_config('MPESA_CONSUMER_SECRET')\n\ttry:\n\t\tr = requests.get(url, auth=(consumer_key, consumer_secret))\n\texcept requests.exceptions.ConnectionError:\n\t\traise MpesaConnectionError('Connection failed')\n\texcept Exception as ex:\n\t\treturn ex.message\n\treturn r\ndef generate_access_token():",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "\tconsumer_secret",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "\tconsumer_secret = consumer_secret if consumer_secret is not None else mpesa_config('MPESA_CONSUMER_SECRET')\n\ttry:\n\t\tr = requests.get(url, auth=(consumer_key, consumer_secret))\n\texcept requests.exceptions.ConnectionError:\n\t\traise MpesaConnectionError('Connection failed')\n\texcept Exception as ex:\n\t\treturn ex.message\n\treturn r\ndef generate_access_token():\n\t\"\"\"",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "\t\tr",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "\t\tr = requests.get(url, auth=(consumer_key, consumer_secret))\n\texcept requests.exceptions.ConnectionError:\n\t\traise MpesaConnectionError('Connection failed')\n\texcept Exception as ex:\n\t\treturn ex.message\n\treturn r\ndef generate_access_token():\n\t\"\"\"\n\tParse generated OAuth access token, then updates database access token value\n\tReturns:",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "\tr",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "\tr = generate_access_token_request()\n\tif r.status_code != 200:\n\t\t# Retry to generate access token\n\t\tr = generate_access_token_request()\n\t\tif r.status_code != 200:\n\t\t\traise MpesaError('Unable to generate access token')\n\ttoken = r.json()['access_token']\n\tAccessToken.objects.all().delete()\n\taccess_token = AccessToken.objects.create(token=token)\n\treturn access_token",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "\t\tr",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "\t\tr = generate_access_token_request()\n\t\tif r.status_code != 200:\n\t\t\traise MpesaError('Unable to generate access token')\n\ttoken = r.json()['access_token']\n\tAccessToken.objects.all().delete()\n\taccess_token = AccessToken.objects.create(token=token)\n\treturn access_token\ndef mpesa_access_token():\n\t\"\"\"\n\tGenerate access token if the current one has expired or if token is non-existent",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "\ttoken",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "\ttoken = r.json()['access_token']\n\tAccessToken.objects.all().delete()\n\taccess_token = AccessToken.objects.create(token=token)\n\treturn access_token\ndef mpesa_access_token():\n\t\"\"\"\n\tGenerate access token if the current one has expired or if token is non-existent\n\tOtherwise return existing access token\n\tReturns:\n\t\tstr: A valid access token",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "\taccess_token",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "\taccess_token = AccessToken.objects.create(token=token)\n\treturn access_token\ndef mpesa_access_token():\n\t\"\"\"\n\tGenerate access token if the current one has expired or if token is non-existent\n\tOtherwise return existing access token\n\tReturns:\n\t\tstr: A valid access token\n\t\"\"\"\n\taccess_token = AccessToken.objects.first()",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "\taccess_token",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "\taccess_token = AccessToken.objects.first()\n\tif access_token == None:\n\t\t# No access token found\n\t\taccess_token = generate_access_token()\n\telse:\n\t\tdelta = timezone.now() - access_token.created_at\n\t\tminutes = (delta.total_seconds()//60)%60\n\t\tprint('minutes: ', minutes)\n\t\tif minutes > 50:\n\t\t\t# Access token expired",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "\t\taccess_token",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "\t\taccess_token = generate_access_token()\n\telse:\n\t\tdelta = timezone.now() - access_token.created_at\n\t\tminutes = (delta.total_seconds()//60)%60\n\t\tprint('minutes: ', minutes)\n\t\tif minutes > 50:\n\t\t\t# Access token expired\n\t\t\taccess_token = generate_access_token()\t\n\treturn access_token.token\ndef format_phone_number(phone_number):",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "\t\tdelta",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "\t\tdelta = timezone.now() - access_token.created_at\n\t\tminutes = (delta.total_seconds()//60)%60\n\t\tprint('minutes: ', minutes)\n\t\tif minutes > 50:\n\t\t\t# Access token expired\n\t\t\taccess_token = generate_access_token()\t\n\treturn access_token.token\ndef format_phone_number(phone_number):\n\t\"\"\"\n\tFormat phone number into the format 2547XXXXXXXX",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "\t\tminutes",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "\t\tminutes = (delta.total_seconds()//60)%60\n\t\tprint('minutes: ', minutes)\n\t\tif minutes > 50:\n\t\t\t# Access token expired\n\t\t\taccess_token = generate_access_token()\t\n\treturn access_token.token\ndef format_phone_number(phone_number):\n\t\"\"\"\n\tFormat phone number into the format 2547XXXXXXXX\n\tArguments:",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "\t\t\taccess_token",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "\t\t\taccess_token = generate_access_token()\t\n\treturn access_token.token\ndef format_phone_number(phone_number):\n\t\"\"\"\n\tFormat phone number into the format 2547XXXXXXXX\n\tArguments:\n\t\tphone_number (str) -- The phone number to format\n\t\"\"\"\n\tif len(phone_number) < 9:\n\t\traise IllegalPhoneNumberException('Phone number too short')",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "\tmpesa_environment",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "\tmpesa_environment = mpesa_config('MPESA_ENVIRONMENT')\n\tif mpesa_environment in ('development', 'sandbox', 'production'):\n\t\tcertificate_name = mpesa_environment + '.cer'\n\telse:\n\t\traise MpesaConfigurationException('Mpesa environment not configured properly - MPESA_ENVIRONMENT should be sandbox or production')\n\tcertificate_path = os.path.join(settings.BASE_DIR, 'certs', certificate_name)\n\treturn encrypt_rsa(certificate_path, credential)\ndef encrypt_rsa(certificate_path, input):\n\tmessage = input.encode('ascii')\n\twith open(certificate_path, \"rb\") as cert_file:",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "\t\tcertificate_name",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "\t\tcertificate_name = mpesa_environment + '.cer'\n\telse:\n\t\traise MpesaConfigurationException('Mpesa environment not configured properly - MPESA_ENVIRONMENT should be sandbox or production')\n\tcertificate_path = os.path.join(settings.BASE_DIR, 'certs', certificate_name)\n\treturn encrypt_rsa(certificate_path, credential)\ndef encrypt_rsa(certificate_path, input):\n\tmessage = input.encode('ascii')\n\twith open(certificate_path, \"rb\") as cert_file:\n\t\tcert = x509.load_pem_x509_certificate(cert_file.read())\n\t\tencrypted = cert.public_key().encrypt(message, PKCS1v15())",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "\tcertificate_path",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "\tcertificate_path = os.path.join(settings.BASE_DIR, 'certs', certificate_name)\n\treturn encrypt_rsa(certificate_path, credential)\ndef encrypt_rsa(certificate_path, input):\n\tmessage = input.encode('ascii')\n\twith open(certificate_path, \"rb\") as cert_file:\n\t\tcert = x509.load_pem_x509_certificate(cert_file.read())\n\t\tencrypted = cert.public_key().encrypt(message, PKCS1v15())\n\t\toutput = base64.b64encode(encrypted).decode('ascii')\n\treturn output",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "\tmessage",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "\tmessage = input.encode('ascii')\n\twith open(certificate_path, \"rb\") as cert_file:\n\t\tcert = x509.load_pem_x509_certificate(cert_file.read())\n\t\tencrypted = cert.public_key().encrypt(message, PKCS1v15())\n\t\toutput = base64.b64encode(encrypted).decode('ascii')\n\treturn output",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "\t\tcert",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "\t\tcert = x509.load_pem_x509_certificate(cert_file.read())\n\t\tencrypted = cert.public_key().encrypt(message, PKCS1v15())\n\t\toutput = base64.b64encode(encrypted).decode('ascii')\n\treturn output",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "\t\tencrypted",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "\t\tencrypted = cert.public_key().encrypt(message, PKCS1v15())\n\t\toutput = base64.b64encode(encrypted).decode('ascii')\n\treturn output",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "\t\toutput",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "peekOfCode": "\t\toutput = base64.b64encode(encrypted).decode('ascii')\n\treturn output",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.mpesa.utils",
        "documentation": {}
    },
    {
        "label": "DjangoDarajaConfig",
        "kind": 6,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.apps",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.apps",
        "peekOfCode": "class DjangoDarajaConfig(AppConfig):\n    name = 'django_daraja'",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.apps",
        "documentation": {}
    },
    {
        "label": "AccessToken",
        "kind": 6,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.models",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.models",
        "peekOfCode": "class AccessToken(models.Model):\n\ttoken = models.CharField(max_length=30)\n\tcreated_at = models.DateTimeField(auto_now_add=True)\n\tclass Meta:\n\t\tget_latest_by = 'created_at'\n\tdef __str__(self):\n\t\treturn self.token",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.models",
        "documentation": {}
    },
    {
        "label": "\ttoken",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.models",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.models",
        "peekOfCode": "\ttoken = models.CharField(max_length=30)\n\tcreated_at = models.DateTimeField(auto_now_add=True)\n\tclass Meta:\n\t\tget_latest_by = 'created_at'\n\tdef __str__(self):\n\t\treturn self.token",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.models",
        "documentation": {}
    },
    {
        "label": "\tcreated_at",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.models",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.models",
        "peekOfCode": "\tcreated_at = models.DateTimeField(auto_now_add=True)\n\tclass Meta:\n\t\tget_latest_by = 'created_at'\n\tdef __str__(self):\n\t\treturn self.token",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.models",
        "documentation": {}
    },
    {
        "label": "\t\tget_latest_by",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.models",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.models",
        "peekOfCode": "\t\tget_latest_by = 'created_at'\n\tdef __str__(self):\n\t\treturn self.token",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.models",
        "documentation": {}
    },
    {
        "label": "test_patterns",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.urls",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.urls",
        "peekOfCode": "test_patterns = [\n\turl(r'^$', views.index, name='django_daraja_index'),\n\turl(r'^oauth/success', views.oauth_success, name='test_oauth_success'),\n\turl(r'^stk-push/success', views.stk_push_success, name='test_stk_push_success'),\n\turl(r'^business-payment/success', views.business_payment_success, name='test_business_payment_success'),\n\turl(r'^salary-payment/success', views.salary_payment_success, name='test_salary_payment_success'),\n\turl(r'^promotion-payment/success', views.promotion_payment_success, name='test_promotion_payment_success'),\n]\nurlpatterns = [\n\turl(r'^$', views.index, name='index'),",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.urls",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.urls",
        "peekOfCode": "urlpatterns = [\n\turl(r'^$', views.index, name='index'),\n\turl(r'^tests/', include(test_patterns)),\n]",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.urls",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "peekOfCode": "def index(request):\n\treturn HttpResponse('Welcome to the home of daraja APIs')\ndef oauth_success(request):\n\tr = cl.access_token()\n\treturn JsonResponse(r, safe=False)\ndef stk_push_success(request):\n\tphone_number = config('LNM_PHONE_NUMBER')\n\tamount = 1\n\taccount_reference = 'ABC001'\n\ttransaction_desc = 'STK Push Description'",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "documentation": {}
    },
    {
        "label": "oauth_success",
        "kind": 2,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "peekOfCode": "def oauth_success(request):\n\tr = cl.access_token()\n\treturn JsonResponse(r, safe=False)\ndef stk_push_success(request):\n\tphone_number = config('LNM_PHONE_NUMBER')\n\tamount = 1\n\taccount_reference = 'ABC001'\n\ttransaction_desc = 'STK Push Description'\n\tcallback_url = stk_push_callback_url\n\tr = cl.stk_push(phone_number, amount, account_reference, transaction_desc, callback_url)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "documentation": {}
    },
    {
        "label": "stk_push_success",
        "kind": 2,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "peekOfCode": "def stk_push_success(request):\n\tphone_number = config('LNM_PHONE_NUMBER')\n\tamount = 1\n\taccount_reference = 'ABC001'\n\ttransaction_desc = 'STK Push Description'\n\tcallback_url = stk_push_callback_url\n\tr = cl.stk_push(phone_number, amount, account_reference, transaction_desc, callback_url)\n\treturn JsonResponse(r.response_description, safe=False)\ndef business_payment_success(request):\n\tphone_number = config('B2C_PHONE_NUMBER')",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "documentation": {}
    },
    {
        "label": "business_payment_success",
        "kind": 2,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "peekOfCode": "def business_payment_success(request):\n\tphone_number = config('B2C_PHONE_NUMBER')\n\tamount = 1\n\ttransaction_desc = 'Business Payment Description'\n\toccassion = 'Test business payment occassion'\n\tcallback_url = b2c_callback_url\n\tr = cl.business_payment(phone_number, amount, transaction_desc, callback_url, occassion)\n\treturn JsonResponse(r.response_description, safe=False)\ndef salary_payment_success(request):\n\tphone_number = config('B2C_PHONE_NUMBER')",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "documentation": {}
    },
    {
        "label": "salary_payment_success",
        "kind": 2,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "peekOfCode": "def salary_payment_success(request):\n\tphone_number = config('B2C_PHONE_NUMBER')\n\tamount = 1\n\ttransaction_desc = 'Salary Payment Description'\n\toccassion = 'Test salary payment occassion'\n\tcallback_url = b2c_callback_url\n\tr = cl.salary_payment(phone_number, amount, transaction_desc, callback_url, occassion)\n\treturn JsonResponse(r.response_description, safe=False)\ndef promotion_payment_success(request):\n\tphone_number = config('B2C_PHONE_NUMBER')",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "documentation": {}
    },
    {
        "label": "promotion_payment_success",
        "kind": 2,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "peekOfCode": "def promotion_payment_success(request):\n\tphone_number = config('B2C_PHONE_NUMBER')\n\tamount = 1\n\ttransaction_desc = 'Promotion Payment Description'\n\toccassion = 'Test promotion payment occassion'\n\tcallback_url = b2c_callback_url\n\tr = cl.promotion_payment(phone_number, amount, transaction_desc, callback_url, occassion)\n\treturn JsonResponse(r.response_description, safe=False)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "documentation": {}
    },
    {
        "label": "cl",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "peekOfCode": "cl = MpesaClient()\nstk_push_callback_url = 'https://darajambili.herokuapp.com/express-payment'\nb2c_callback_url = 'https://darajambili.herokuapp.com/b2c/result'\ndef index(request):\n\treturn HttpResponse('Welcome to the home of daraja APIs')\ndef oauth_success(request):\n\tr = cl.access_token()\n\treturn JsonResponse(r, safe=False)\ndef stk_push_success(request):\n\tphone_number = config('LNM_PHONE_NUMBER')",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "documentation": {}
    },
    {
        "label": "stk_push_callback_url",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "peekOfCode": "stk_push_callback_url = 'https://darajambili.herokuapp.com/express-payment'\nb2c_callback_url = 'https://darajambili.herokuapp.com/b2c/result'\ndef index(request):\n\treturn HttpResponse('Welcome to the home of daraja APIs')\ndef oauth_success(request):\n\tr = cl.access_token()\n\treturn JsonResponse(r, safe=False)\ndef stk_push_success(request):\n\tphone_number = config('LNM_PHONE_NUMBER')\n\tamount = 1",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "documentation": {}
    },
    {
        "label": "b2c_callback_url",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "peekOfCode": "b2c_callback_url = 'https://darajambili.herokuapp.com/b2c/result'\ndef index(request):\n\treturn HttpResponse('Welcome to the home of daraja APIs')\ndef oauth_success(request):\n\tr = cl.access_token()\n\treturn JsonResponse(r, safe=False)\ndef stk_push_success(request):\n\tphone_number = config('LNM_PHONE_NUMBER')\n\tamount = 1\n\taccount_reference = 'ABC001'",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "documentation": {}
    },
    {
        "label": "\tr",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "peekOfCode": "\tr = cl.access_token()\n\treturn JsonResponse(r, safe=False)\ndef stk_push_success(request):\n\tphone_number = config('LNM_PHONE_NUMBER')\n\tamount = 1\n\taccount_reference = 'ABC001'\n\ttransaction_desc = 'STK Push Description'\n\tcallback_url = stk_push_callback_url\n\tr = cl.stk_push(phone_number, amount, account_reference, transaction_desc, callback_url)\n\treturn JsonResponse(r.response_description, safe=False)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "documentation": {}
    },
    {
        "label": "\tphone_number",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "peekOfCode": "\tphone_number = config('LNM_PHONE_NUMBER')\n\tamount = 1\n\taccount_reference = 'ABC001'\n\ttransaction_desc = 'STK Push Description'\n\tcallback_url = stk_push_callback_url\n\tr = cl.stk_push(phone_number, amount, account_reference, transaction_desc, callback_url)\n\treturn JsonResponse(r.response_description, safe=False)\ndef business_payment_success(request):\n\tphone_number = config('B2C_PHONE_NUMBER')\n\tamount = 1",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "documentation": {}
    },
    {
        "label": "\tamount",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "peekOfCode": "\tamount = 1\n\taccount_reference = 'ABC001'\n\ttransaction_desc = 'STK Push Description'\n\tcallback_url = stk_push_callback_url\n\tr = cl.stk_push(phone_number, amount, account_reference, transaction_desc, callback_url)\n\treturn JsonResponse(r.response_description, safe=False)\ndef business_payment_success(request):\n\tphone_number = config('B2C_PHONE_NUMBER')\n\tamount = 1\n\ttransaction_desc = 'Business Payment Description'",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "documentation": {}
    },
    {
        "label": "\taccount_reference",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "peekOfCode": "\taccount_reference = 'ABC001'\n\ttransaction_desc = 'STK Push Description'\n\tcallback_url = stk_push_callback_url\n\tr = cl.stk_push(phone_number, amount, account_reference, transaction_desc, callback_url)\n\treturn JsonResponse(r.response_description, safe=False)\ndef business_payment_success(request):\n\tphone_number = config('B2C_PHONE_NUMBER')\n\tamount = 1\n\ttransaction_desc = 'Business Payment Description'\n\toccassion = 'Test business payment occassion'",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "documentation": {}
    },
    {
        "label": "\ttransaction_desc",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "peekOfCode": "\ttransaction_desc = 'STK Push Description'\n\tcallback_url = stk_push_callback_url\n\tr = cl.stk_push(phone_number, amount, account_reference, transaction_desc, callback_url)\n\treturn JsonResponse(r.response_description, safe=False)\ndef business_payment_success(request):\n\tphone_number = config('B2C_PHONE_NUMBER')\n\tamount = 1\n\ttransaction_desc = 'Business Payment Description'\n\toccassion = 'Test business payment occassion'\n\tcallback_url = b2c_callback_url",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "documentation": {}
    },
    {
        "label": "\tcallback_url",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "peekOfCode": "\tcallback_url = stk_push_callback_url\n\tr = cl.stk_push(phone_number, amount, account_reference, transaction_desc, callback_url)\n\treturn JsonResponse(r.response_description, safe=False)\ndef business_payment_success(request):\n\tphone_number = config('B2C_PHONE_NUMBER')\n\tamount = 1\n\ttransaction_desc = 'Business Payment Description'\n\toccassion = 'Test business payment occassion'\n\tcallback_url = b2c_callback_url\n\tr = cl.business_payment(phone_number, amount, transaction_desc, callback_url, occassion)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "documentation": {}
    },
    {
        "label": "\tr",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "peekOfCode": "\tr = cl.stk_push(phone_number, amount, account_reference, transaction_desc, callback_url)\n\treturn JsonResponse(r.response_description, safe=False)\ndef business_payment_success(request):\n\tphone_number = config('B2C_PHONE_NUMBER')\n\tamount = 1\n\ttransaction_desc = 'Business Payment Description'\n\toccassion = 'Test business payment occassion'\n\tcallback_url = b2c_callback_url\n\tr = cl.business_payment(phone_number, amount, transaction_desc, callback_url, occassion)\n\treturn JsonResponse(r.response_description, safe=False)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "documentation": {}
    },
    {
        "label": "\tphone_number",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "peekOfCode": "\tphone_number = config('B2C_PHONE_NUMBER')\n\tamount = 1\n\ttransaction_desc = 'Business Payment Description'\n\toccassion = 'Test business payment occassion'\n\tcallback_url = b2c_callback_url\n\tr = cl.business_payment(phone_number, amount, transaction_desc, callback_url, occassion)\n\treturn JsonResponse(r.response_description, safe=False)\ndef salary_payment_success(request):\n\tphone_number = config('B2C_PHONE_NUMBER')\n\tamount = 1",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "documentation": {}
    },
    {
        "label": "\tamount",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "peekOfCode": "\tamount = 1\n\ttransaction_desc = 'Business Payment Description'\n\toccassion = 'Test business payment occassion'\n\tcallback_url = b2c_callback_url\n\tr = cl.business_payment(phone_number, amount, transaction_desc, callback_url, occassion)\n\treturn JsonResponse(r.response_description, safe=False)\ndef salary_payment_success(request):\n\tphone_number = config('B2C_PHONE_NUMBER')\n\tamount = 1\n\ttransaction_desc = 'Salary Payment Description'",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "documentation": {}
    },
    {
        "label": "\ttransaction_desc",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "peekOfCode": "\ttransaction_desc = 'Business Payment Description'\n\toccassion = 'Test business payment occassion'\n\tcallback_url = b2c_callback_url\n\tr = cl.business_payment(phone_number, amount, transaction_desc, callback_url, occassion)\n\treturn JsonResponse(r.response_description, safe=False)\ndef salary_payment_success(request):\n\tphone_number = config('B2C_PHONE_NUMBER')\n\tamount = 1\n\ttransaction_desc = 'Salary Payment Description'\n\toccassion = 'Test salary payment occassion'",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "documentation": {}
    },
    {
        "label": "\toccassion",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "peekOfCode": "\toccassion = 'Test business payment occassion'\n\tcallback_url = b2c_callback_url\n\tr = cl.business_payment(phone_number, amount, transaction_desc, callback_url, occassion)\n\treturn JsonResponse(r.response_description, safe=False)\ndef salary_payment_success(request):\n\tphone_number = config('B2C_PHONE_NUMBER')\n\tamount = 1\n\ttransaction_desc = 'Salary Payment Description'\n\toccassion = 'Test salary payment occassion'\n\tcallback_url = b2c_callback_url",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "documentation": {}
    },
    {
        "label": "\tcallback_url",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "peekOfCode": "\tcallback_url = b2c_callback_url\n\tr = cl.business_payment(phone_number, amount, transaction_desc, callback_url, occassion)\n\treturn JsonResponse(r.response_description, safe=False)\ndef salary_payment_success(request):\n\tphone_number = config('B2C_PHONE_NUMBER')\n\tamount = 1\n\ttransaction_desc = 'Salary Payment Description'\n\toccassion = 'Test salary payment occassion'\n\tcallback_url = b2c_callback_url\n\tr = cl.salary_payment(phone_number, amount, transaction_desc, callback_url, occassion)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "documentation": {}
    },
    {
        "label": "\tr",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "peekOfCode": "\tr = cl.business_payment(phone_number, amount, transaction_desc, callback_url, occassion)\n\treturn JsonResponse(r.response_description, safe=False)\ndef salary_payment_success(request):\n\tphone_number = config('B2C_PHONE_NUMBER')\n\tamount = 1\n\ttransaction_desc = 'Salary Payment Description'\n\toccassion = 'Test salary payment occassion'\n\tcallback_url = b2c_callback_url\n\tr = cl.salary_payment(phone_number, amount, transaction_desc, callback_url, occassion)\n\treturn JsonResponse(r.response_description, safe=False)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "documentation": {}
    },
    {
        "label": "\tphone_number",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "peekOfCode": "\tphone_number = config('B2C_PHONE_NUMBER')\n\tamount = 1\n\ttransaction_desc = 'Salary Payment Description'\n\toccassion = 'Test salary payment occassion'\n\tcallback_url = b2c_callback_url\n\tr = cl.salary_payment(phone_number, amount, transaction_desc, callback_url, occassion)\n\treturn JsonResponse(r.response_description, safe=False)\ndef promotion_payment_success(request):\n\tphone_number = config('B2C_PHONE_NUMBER')\n\tamount = 1",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "documentation": {}
    },
    {
        "label": "\tamount",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "peekOfCode": "\tamount = 1\n\ttransaction_desc = 'Salary Payment Description'\n\toccassion = 'Test salary payment occassion'\n\tcallback_url = b2c_callback_url\n\tr = cl.salary_payment(phone_number, amount, transaction_desc, callback_url, occassion)\n\treturn JsonResponse(r.response_description, safe=False)\ndef promotion_payment_success(request):\n\tphone_number = config('B2C_PHONE_NUMBER')\n\tamount = 1\n\ttransaction_desc = 'Promotion Payment Description'",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "documentation": {}
    },
    {
        "label": "\ttransaction_desc",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "peekOfCode": "\ttransaction_desc = 'Salary Payment Description'\n\toccassion = 'Test salary payment occassion'\n\tcallback_url = b2c_callback_url\n\tr = cl.salary_payment(phone_number, amount, transaction_desc, callback_url, occassion)\n\treturn JsonResponse(r.response_description, safe=False)\ndef promotion_payment_success(request):\n\tphone_number = config('B2C_PHONE_NUMBER')\n\tamount = 1\n\ttransaction_desc = 'Promotion Payment Description'\n\toccassion = 'Test promotion payment occassion'",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "documentation": {}
    },
    {
        "label": "\toccassion",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "peekOfCode": "\toccassion = 'Test salary payment occassion'\n\tcallback_url = b2c_callback_url\n\tr = cl.salary_payment(phone_number, amount, transaction_desc, callback_url, occassion)\n\treturn JsonResponse(r.response_description, safe=False)\ndef promotion_payment_success(request):\n\tphone_number = config('B2C_PHONE_NUMBER')\n\tamount = 1\n\ttransaction_desc = 'Promotion Payment Description'\n\toccassion = 'Test promotion payment occassion'\n\tcallback_url = b2c_callback_url",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "documentation": {}
    },
    {
        "label": "\tcallback_url",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "peekOfCode": "\tcallback_url = b2c_callback_url\n\tr = cl.salary_payment(phone_number, amount, transaction_desc, callback_url, occassion)\n\treturn JsonResponse(r.response_description, safe=False)\ndef promotion_payment_success(request):\n\tphone_number = config('B2C_PHONE_NUMBER')\n\tamount = 1\n\ttransaction_desc = 'Promotion Payment Description'\n\toccassion = 'Test promotion payment occassion'\n\tcallback_url = b2c_callback_url\n\tr = cl.promotion_payment(phone_number, amount, transaction_desc, callback_url, occassion)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "documentation": {}
    },
    {
        "label": "\tr",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "peekOfCode": "\tr = cl.salary_payment(phone_number, amount, transaction_desc, callback_url, occassion)\n\treturn JsonResponse(r.response_description, safe=False)\ndef promotion_payment_success(request):\n\tphone_number = config('B2C_PHONE_NUMBER')\n\tamount = 1\n\ttransaction_desc = 'Promotion Payment Description'\n\toccassion = 'Test promotion payment occassion'\n\tcallback_url = b2c_callback_url\n\tr = cl.promotion_payment(phone_number, amount, transaction_desc, callback_url, occassion)\n\treturn JsonResponse(r.response_description, safe=False)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "documentation": {}
    },
    {
        "label": "\tphone_number",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "peekOfCode": "\tphone_number = config('B2C_PHONE_NUMBER')\n\tamount = 1\n\ttransaction_desc = 'Promotion Payment Description'\n\toccassion = 'Test promotion payment occassion'\n\tcallback_url = b2c_callback_url\n\tr = cl.promotion_payment(phone_number, amount, transaction_desc, callback_url, occassion)\n\treturn JsonResponse(r.response_description, safe=False)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "documentation": {}
    },
    {
        "label": "\tamount",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "peekOfCode": "\tamount = 1\n\ttransaction_desc = 'Promotion Payment Description'\n\toccassion = 'Test promotion payment occassion'\n\tcallback_url = b2c_callback_url\n\tr = cl.promotion_payment(phone_number, amount, transaction_desc, callback_url, occassion)\n\treturn JsonResponse(r.response_description, safe=False)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "documentation": {}
    },
    {
        "label": "\ttransaction_desc",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "peekOfCode": "\ttransaction_desc = 'Promotion Payment Description'\n\toccassion = 'Test promotion payment occassion'\n\tcallback_url = b2c_callback_url\n\tr = cl.promotion_payment(phone_number, amount, transaction_desc, callback_url, occassion)\n\treturn JsonResponse(r.response_description, safe=False)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "documentation": {}
    },
    {
        "label": "\toccassion",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "peekOfCode": "\toccassion = 'Test promotion payment occassion'\n\tcallback_url = b2c_callback_url\n\tr = cl.promotion_payment(phone_number, amount, transaction_desc, callback_url, occassion)\n\treturn JsonResponse(r.response_description, safe=False)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "documentation": {}
    },
    {
        "label": "\tcallback_url",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "peekOfCode": "\tcallback_url = b2c_callback_url\n\tr = cl.promotion_payment(phone_number, amount, transaction_desc, callback_url, occassion)\n\treturn JsonResponse(r.response_description, safe=False)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "documentation": {}
    },
    {
        "label": "\tr",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "peekOfCode": "\tr = cl.promotion_payment(phone_number, amount, transaction_desc, callback_url, occassion)\n\treturn JsonResponse(r.response_description, safe=False)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.django_daraja.views",
        "documentation": {}
    },
    {
        "label": "project",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "peekOfCode": "project = u'django-daraja'\ncopyright = u'2018, Martin Mogusu'\nauthor = u'Martin Mogusu'\n# The short X.Y version\nversion = u''\n# The full version, including alpha/beta/rc tags\nrelease = u'0.0.1'\n# -- General configuration ---------------------------------------------------\n# If your documentation needs a minimal Sphinx version, state it here.\n#",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "documentation": {}
    },
    {
        "label": "copyright",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "peekOfCode": "copyright = u'2018, Martin Mogusu'\nauthor = u'Martin Mogusu'\n# The short X.Y version\nversion = u''\n# The full version, including alpha/beta/rc tags\nrelease = u'0.0.1'\n# -- General configuration ---------------------------------------------------\n# If your documentation needs a minimal Sphinx version, state it here.\n#\n# needs_sphinx = '1.0'",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "documentation": {}
    },
    {
        "label": "author",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "peekOfCode": "author = u'Martin Mogusu'\n# The short X.Y version\nversion = u''\n# The full version, including alpha/beta/rc tags\nrelease = u'0.0.1'\n# -- General configuration ---------------------------------------------------\n# If your documentation needs a minimal Sphinx version, state it here.\n#\n# needs_sphinx = '1.0'\n# Add any Sphinx extension module names here, as strings. They can be",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "documentation": {}
    },
    {
        "label": "version",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "peekOfCode": "version = u''\n# The full version, including alpha/beta/rc tags\nrelease = u'0.0.1'\n# -- General configuration ---------------------------------------------------\n# If your documentation needs a minimal Sphinx version, state it here.\n#\n# needs_sphinx = '1.0'\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n# ones.",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "documentation": {}
    },
    {
        "label": "release",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "peekOfCode": "release = u'0.0.1'\n# -- General configuration ---------------------------------------------------\n# If your documentation needs a minimal Sphinx version, state it here.\n#\n# needs_sphinx = '1.0'\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n# ones.\nextensions = [\n    'sphinx.ext.autodoc',",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "documentation": {}
    },
    {
        "label": "extensions",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "peekOfCode": "extensions = [\n    'sphinx.ext.autodoc',\n    'sphinx.ext.napoleon',\n]\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = ['_templates']\n# The suffix(es) of source filenames.\n# You can specify multiple suffix as a list of string:\n#\n# source_suffix = ['.rst', '.md']",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "documentation": {}
    },
    {
        "label": "templates_path",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "peekOfCode": "templates_path = ['_templates']\n# The suffix(es) of source filenames.\n# You can specify multiple suffix as a list of string:\n#\n# source_suffix = ['.rst', '.md']\nsource_suffix = '.rst'\n# The master toctree document.\nmaster_doc = 'index'\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "documentation": {}
    },
    {
        "label": "source_suffix",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "peekOfCode": "source_suffix = '.rst'\n# The master toctree document.\nmaster_doc = 'index'\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#\n# This is also used if you do content translation via gettext catalogs.\n# Usually you set \"language\" from the command line for these cases.\nlanguage = None\n# List of patterns, relative to source directory, that match files and",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "documentation": {}
    },
    {
        "label": "master_doc",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "peekOfCode": "master_doc = 'index'\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#\n# This is also used if you do content translation via gettext catalogs.\n# Usually you set \"language\" from the command line for these cases.\nlanguage = None\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\n# This pattern also affects html_static_path and html_extra_path.",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "documentation": {}
    },
    {
        "label": "language",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "peekOfCode": "language = None\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\n# This pattern also affects html_static_path and html_extra_path.\nexclude_patterns = [u'_build', 'Thumbs.db', '.DS_Store']\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = None\n# -- Options for HTML output -------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "documentation": {}
    },
    {
        "label": "exclude_patterns",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "peekOfCode": "exclude_patterns = [u'_build', 'Thumbs.db', '.DS_Store']\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = None\n# -- Options for HTML output -------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n#\nhtml_theme = 'sphinx_rtd_theme'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "documentation": {}
    },
    {
        "label": "pygments_style",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "peekOfCode": "pygments_style = None\n# -- Options for HTML output -------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n#\nhtml_theme = 'sphinx_rtd_theme'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "documentation": {}
    },
    {
        "label": "html_theme",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "peekOfCode": "html_theme = 'sphinx_rtd_theme'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#\n# html_theme_options = {}\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = ['_static']",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "documentation": {}
    },
    {
        "label": "html_static_path",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "peekOfCode": "html_static_path = ['_static']\n# Custom sidebar templates, must be a dictionary that maps document names\n# to template names.\n#\n# The default sidebars (for documents that don't match any pattern) are\n# defined by theme itself.  Builtin themes are using these templates by\n# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',\n# 'searchbox.html']``.\n#\n# html_sidebars = {}",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "documentation": {}
    },
    {
        "label": "htmlhelp_basename",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "peekOfCode": "htmlhelp_basename = 'django-darajadoc'\n# -- Options for LaTeX output ------------------------------------------------\nlatex_elements = {\n    # The paper size ('letterpaper' or 'a4paper').\n    #\n    # 'papersize': 'letterpaper',\n    # The font size ('10pt', '11pt' or '12pt').\n    #\n    # 'pointsize': '10pt',\n    # Additional stuff for the LaTeX preamble.",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "documentation": {}
    },
    {
        "label": "latex_elements",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "peekOfCode": "latex_elements = {\n    # The paper size ('letterpaper' or 'a4paper').\n    #\n    # 'papersize': 'letterpaper',\n    # The font size ('10pt', '11pt' or '12pt').\n    #\n    # 'pointsize': '10pt',\n    # Additional stuff for the LaTeX preamble.\n    #\n    # 'preamble': '',",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "documentation": {}
    },
    {
        "label": "latex_documents",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "peekOfCode": "latex_documents = [\n    (master_doc, 'django-daraja.tex', u'django-daraja Documentation',\n     u'Martin Mogusu', 'manual'),\n]\n# -- Options for manual page output ------------------------------------------\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    (master_doc, 'django-daraja', u'django-daraja Documentation',\n     [author], 1)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "documentation": {}
    },
    {
        "label": "man_pages",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "peekOfCode": "man_pages = [\n    (master_doc, 'django-daraja', u'django-daraja Documentation',\n     [author], 1)\n]\n# -- Options for Texinfo output ----------------------------------------------\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)\ntexinfo_documents = [\n    (master_doc, 'django-daraja', u'django-daraja Documentation',",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "documentation": {}
    },
    {
        "label": "texinfo_documents",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "peekOfCode": "texinfo_documents = [\n    (master_doc, 'django-daraja', u'django-daraja Documentation',\n     author, 'django-daraja', 'One line description of project.',\n     'Miscellaneous'),\n]\n# -- Options for Epub output -------------------------------------------------\n# Bibliographic Dublin Core info.\nepub_title = project\n# The unique identifier of the text. This can be a ISBN number\n# or the project homepage.",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "documentation": {}
    },
    {
        "label": "epub_title",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "peekOfCode": "epub_title = project\n# The unique identifier of the text. This can be a ISBN number\n# or the project homepage.\n#\n# epub_identifier = ''\n# A unique identification for the text.\n#\n# epub_uid = ''\n# A list of files that should not be packed into the epub file.\nepub_exclude_files = ['search.html']",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "documentation": {}
    },
    {
        "label": "epub_exclude_files",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "peekOfCode": "epub_exclude_files = ['search.html']\n# -- Extension configuration -------------------------------------------------",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.docs.conf",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 2,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.runtests",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.runtests",
        "peekOfCode": "def start(argv=None):\n    sys.exitfunc = lambda: sys.stderr.write(\"Shutting down...\\n\")\n    if argv is None:\n        argv = [\n            \"nosetests\", \"--cover-branches\", \"--with-coverage\",\n            \"--cover-erase\", \"--verbose\",\n            \"--cover-package=django_daraja\",\n        ]\n    nose.run_exit(argv=argv, defaultTest=os.path.abspath(os.path.dirname(__file__)))\nif __name__ == \"__main__\":",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.runtests",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "peekOfCode": "BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'lkk8@h!zhe4lxwf1!t=#5@bm(iuep+t+e6xik=4*lo(yy3u=f!'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "peekOfCode": "SECRET_KEY = 'lkk8@h!zhe4lxwf1!t=#5@bm(iuep+t+e6xik=4*lo(yy3u=f!'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'django_daraja',",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'django_daraja',\n]\nMIDDLEWARE = [",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'tests.urls'",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "peekOfCode": "ROOT_URLCONF = 'tests.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "peekOfCode": "WSGI_APPLICATION = 'tests.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/1.11/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n# Password validation",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/1.11/howto/static-files/\nSTATIC_URL = '/static/'",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/1.11/howto/static-files/\nSTATIC_URL = '/static/'",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/1.11/howto/static-files/\nSTATIC_URL = '/static/'",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/1.11/howto/static-files/\nSTATIC_URL = '/static/'",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/1.11/howto/static-files/\nSTATIC_URL = '/static/'",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "peekOfCode": "STATIC_URL = '/static/'",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.settings",
        "documentation": {}
    },
    {
        "label": "MpesaB2CPaymentTestCase",
        "kind": 6,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "peekOfCode": "class MpesaB2CPaymentTestCase(TestCase):\n\tcl = MpesaClient()\n\tcallback_url = 'https://darajambili.herokuapp.com/express-payment'\n\tsuccess_description = 'Accept the service request successfully.'\n\tdef test_business_payment_success(self):\n\t\t'''\n\t\tTest successful business payment\n\t\t'''\n\t\tphone_number = config('B2C_PHONE_NUMBER')\n\t\tamount = 1",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "documentation": {}
    },
    {
        "label": "\tcl",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "peekOfCode": "\tcl = MpesaClient()\n\tcallback_url = 'https://darajambili.herokuapp.com/express-payment'\n\tsuccess_description = 'Accept the service request successfully.'\n\tdef test_business_payment_success(self):\n\t\t'''\n\t\tTest successful business payment\n\t\t'''\n\t\tphone_number = config('B2C_PHONE_NUMBER')\n\t\tamount = 1\n\t\ttransaction_desc = 'Description'",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "documentation": {}
    },
    {
        "label": "\tcallback_url",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "peekOfCode": "\tcallback_url = 'https://darajambili.herokuapp.com/express-payment'\n\tsuccess_description = 'Accept the service request successfully.'\n\tdef test_business_payment_success(self):\n\t\t'''\n\t\tTest successful business payment\n\t\t'''\n\t\tphone_number = config('B2C_PHONE_NUMBER')\n\t\tamount = 1\n\t\ttransaction_desc = 'Description'\n\t\toccassion = 'Occassion'",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "documentation": {}
    },
    {
        "label": "\tsuccess_description",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "peekOfCode": "\tsuccess_description = 'Accept the service request successfully.'\n\tdef test_business_payment_success(self):\n\t\t'''\n\t\tTest successful business payment\n\t\t'''\n\t\tphone_number = config('B2C_PHONE_NUMBER')\n\t\tamount = 1\n\t\ttransaction_desc = 'Description'\n\t\toccassion = 'Occassion'\n\t\tresponse = self.cl.business_payment(phone_number, amount, transaction_desc, self.callback_url, occassion)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "documentation": {}
    },
    {
        "label": "\t\tphone_number",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "peekOfCode": "\t\tphone_number = config('B2C_PHONE_NUMBER')\n\t\tamount = 1\n\t\ttransaction_desc = 'Description'\n\t\toccassion = 'Occassion'\n\t\tresponse = self.cl.business_payment(phone_number, amount, transaction_desc, self.callback_url, occassion)\n\t\tself.assertEqual(response.response_description, self.success_description)\n\tdef test_salary_payment_success(self):\n\t\t'''\n\t\tTest successful salary payment\n\t\t'''",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "documentation": {}
    },
    {
        "label": "\t\tamount",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "peekOfCode": "\t\tamount = 1\n\t\ttransaction_desc = 'Description'\n\t\toccassion = 'Occassion'\n\t\tresponse = self.cl.business_payment(phone_number, amount, transaction_desc, self.callback_url, occassion)\n\t\tself.assertEqual(response.response_description, self.success_description)\n\tdef test_salary_payment_success(self):\n\t\t'''\n\t\tTest successful salary payment\n\t\t'''\n\t\tphone_number = config('B2C_PHONE_NUMBER')",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "documentation": {}
    },
    {
        "label": "\t\ttransaction_desc",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "peekOfCode": "\t\ttransaction_desc = 'Description'\n\t\toccassion = 'Occassion'\n\t\tresponse = self.cl.business_payment(phone_number, amount, transaction_desc, self.callback_url, occassion)\n\t\tself.assertEqual(response.response_description, self.success_description)\n\tdef test_salary_payment_success(self):\n\t\t'''\n\t\tTest successful salary payment\n\t\t'''\n\t\tphone_number = config('B2C_PHONE_NUMBER')\n\t\tamount = 1",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "documentation": {}
    },
    {
        "label": "\t\toccassion",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "peekOfCode": "\t\toccassion = 'Occassion'\n\t\tresponse = self.cl.business_payment(phone_number, amount, transaction_desc, self.callback_url, occassion)\n\t\tself.assertEqual(response.response_description, self.success_description)\n\tdef test_salary_payment_success(self):\n\t\t'''\n\t\tTest successful salary payment\n\t\t'''\n\t\tphone_number = config('B2C_PHONE_NUMBER')\n\t\tamount = 1\n\t\ttransaction_desc = 'Description'",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "peekOfCode": "\t\tresponse = self.cl.business_payment(phone_number, amount, transaction_desc, self.callback_url, occassion)\n\t\tself.assertEqual(response.response_description, self.success_description)\n\tdef test_salary_payment_success(self):\n\t\t'''\n\t\tTest successful salary payment\n\t\t'''\n\t\tphone_number = config('B2C_PHONE_NUMBER')\n\t\tamount = 1\n\t\ttransaction_desc = 'Description'\n\t\toccassion = 'Occassion'",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "documentation": {}
    },
    {
        "label": "\t\tphone_number",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "peekOfCode": "\t\tphone_number = config('B2C_PHONE_NUMBER')\n\t\tamount = 1\n\t\ttransaction_desc = 'Description'\n\t\toccassion = 'Occassion'\n\t\tresponse = self.cl.salary_payment(phone_number, amount, transaction_desc, self.callback_url, occassion)\n\t\tself.assertEqual(response.response_description, self.success_description)\n\tdef test_promotion_payment_success(self):\n\t\t'''\n\t\tTest successful promotion payment\n\t\t'''",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "documentation": {}
    },
    {
        "label": "\t\tamount",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "peekOfCode": "\t\tamount = 1\n\t\ttransaction_desc = 'Description'\n\t\toccassion = 'Occassion'\n\t\tresponse = self.cl.salary_payment(phone_number, amount, transaction_desc, self.callback_url, occassion)\n\t\tself.assertEqual(response.response_description, self.success_description)\n\tdef test_promotion_payment_success(self):\n\t\t'''\n\t\tTest successful promotion payment\n\t\t'''\n\t\tphone_number = config('B2C_PHONE_NUMBER')",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "documentation": {}
    },
    {
        "label": "\t\ttransaction_desc",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "peekOfCode": "\t\ttransaction_desc = 'Description'\n\t\toccassion = 'Occassion'\n\t\tresponse = self.cl.salary_payment(phone_number, amount, transaction_desc, self.callback_url, occassion)\n\t\tself.assertEqual(response.response_description, self.success_description)\n\tdef test_promotion_payment_success(self):\n\t\t'''\n\t\tTest successful promotion payment\n\t\t'''\n\t\tphone_number = config('B2C_PHONE_NUMBER')\n\t\tamount = 1",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "documentation": {}
    },
    {
        "label": "\t\toccassion",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "peekOfCode": "\t\toccassion = 'Occassion'\n\t\tresponse = self.cl.salary_payment(phone_number, amount, transaction_desc, self.callback_url, occassion)\n\t\tself.assertEqual(response.response_description, self.success_description)\n\tdef test_promotion_payment_success(self):\n\t\t'''\n\t\tTest successful promotion payment\n\t\t'''\n\t\tphone_number = config('B2C_PHONE_NUMBER')\n\t\tamount = 1\n\t\ttransaction_desc = 'Description'",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "peekOfCode": "\t\tresponse = self.cl.salary_payment(phone_number, amount, transaction_desc, self.callback_url, occassion)\n\t\tself.assertEqual(response.response_description, self.success_description)\n\tdef test_promotion_payment_success(self):\n\t\t'''\n\t\tTest successful promotion payment\n\t\t'''\n\t\tphone_number = config('B2C_PHONE_NUMBER')\n\t\tamount = 1\n\t\ttransaction_desc = 'Description'\n\t\toccassion = 'Occassion'",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "documentation": {}
    },
    {
        "label": "\t\tphone_number",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "peekOfCode": "\t\tphone_number = config('B2C_PHONE_NUMBER')\n\t\tamount = 1\n\t\ttransaction_desc = 'Description'\n\t\toccassion = 'Occassion'\n\t\tresponse = self.cl.promotion_payment(phone_number, amount, transaction_desc, self.callback_url, occassion)\n\t\tself.assertEqual(response.response_description, self.success_description)\n\tdef test_business_payment_empty_description(self):\n\t\t'''\n\t\tTest that Business Payment with empty description raises MpesaInvalidParameterException\n\t\t'''",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "documentation": {}
    },
    {
        "label": "\t\tamount",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "peekOfCode": "\t\tamount = 1\n\t\ttransaction_desc = 'Description'\n\t\toccassion = 'Occassion'\n\t\tresponse = self.cl.promotion_payment(phone_number, amount, transaction_desc, self.callback_url, occassion)\n\t\tself.assertEqual(response.response_description, self.success_description)\n\tdef test_business_payment_empty_description(self):\n\t\t'''\n\t\tTest that Business Payment with empty description raises MpesaInvalidParameterException\n\t\t'''\n\t\twith self.assertRaises(MpesaInvalidParameterException):",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "documentation": {}
    },
    {
        "label": "\t\ttransaction_desc",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "peekOfCode": "\t\ttransaction_desc = 'Description'\n\t\toccassion = 'Occassion'\n\t\tresponse = self.cl.promotion_payment(phone_number, amount, transaction_desc, self.callback_url, occassion)\n\t\tself.assertEqual(response.response_description, self.success_description)\n\tdef test_business_payment_empty_description(self):\n\t\t'''\n\t\tTest that Business Payment with empty description raises MpesaInvalidParameterException\n\t\t'''\n\t\twith self.assertRaises(MpesaInvalidParameterException):\n\t\t\tphone_number = config('B2C_PHONE_NUMBER')",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "documentation": {}
    },
    {
        "label": "\t\toccassion",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "peekOfCode": "\t\toccassion = 'Occassion'\n\t\tresponse = self.cl.promotion_payment(phone_number, amount, transaction_desc, self.callback_url, occassion)\n\t\tself.assertEqual(response.response_description, self.success_description)\n\tdef test_business_payment_empty_description(self):\n\t\t'''\n\t\tTest that Business Payment with empty description raises MpesaInvalidParameterException\n\t\t'''\n\t\twith self.assertRaises(MpesaInvalidParameterException):\n\t\t\tphone_number = config('B2C_PHONE_NUMBER')\n\t\t\tamount = 1000000",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "peekOfCode": "\t\tresponse = self.cl.promotion_payment(phone_number, amount, transaction_desc, self.callback_url, occassion)\n\t\tself.assertEqual(response.response_description, self.success_description)\n\tdef test_business_payment_empty_description(self):\n\t\t'''\n\t\tTest that Business Payment with empty description raises MpesaInvalidParameterException\n\t\t'''\n\t\twith self.assertRaises(MpesaInvalidParameterException):\n\t\t\tphone_number = config('B2C_PHONE_NUMBER')\n\t\t\tamount = 1000000\n\t\t\toccassion = 'occassion'",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "documentation": {}
    },
    {
        "label": "\t\t\tphone_number",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "peekOfCode": "\t\t\tphone_number = config('B2C_PHONE_NUMBER')\n\t\t\tamount = 1000000\n\t\t\toccassion = 'occassion'\n\t\t\ttransaction_desc = ''\n\t\t\tself.cl.business_payment(phone_number, amount, transaction_desc, self.callback_url, occassion)\n\tdef test_business_payment_invalid_amount(self):\n\t\t'''\n\t\tTest that Business Payment with invalid amount raises MpesaInvalidParameterException\n\t\t'''\n\t\twith self.assertRaises(MpesaInvalidParameterException):",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "documentation": {}
    },
    {
        "label": "\t\t\tamount",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "peekOfCode": "\t\t\tamount = 1000000\n\t\t\toccassion = 'occassion'\n\t\t\ttransaction_desc = ''\n\t\t\tself.cl.business_payment(phone_number, amount, transaction_desc, self.callback_url, occassion)\n\tdef test_business_payment_invalid_amount(self):\n\t\t'''\n\t\tTest that Business Payment with invalid amount raises MpesaInvalidParameterException\n\t\t'''\n\t\twith self.assertRaises(MpesaInvalidParameterException):\n\t\t\tphone_number = config('B2C_PHONE_NUMBER')",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "documentation": {}
    },
    {
        "label": "\t\t\toccassion",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "peekOfCode": "\t\t\toccassion = 'occassion'\n\t\t\ttransaction_desc = ''\n\t\t\tself.cl.business_payment(phone_number, amount, transaction_desc, self.callback_url, occassion)\n\tdef test_business_payment_invalid_amount(self):\n\t\t'''\n\t\tTest that Business Payment with invalid amount raises MpesaInvalidParameterException\n\t\t'''\n\t\twith self.assertRaises(MpesaInvalidParameterException):\n\t\t\tphone_number = config('B2C_PHONE_NUMBER')\n\t\t\tamount = 1.5",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "documentation": {}
    },
    {
        "label": "\t\t\ttransaction_desc",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "peekOfCode": "\t\t\ttransaction_desc = ''\n\t\t\tself.cl.business_payment(phone_number, amount, transaction_desc, self.callback_url, occassion)\n\tdef test_business_payment_invalid_amount(self):\n\t\t'''\n\t\tTest that Business Payment with invalid amount raises MpesaInvalidParameterException\n\t\t'''\n\t\twith self.assertRaises(MpesaInvalidParameterException):\n\t\t\tphone_number = config('B2C_PHONE_NUMBER')\n\t\t\tamount = 1.5\n\t\t\toccassion = 'occassion'",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "documentation": {}
    },
    {
        "label": "\t\t\tphone_number",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "peekOfCode": "\t\t\tphone_number = config('B2C_PHONE_NUMBER')\n\t\t\tamount = 1.5\n\t\t\toccassion = 'occassion'\n\t\t\ttransaction_desc = 'Description'\n\t\t\tself.cl.business_payment(phone_number, amount, transaction_desc, self.callback_url, occassion)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "documentation": {}
    },
    {
        "label": "\t\t\tamount",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "peekOfCode": "\t\t\tamount = 1.5\n\t\t\toccassion = 'occassion'\n\t\t\ttransaction_desc = 'Description'\n\t\t\tself.cl.business_payment(phone_number, amount, transaction_desc, self.callback_url, occassion)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "documentation": {}
    },
    {
        "label": "\t\t\toccassion",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "peekOfCode": "\t\t\toccassion = 'occassion'\n\t\t\ttransaction_desc = 'Description'\n\t\t\tself.cl.business_payment(phone_number, amount, transaction_desc, self.callback_url, occassion)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "documentation": {}
    },
    {
        "label": "\t\t\ttransaction_desc",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "peekOfCode": "\t\t\ttransaction_desc = 'Description'\n\t\t\tself.cl.business_payment(phone_number, amount, transaction_desc, self.callback_url, occassion)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_b2c_payment",
        "documentation": {}
    },
    {
        "label": "MpesaClientTestCase",
        "kind": 6,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_client",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_client",
        "peekOfCode": "class MpesaClientTestCase(TestCase):\n\tdef test_client_init(self):\n\t\t'''\n\t\tTest initialization of MPESA Client\n\t\t'''\n\t\tcl = MpesaClient()\n\t\tself.assertEqual(cl.__class__.__name__, 'MpesaClient')",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_client",
        "documentation": {}
    },
    {
        "label": "\t\tcl",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_client",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_client",
        "peekOfCode": "\t\tcl = MpesaClient()\n\t\tself.assertEqual(cl.__class__.__name__, 'MpesaClient')",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_client",
        "documentation": {}
    },
    {
        "label": "MpesaOauthTestCase",
        "kind": 6,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_oauth",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_oauth",
        "peekOfCode": "class MpesaOauthTestCase(TestCase):\n\tdef test_oauth_correct_credentials(self):\n\t\t'''\n\t\tTest correct credentials sent to oauth endpoint\n\t\t'''\n\t\tr = generate_access_token_request()\n\t\tself.assertEqual(r.status_code, 200)\n\tdef test_oauth_wrong_credentials(self):\n\t\t'''\n\t\tTest wrong credentials sent to OAuth endpoint",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_oauth",
        "documentation": {}
    },
    {
        "label": "\t\tr",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_oauth",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_oauth",
        "peekOfCode": "\t\tr = generate_access_token_request()\n\t\tself.assertEqual(r.status_code, 200)\n\tdef test_oauth_wrong_credentials(self):\n\t\t'''\n\t\tTest wrong credentials sent to OAuth endpoint\n\t\t'''\n\t\tconsumer_key = 'wrong_consumer_key'\n\t\tconsumer_secret = 'wrong_consumer_secret'\n\t\tr = generate_access_token_request(consumer_key, consumer_secret)\n\t\tself.assertEqual(r.status_code, 400) # Unauthorized",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_oauth",
        "documentation": {}
    },
    {
        "label": "\t\tconsumer_key",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_oauth",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_oauth",
        "peekOfCode": "\t\tconsumer_key = 'wrong_consumer_key'\n\t\tconsumer_secret = 'wrong_consumer_secret'\n\t\tr = generate_access_token_request(consumer_key, consumer_secret)\n\t\tself.assertEqual(r.status_code, 400) # Unauthorized\n\tdef test_access_token_valid(self):\n\t\t'''\n\t\tTest that access token is never older than 50 minutes\t\n\t\t'''\n\t\ttoken = generate_access_token()\n\t\tdelta = timezone.now() - token.created_at",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_oauth",
        "documentation": {}
    },
    {
        "label": "\t\tconsumer_secret",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_oauth",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_oauth",
        "peekOfCode": "\t\tconsumer_secret = 'wrong_consumer_secret'\n\t\tr = generate_access_token_request(consumer_key, consumer_secret)\n\t\tself.assertEqual(r.status_code, 400) # Unauthorized\n\tdef test_access_token_valid(self):\n\t\t'''\n\t\tTest that access token is never older than 50 minutes\t\n\t\t'''\n\t\ttoken = generate_access_token()\n\t\tdelta = timezone.now() - token.created_at\n\t\tminutes = (delta.total_seconds()//60)%60",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_oauth",
        "documentation": {}
    },
    {
        "label": "\t\tr",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_oauth",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_oauth",
        "peekOfCode": "\t\tr = generate_access_token_request(consumer_key, consumer_secret)\n\t\tself.assertEqual(r.status_code, 400) # Unauthorized\n\tdef test_access_token_valid(self):\n\t\t'''\n\t\tTest that access token is never older than 50 minutes\t\n\t\t'''\n\t\ttoken = generate_access_token()\n\t\tdelta = timezone.now() - token.created_at\n\t\tminutes = (delta.total_seconds()//60)%60\n\t\tself.assertLessEqual(minutes, 30)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_oauth",
        "documentation": {}
    },
    {
        "label": "\t\ttoken",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_oauth",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_oauth",
        "peekOfCode": "\t\ttoken = generate_access_token()\n\t\tdelta = timezone.now() - token.created_at\n\t\tminutes = (delta.total_seconds()//60)%60\n\t\tself.assertLessEqual(minutes, 30)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_oauth",
        "documentation": {}
    },
    {
        "label": "\t\tdelta",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_oauth",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_oauth",
        "peekOfCode": "\t\tdelta = timezone.now() - token.created_at\n\t\tminutes = (delta.total_seconds()//60)%60\n\t\tself.assertLessEqual(minutes, 30)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_oauth",
        "documentation": {}
    },
    {
        "label": "\t\tminutes",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_oauth",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_oauth",
        "peekOfCode": "\t\tminutes = (delta.total_seconds()//60)%60\n\t\tself.assertLessEqual(minutes, 30)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_oauth",
        "documentation": {}
    },
    {
        "label": "MpesaStkPushTestCase",
        "kind": 6,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_parse_result",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_parse_result",
        "peekOfCode": "class MpesaStkPushTestCase(TestCase):\n\tcl = MpesaClient()\n\tdef test_parse_stk_push_result_success(self):\n\t\t'''\n\t\tTest parse successful STK push result\n\t\t'''\n\t\tresult = '{\"Body\":{\"stkCallback\":{\"MerchantRequestID\":\"19918-3028728-2\",\"CheckoutRequestID\":\"ws_CO_DMZ_264695293_11032019122104433\",\"ResultCode\":0,\"ResultDesc\":\"The service request is processed successfully.\",\"CallbackMetadata\":{\"Item\":[{\"Name\":\"Amount\",\"Value\":1.00},{\"Name\":\"MpesaReceiptNumber\",\"Value\":\"NCB9FJNAIT\"},{\"Name\":\"Balance\"},{\"Name\":\"TransactionDate\",\"Value\":20190311122121},{\"Name\":\"PhoneNumber\",\"Value\":254719748260}]}}}}'\n\t\tdata = self.cl.parse_stk_result(result)\n\t\tself.assertEqual(data.get('ResultDesc'), 'The service request is processed successfully.')\n\tdef test_parse_stk_push_result_wrong_pin(self):",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_parse_result",
        "documentation": {}
    },
    {
        "label": "\tcl",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_parse_result",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_parse_result",
        "peekOfCode": "\tcl = MpesaClient()\n\tdef test_parse_stk_push_result_success(self):\n\t\t'''\n\t\tTest parse successful STK push result\n\t\t'''\n\t\tresult = '{\"Body\":{\"stkCallback\":{\"MerchantRequestID\":\"19918-3028728-2\",\"CheckoutRequestID\":\"ws_CO_DMZ_264695293_11032019122104433\",\"ResultCode\":0,\"ResultDesc\":\"The service request is processed successfully.\",\"CallbackMetadata\":{\"Item\":[{\"Name\":\"Amount\",\"Value\":1.00},{\"Name\":\"MpesaReceiptNumber\",\"Value\":\"NCB9FJNAIT\"},{\"Name\":\"Balance\"},{\"Name\":\"TransactionDate\",\"Value\":20190311122121},{\"Name\":\"PhoneNumber\",\"Value\":254719748260}]}}}}'\n\t\tdata = self.cl.parse_stk_result(result)\n\t\tself.assertEqual(data.get('ResultDesc'), 'The service request is processed successfully.')\n\tdef test_parse_stk_push_result_wrong_pin(self):\n\t\t'''",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_parse_result",
        "documentation": {}
    },
    {
        "label": "\t\tresult",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_parse_result",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_parse_result",
        "peekOfCode": "\t\tresult = '{\"Body\":{\"stkCallback\":{\"MerchantRequestID\":\"19918-3028728-2\",\"CheckoutRequestID\":\"ws_CO_DMZ_264695293_11032019122104433\",\"ResultCode\":0,\"ResultDesc\":\"The service request is processed successfully.\",\"CallbackMetadata\":{\"Item\":[{\"Name\":\"Amount\",\"Value\":1.00},{\"Name\":\"MpesaReceiptNumber\",\"Value\":\"NCB9FJNAIT\"},{\"Name\":\"Balance\"},{\"Name\":\"TransactionDate\",\"Value\":20190311122121},{\"Name\":\"PhoneNumber\",\"Value\":254719748260}]}}}}'\n\t\tdata = self.cl.parse_stk_result(result)\n\t\tself.assertEqual(data.get('ResultDesc'), 'The service request is processed successfully.')\n\tdef test_parse_stk_push_result_wrong_pin(self):\n\t\t'''\n\t\tTest parse STK push result with wrong user PIN\n\t\t'''\n\t\tresult = '{\"Body\":{\"stkCallback\":{\"MerchantRequestID\":\"14683-2472331-1\",\"CheckoutRequestID\":\"ws_CO_DMZ_264800546_11032019141837240\",\"ResultCode\":2001,\"ResultDesc\":\"[MpesaCB - ]The initiator information is invalid.\"}}}'\n\t\tdata = self.cl.parse_stk_result(result)\n\t\tself.assertEqual(data.get('ResultDesc'), '[MpesaCB - ]The initiator information is invalid.')",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_parse_result",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_parse_result",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_parse_result",
        "peekOfCode": "\t\tdata = self.cl.parse_stk_result(result)\n\t\tself.assertEqual(data.get('ResultDesc'), 'The service request is processed successfully.')\n\tdef test_parse_stk_push_result_wrong_pin(self):\n\t\t'''\n\t\tTest parse STK push result with wrong user PIN\n\t\t'''\n\t\tresult = '{\"Body\":{\"stkCallback\":{\"MerchantRequestID\":\"14683-2472331-1\",\"CheckoutRequestID\":\"ws_CO_DMZ_264800546_11032019141837240\",\"ResultCode\":2001,\"ResultDesc\":\"[MpesaCB - ]The initiator information is invalid.\"}}}'\n\t\tdata = self.cl.parse_stk_result(result)\n\t\tself.assertEqual(data.get('ResultDesc'), '[MpesaCB - ]The initiator information is invalid.')\n\tdef test_parse_stk_push_result_cancelled(self):",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_parse_result",
        "documentation": {}
    },
    {
        "label": "\t\tresult",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_parse_result",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_parse_result",
        "peekOfCode": "\t\tresult = '{\"Body\":{\"stkCallback\":{\"MerchantRequestID\":\"14683-2472331-1\",\"CheckoutRequestID\":\"ws_CO_DMZ_264800546_11032019141837240\",\"ResultCode\":2001,\"ResultDesc\":\"[MpesaCB - ]The initiator information is invalid.\"}}}'\n\t\tdata = self.cl.parse_stk_result(result)\n\t\tself.assertEqual(data.get('ResultDesc'), '[MpesaCB - ]The initiator information is invalid.')\n\tdef test_parse_stk_push_result_cancelled(self):\n\t\t'''\n\t\tTest parse STK push result with request cancelled by user\n\t\t'''\n\t\tresult = '{\"Body\":{\"stkCallback\":{\"MerchantRequestID\":\"19919-3025233-1\",\"CheckoutRequestID\":\"ws_CO_DMZ_401294732_11032019121308821\",\"ResultCode\":1032,\"ResultDesc\":\"[STK_CB - ]Request cancelled by user\"}}}'\n\t\tdata = self.cl.parse_stk_result(result)\n\t\tself.assertEqual(data.get('ResultDesc'), '[STK_CB - ]Request cancelled by user')",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_parse_result",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_parse_result",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_parse_result",
        "peekOfCode": "\t\tdata = self.cl.parse_stk_result(result)\n\t\tself.assertEqual(data.get('ResultDesc'), '[MpesaCB - ]The initiator information is invalid.')\n\tdef test_parse_stk_push_result_cancelled(self):\n\t\t'''\n\t\tTest parse STK push result with request cancelled by user\n\t\t'''\n\t\tresult = '{\"Body\":{\"stkCallback\":{\"MerchantRequestID\":\"19919-3025233-1\",\"CheckoutRequestID\":\"ws_CO_DMZ_401294732_11032019121308821\",\"ResultCode\":1032,\"ResultDesc\":\"[STK_CB - ]Request cancelled by user\"}}}'\n\t\tdata = self.cl.parse_stk_result(result)\n\t\tself.assertEqual(data.get('ResultDesc'), '[STK_CB - ]Request cancelled by user')\n\tdef test_parse_stk_push_result_timeout(self):",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_parse_result",
        "documentation": {}
    },
    {
        "label": "\t\tresult",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_parse_result",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_parse_result",
        "peekOfCode": "\t\tresult = '{\"Body\":{\"stkCallback\":{\"MerchantRequestID\":\"19919-3025233-1\",\"CheckoutRequestID\":\"ws_CO_DMZ_401294732_11032019121308821\",\"ResultCode\":1032,\"ResultDesc\":\"[STK_CB - ]Request cancelled by user\"}}}'\n\t\tdata = self.cl.parse_stk_result(result)\n\t\tself.assertEqual(data.get('ResultDesc'), '[STK_CB - ]Request cancelled by user')\n\tdef test_parse_stk_push_result_timeout(self):\n\t\t'''\n\t\tTest parse STK push result after timeout\n\t\t'''\n\t\tresult = '{\"Body\":{\"stkCallback\":{\"MerchantRequestID\":\"19924-2088990-1\",\"CheckoutRequestID\":\"ws_CO_DMZ_262987371_09032019203456095\",\"ResultCode\":1036,\"ResultDesc\":\"[STK_CB - ]SMSC ACK timeout.\"}}}'\n\t\tdata = self.cl.parse_stk_result(result)\n\t\tself.assertEqual(data.get('ResultDesc'), '[STK_CB - ]SMSC ACK timeout.')",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_parse_result",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_parse_result",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_parse_result",
        "peekOfCode": "\t\tdata = self.cl.parse_stk_result(result)\n\t\tself.assertEqual(data.get('ResultDesc'), '[STK_CB - ]Request cancelled by user')\n\tdef test_parse_stk_push_result_timeout(self):\n\t\t'''\n\t\tTest parse STK push result after timeout\n\t\t'''\n\t\tresult = '{\"Body\":{\"stkCallback\":{\"MerchantRequestID\":\"19924-2088990-1\",\"CheckoutRequestID\":\"ws_CO_DMZ_262987371_09032019203456095\",\"ResultCode\":1036,\"ResultDesc\":\"[STK_CB - ]SMSC ACK timeout.\"}}}'\n\t\tdata = self.cl.parse_stk_result(result)\n\t\tself.assertEqual(data.get('ResultDesc'), '[STK_CB - ]SMSC ACK timeout.')",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_parse_result",
        "documentation": {}
    },
    {
        "label": "\t\tresult",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_parse_result",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_parse_result",
        "peekOfCode": "\t\tresult = '{\"Body\":{\"stkCallback\":{\"MerchantRequestID\":\"19924-2088990-1\",\"CheckoutRequestID\":\"ws_CO_DMZ_262987371_09032019203456095\",\"ResultCode\":1036,\"ResultDesc\":\"[STK_CB - ]SMSC ACK timeout.\"}}}'\n\t\tdata = self.cl.parse_stk_result(result)\n\t\tself.assertEqual(data.get('ResultDesc'), '[STK_CB - ]SMSC ACK timeout.')",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_parse_result",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_parse_result",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_parse_result",
        "peekOfCode": "\t\tdata = self.cl.parse_stk_result(result)\n\t\tself.assertEqual(data.get('ResultDesc'), '[STK_CB - ]SMSC ACK timeout.')",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_parse_result",
        "documentation": {}
    },
    {
        "label": "MpesaStkPushTestCase",
        "kind": 6,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "peekOfCode": "class MpesaStkPushTestCase(TestCase):\n\tcl = MpesaClient()\n\tcallback_url = 'https://darajambili.herokuapp.com/express-payment'\n\tdef test_stk_push_success(self):\n\t\t'''\n\t\tTest successful STK push\n\t\t'''\n\t\tphone_number = config('LNM_PHONE_NUMBER')\n\t\tamount = 1\n\t\taccount_reference = 'reference'",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "documentation": {}
    },
    {
        "label": "\tcl",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "peekOfCode": "\tcl = MpesaClient()\n\tcallback_url = 'https://darajambili.herokuapp.com/express-payment'\n\tdef test_stk_push_success(self):\n\t\t'''\n\t\tTest successful STK push\n\t\t'''\n\t\tphone_number = config('LNM_PHONE_NUMBER')\n\t\tamount = 1\n\t\taccount_reference = 'reference'\n\t\ttransaction_desc = 'Description'",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "documentation": {}
    },
    {
        "label": "\tcallback_url",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "peekOfCode": "\tcallback_url = 'https://darajambili.herokuapp.com/express-payment'\n\tdef test_stk_push_success(self):\n\t\t'''\n\t\tTest successful STK push\n\t\t'''\n\t\tphone_number = config('LNM_PHONE_NUMBER')\n\t\tamount = 1\n\t\taccount_reference = 'reference'\n\t\ttransaction_desc = 'Description'\n\t\tresponse = self.cl.stk_push(phone_number, amount, account_reference, transaction_desc, self.callback_url)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "documentation": {}
    },
    {
        "label": "\t\tphone_number",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "peekOfCode": "\t\tphone_number = config('LNM_PHONE_NUMBER')\n\t\tamount = 1\n\t\taccount_reference = 'reference'\n\t\ttransaction_desc = 'Description'\n\t\tresponse = self.cl.stk_push(phone_number, amount, account_reference, transaction_desc, self.callback_url)\n\t\tself.assertEqual(response.response_description, 'Success. Request accepted for processing')\n\tdef test_stk_push_empty_reference(self):\n\t\t'''\n\t\tTest that STK push with empty account reference raises MpesaInvalidParameterException\n\t\t'''",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "documentation": {}
    },
    {
        "label": "\t\tamount",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "peekOfCode": "\t\tamount = 1\n\t\taccount_reference = 'reference'\n\t\ttransaction_desc = 'Description'\n\t\tresponse = self.cl.stk_push(phone_number, amount, account_reference, transaction_desc, self.callback_url)\n\t\tself.assertEqual(response.response_description, 'Success. Request accepted for processing')\n\tdef test_stk_push_empty_reference(self):\n\t\t'''\n\t\tTest that STK push with empty account reference raises MpesaInvalidParameterException\n\t\t'''\n\t\twith self.assertRaises(MpesaInvalidParameterException):",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "documentation": {}
    },
    {
        "label": "\t\taccount_reference",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "peekOfCode": "\t\taccount_reference = 'reference'\n\t\ttransaction_desc = 'Description'\n\t\tresponse = self.cl.stk_push(phone_number, amount, account_reference, transaction_desc, self.callback_url)\n\t\tself.assertEqual(response.response_description, 'Success. Request accepted for processing')\n\tdef test_stk_push_empty_reference(self):\n\t\t'''\n\t\tTest that STK push with empty account reference raises MpesaInvalidParameterException\n\t\t'''\n\t\twith self.assertRaises(MpesaInvalidParameterException):\n\t\t\tphone_number = config('LNM_PHONE_NUMBER')",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "documentation": {}
    },
    {
        "label": "\t\ttransaction_desc",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "peekOfCode": "\t\ttransaction_desc = 'Description'\n\t\tresponse = self.cl.stk_push(phone_number, amount, account_reference, transaction_desc, self.callback_url)\n\t\tself.assertEqual(response.response_description, 'Success. Request accepted for processing')\n\tdef test_stk_push_empty_reference(self):\n\t\t'''\n\t\tTest that STK push with empty account reference raises MpesaInvalidParameterException\n\t\t'''\n\t\twith self.assertRaises(MpesaInvalidParameterException):\n\t\t\tphone_number = config('LNM_PHONE_NUMBER')\n\t\t\tamount = 1",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "peekOfCode": "\t\tresponse = self.cl.stk_push(phone_number, amount, account_reference, transaction_desc, self.callback_url)\n\t\tself.assertEqual(response.response_description, 'Success. Request accepted for processing')\n\tdef test_stk_push_empty_reference(self):\n\t\t'''\n\t\tTest that STK push with empty account reference raises MpesaInvalidParameterException\n\t\t'''\n\t\twith self.assertRaises(MpesaInvalidParameterException):\n\t\t\tphone_number = config('LNM_PHONE_NUMBER')\n\t\t\tamount = 1\n\t\t\taccount_reference = ''",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "documentation": {}
    },
    {
        "label": "\t\t\tphone_number",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "peekOfCode": "\t\t\tphone_number = config('LNM_PHONE_NUMBER')\n\t\t\tamount = 1\n\t\t\taccount_reference = ''\n\t\t\ttransaction_desc = 'Description'\n\t\t\tself.cl.stk_push(phone_number, amount, account_reference, transaction_desc, self.callback_url)\n\tdef test_stk_push_empty_description(self):\n\t\t'''\n\t\tTest that STK push with empty description raises MpesaInvalidParameterException\n\t\t'''\n\t\twith self.assertRaises(MpesaInvalidParameterException):",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "documentation": {}
    },
    {
        "label": "\t\t\tamount",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "peekOfCode": "\t\t\tamount = 1\n\t\t\taccount_reference = ''\n\t\t\ttransaction_desc = 'Description'\n\t\t\tself.cl.stk_push(phone_number, amount, account_reference, transaction_desc, self.callback_url)\n\tdef test_stk_push_empty_description(self):\n\t\t'''\n\t\tTest that STK push with empty description raises MpesaInvalidParameterException\n\t\t'''\n\t\twith self.assertRaises(MpesaInvalidParameterException):\n\t\t\tphone_number = config('LNM_PHONE_NUMBER')",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "documentation": {}
    },
    {
        "label": "\t\t\taccount_reference",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "peekOfCode": "\t\t\taccount_reference = ''\n\t\t\ttransaction_desc = 'Description'\n\t\t\tself.cl.stk_push(phone_number, amount, account_reference, transaction_desc, self.callback_url)\n\tdef test_stk_push_empty_description(self):\n\t\t'''\n\t\tTest that STK push with empty description raises MpesaInvalidParameterException\n\t\t'''\n\t\twith self.assertRaises(MpesaInvalidParameterException):\n\t\t\tphone_number = config('LNM_PHONE_NUMBER')\n\t\t\tamount = 1000000",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "documentation": {}
    },
    {
        "label": "\t\t\ttransaction_desc",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "peekOfCode": "\t\t\ttransaction_desc = 'Description'\n\t\t\tself.cl.stk_push(phone_number, amount, account_reference, transaction_desc, self.callback_url)\n\tdef test_stk_push_empty_description(self):\n\t\t'''\n\t\tTest that STK push with empty description raises MpesaInvalidParameterException\n\t\t'''\n\t\twith self.assertRaises(MpesaInvalidParameterException):\n\t\t\tphone_number = config('LNM_PHONE_NUMBER')\n\t\t\tamount = 1000000\n\t\t\taccount_reference = 'reference'",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "documentation": {}
    },
    {
        "label": "\t\t\tphone_number",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "peekOfCode": "\t\t\tphone_number = config('LNM_PHONE_NUMBER')\n\t\t\tamount = 1000000\n\t\t\taccount_reference = 'reference'\n\t\t\ttransaction_desc = ''\n\t\t\tself.cl.stk_push(phone_number, amount, account_reference, transaction_desc, self.callback_url)\n\tdef test_stk_push_invalid_amount(self):\n\t\t'''\n\t\tTest that STK push with invalid amount raises MpesaInvalidParameterException\n\t\t'''\n\t\twith self.assertRaises(MpesaInvalidParameterException):",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "documentation": {}
    },
    {
        "label": "\t\t\tamount",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "peekOfCode": "\t\t\tamount = 1000000\n\t\t\taccount_reference = 'reference'\n\t\t\ttransaction_desc = ''\n\t\t\tself.cl.stk_push(phone_number, amount, account_reference, transaction_desc, self.callback_url)\n\tdef test_stk_push_invalid_amount(self):\n\t\t'''\n\t\tTest that STK push with invalid amount raises MpesaInvalidParameterException\n\t\t'''\n\t\twith self.assertRaises(MpesaInvalidParameterException):\n\t\t\tphone_number = config('LNM_PHONE_NUMBER')",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "documentation": {}
    },
    {
        "label": "\t\t\taccount_reference",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "peekOfCode": "\t\t\taccount_reference = 'reference'\n\t\t\ttransaction_desc = ''\n\t\t\tself.cl.stk_push(phone_number, amount, account_reference, transaction_desc, self.callback_url)\n\tdef test_stk_push_invalid_amount(self):\n\t\t'''\n\t\tTest that STK push with invalid amount raises MpesaInvalidParameterException\n\t\t'''\n\t\twith self.assertRaises(MpesaInvalidParameterException):\n\t\t\tphone_number = config('LNM_PHONE_NUMBER')\n\t\t\tamount = 1.5",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "documentation": {}
    },
    {
        "label": "\t\t\ttransaction_desc",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "peekOfCode": "\t\t\ttransaction_desc = ''\n\t\t\tself.cl.stk_push(phone_number, amount, account_reference, transaction_desc, self.callback_url)\n\tdef test_stk_push_invalid_amount(self):\n\t\t'''\n\t\tTest that STK push with invalid amount raises MpesaInvalidParameterException\n\t\t'''\n\t\twith self.assertRaises(MpesaInvalidParameterException):\n\t\t\tphone_number = config('LNM_PHONE_NUMBER')\n\t\t\tamount = 1.5\n\t\t\taccount_reference = 'reference'",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "documentation": {}
    },
    {
        "label": "\t\t\tphone_number",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "peekOfCode": "\t\t\tphone_number = config('LNM_PHONE_NUMBER')\n\t\t\tamount = 1.5\n\t\t\taccount_reference = 'reference'\n\t\t\ttransaction_desc = 'Description'\n\t\t\tself.cl.stk_push(phone_number, amount, account_reference, transaction_desc, self.callback_url)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "documentation": {}
    },
    {
        "label": "\t\t\tamount",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "peekOfCode": "\t\t\tamount = 1.5\n\t\t\taccount_reference = 'reference'\n\t\t\ttransaction_desc = 'Description'\n\t\t\tself.cl.stk_push(phone_number, amount, account_reference, transaction_desc, self.callback_url)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "documentation": {}
    },
    {
        "label": "\t\t\taccount_reference",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "peekOfCode": "\t\t\taccount_reference = 'reference'\n\t\t\ttransaction_desc = 'Description'\n\t\t\tself.cl.stk_push(phone_number, amount, account_reference, transaction_desc, self.callback_url)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "documentation": {}
    },
    {
        "label": "\t\t\ttransaction_desc",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "peekOfCode": "\t\t\ttransaction_desc = 'Description'\n\t\t\tself.cl.stk_push(phone_number, amount, account_reference, transaction_desc, self.callback_url)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_stk_push",
        "documentation": {}
    },
    {
        "label": "MpesaCoreTestCase",
        "kind": 6,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_views",
        "peekOfCode": "class MpesaCoreTestCase(TestCase):\n\tdef test_index_view(self):\n\t\t'''\n\t\tTest home page content\n\t\t'''\n\t\tresponse = self.client.get(reverse(\"django_daraja_index\"))\n\t\tself.assertEqual(response.content, b\"Welcome to the home of daraja APIs\")",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_views",
        "documentation": {}
    },
    {
        "label": "\t\tresponse",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_views",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_views",
        "peekOfCode": "\t\tresponse = self.client.get(reverse(\"django_daraja_index\"))\n\t\tself.assertEqual(response.content, b\"Welcome to the home of daraja APIs\")",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.test_views",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.urls",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.urls",
        "peekOfCode": "urlpatterns = [\n    url(r'^admin/', admin.site.urls),\n    url(r'^daraja/', include('django_daraja.urls')),\n]",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.wsgi",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.tests.wsgi",
        "documentation": {}
    },
    {
        "label": "ContextualZipFile",
        "kind": 6,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "peekOfCode": "class ContextualZipFile(zipfile.ZipFile):\n    \"\"\"Supplement ZipFile class to support context manager for Python 2.6.\"\"\"\n    def __enter__(self):\n        return self\n    def __exit__(self, type, value, traceback):\n        self.close()\n    def __new__(cls, *args, **kwargs):\n        \"\"\"Construct a ZipFile or ContextualZipFile as appropriate.\"\"\"\n        if hasattr(zipfile.ZipFile, '__exit__'):\n            return zipfile.ZipFile(*args, **kwargs)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "documentation": {}
    },
    {
        "label": "archive_context",
        "kind": 2,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "peekOfCode": "def archive_context(filename):\n    \"\"\"\n    Unzip filename to a temporary directory, set to the cwd.\n    The unzipped target is cleaned up after.\n    \"\"\"\n    tmpdir = tempfile.mkdtemp()\n    log.warn('Extracting in %s', tmpdir)\n    old_wd = os.getcwd()\n    try:\n        os.chdir(tmpdir)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "documentation": {}
    },
    {
        "label": "use_setuptools",
        "kind": 2,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "peekOfCode": "def use_setuptools(\n        version=DEFAULT_VERSION, download_base=DEFAULT_URL,\n        to_dir=DEFAULT_SAVE_DIR, download_delay=15):\n    \"\"\"\n    Ensure that a setuptools version is installed.\n    Return None. Raise SystemExit if the requested version\n    or later cannot be installed.\n    \"\"\"\n    to_dir = os.path.abspath(to_dir)\n    # prior to importing, capture the module state for",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "documentation": {}
    },
    {
        "label": "download_file_powershell",
        "kind": 2,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "peekOfCode": "def download_file_powershell(url, target):\n    \"\"\"\n    Download the file at url to target using Powershell.\n    Powershell will validate trust.\n    Raise an exception if the command cannot complete.\n    \"\"\"\n    target = os.path.abspath(target)\n    ps_cmd = (\n        \"[System.Net.WebRequest]::DefaultWebProxy.Credentials = \"\n        \"[System.Net.CredentialCache]::DefaultCredentials; \"",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "documentation": {}
    },
    {
        "label": "has_powershell",
        "kind": 2,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "peekOfCode": "def has_powershell():\n    \"\"\"Determine if Powershell is available.\"\"\"\n    if platform.system() != 'Windows':\n        return False\n    cmd = ['powershell', '-Command', 'echo test']\n    with open(os.path.devnull, 'wb') as devnull:\n        try:\n            subprocess.check_call(cmd, stdout=devnull, stderr=devnull)\n        except Exception:\n            return False",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "documentation": {}
    },
    {
        "label": "download_file_curl",
        "kind": 2,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "peekOfCode": "def download_file_curl(url, target):\n    cmd = ['curl', url, '--location', '--silent', '--output', target]\n    _clean_check(cmd, target)\ndef has_curl():\n    cmd = ['curl', '--version']\n    with open(os.path.devnull, 'wb') as devnull:\n        try:\n            subprocess.check_call(cmd, stdout=devnull, stderr=devnull)\n        except Exception:\n            return False",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "documentation": {}
    },
    {
        "label": "has_curl",
        "kind": 2,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "peekOfCode": "def has_curl():\n    cmd = ['curl', '--version']\n    with open(os.path.devnull, 'wb') as devnull:\n        try:\n            subprocess.check_call(cmd, stdout=devnull, stderr=devnull)\n        except Exception:\n            return False\n    return True\ndownload_file_curl.viable = has_curl\ndef download_file_wget(url, target):",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "documentation": {}
    },
    {
        "label": "download_file_wget",
        "kind": 2,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "peekOfCode": "def download_file_wget(url, target):\n    cmd = ['wget', url, '--quiet', '--output-document', target]\n    _clean_check(cmd, target)\ndef has_wget():\n    cmd = ['wget', '--version']\n    with open(os.path.devnull, 'wb') as devnull:\n        try:\n            subprocess.check_call(cmd, stdout=devnull, stderr=devnull)\n        except Exception:\n            return False",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "documentation": {}
    },
    {
        "label": "has_wget",
        "kind": 2,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "peekOfCode": "def has_wget():\n    cmd = ['wget', '--version']\n    with open(os.path.devnull, 'wb') as devnull:\n        try:\n            subprocess.check_call(cmd, stdout=devnull, stderr=devnull)\n        except Exception:\n            return False\n    return True\ndownload_file_wget.viable = has_wget\ndef download_file_insecure(url, target):",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "documentation": {}
    },
    {
        "label": "download_file_insecure",
        "kind": 2,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "peekOfCode": "def download_file_insecure(url, target):\n    \"\"\"Use Python to download the file, without connection authentication.\"\"\"\n    src = urlopen(url)\n    try:\n        # Read all the data in one block.\n        data = src.read()\n    finally:\n        src.close()\n    # Write all the data in one block to avoid creating a partial file.\n    with open(target, \"wb\") as dst:",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "documentation": {}
    },
    {
        "label": "get_best_downloader",
        "kind": 2,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "peekOfCode": "def get_best_downloader():\n    downloaders = (\n        download_file_powershell,\n        download_file_curl,\n        download_file_wget,\n        download_file_insecure,\n    )\n    viable_downloaders = (dl for dl in downloaders if dl.viable())\n    return next(viable_downloaders, None)\ndef download_setuptools(",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "documentation": {}
    },
    {
        "label": "download_setuptools",
        "kind": 2,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "peekOfCode": "def download_setuptools(\n        version=DEFAULT_VERSION, download_base=DEFAULT_URL,\n        to_dir=DEFAULT_SAVE_DIR, delay=15,\n        downloader_factory=get_best_downloader):\n    \"\"\"\n    Download setuptools from a specified location and return its filename.\n    `version` should be a valid setuptools version number that is available\n    as an sdist for download under the `download_base` URL (which should end\n    with a '/'). `to_dir` is the directory where the egg will be downloaded.\n    `delay` is the number of seconds to pause before an actual download",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "peekOfCode": "def main():\n    \"\"\"Install or upgrade setuptools and EasyInstall.\"\"\"\n    options = _parse_args()\n    archive = download_setuptools(**_download_args(options))\n    return _install(archive, _build_install_args(options))\nif __name__ == '__main__':\n    sys.exit(main())",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "documentation": {}
    },
    {
        "label": "DEFAULT_VERSION",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "peekOfCode": "DEFAULT_VERSION = \"33.1.1\"\nDEFAULT_URL = \"https://pypi.io/packages/source/s/setuptools/\"\nDEFAULT_SAVE_DIR = os.curdir\nDEFAULT_DEPRECATION_MESSAGE = \"ez_setup.py is deprecated and when using it setuptools will be pinned to {0} since it's the last version that supports setuptools self upgrade/installation, check https://github.com/pypa/setuptools/issues/581 for more info; use pip to install setuptools\"\nMEANINGFUL_INVALID_ZIP_ERR_MSG = 'Maybe {0} is corrupted, delete it and try again.'\nlog.warn(DEFAULT_DEPRECATION_MESSAGE.format(DEFAULT_VERSION))\ndef _python_cmd(*args):\n    \"\"\"\n    Execute a command.\n    Return True if the command succeeded.",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "documentation": {}
    },
    {
        "label": "DEFAULT_URL",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "peekOfCode": "DEFAULT_URL = \"https://pypi.io/packages/source/s/setuptools/\"\nDEFAULT_SAVE_DIR = os.curdir\nDEFAULT_DEPRECATION_MESSAGE = \"ez_setup.py is deprecated and when using it setuptools will be pinned to {0} since it's the last version that supports setuptools self upgrade/installation, check https://github.com/pypa/setuptools/issues/581 for more info; use pip to install setuptools\"\nMEANINGFUL_INVALID_ZIP_ERR_MSG = 'Maybe {0} is corrupted, delete it and try again.'\nlog.warn(DEFAULT_DEPRECATION_MESSAGE.format(DEFAULT_VERSION))\ndef _python_cmd(*args):\n    \"\"\"\n    Execute a command.\n    Return True if the command succeeded.\n    \"\"\"",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SAVE_DIR",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "peekOfCode": "DEFAULT_SAVE_DIR = os.curdir\nDEFAULT_DEPRECATION_MESSAGE = \"ez_setup.py is deprecated and when using it setuptools will be pinned to {0} since it's the last version that supports setuptools self upgrade/installation, check https://github.com/pypa/setuptools/issues/581 for more info; use pip to install setuptools\"\nMEANINGFUL_INVALID_ZIP_ERR_MSG = 'Maybe {0} is corrupted, delete it and try again.'\nlog.warn(DEFAULT_DEPRECATION_MESSAGE.format(DEFAULT_VERSION))\ndef _python_cmd(*args):\n    \"\"\"\n    Execute a command.\n    Return True if the command succeeded.\n    \"\"\"\n    args = (sys.executable,) + args",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "documentation": {}
    },
    {
        "label": "DEFAULT_DEPRECATION_MESSAGE",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "peekOfCode": "DEFAULT_DEPRECATION_MESSAGE = \"ez_setup.py is deprecated and when using it setuptools will be pinned to {0} since it's the last version that supports setuptools self upgrade/installation, check https://github.com/pypa/setuptools/issues/581 for more info; use pip to install setuptools\"\nMEANINGFUL_INVALID_ZIP_ERR_MSG = 'Maybe {0} is corrupted, delete it and try again.'\nlog.warn(DEFAULT_DEPRECATION_MESSAGE.format(DEFAULT_VERSION))\ndef _python_cmd(*args):\n    \"\"\"\n    Execute a command.\n    Return True if the command succeeded.\n    \"\"\"\n    args = (sys.executable,) + args\n    return subprocess.call(args) == 0",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "documentation": {}
    },
    {
        "label": "MEANINGFUL_INVALID_ZIP_ERR_MSG",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "peekOfCode": "MEANINGFUL_INVALID_ZIP_ERR_MSG = 'Maybe {0} is corrupted, delete it and try again.'\nlog.warn(DEFAULT_DEPRECATION_MESSAGE.format(DEFAULT_VERSION))\ndef _python_cmd(*args):\n    \"\"\"\n    Execute a command.\n    Return True if the command succeeded.\n    \"\"\"\n    args = (sys.executable,) + args\n    return subprocess.call(args) == 0\ndef _install(archive_filename, install_args=()):",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "documentation": {}
    },
    {
        "label": "download_file_powershell.viable",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "peekOfCode": "download_file_powershell.viable = has_powershell\ndef download_file_curl(url, target):\n    cmd = ['curl', url, '--location', '--silent', '--output', target]\n    _clean_check(cmd, target)\ndef has_curl():\n    cmd = ['curl', '--version']\n    with open(os.path.devnull, 'wb') as devnull:\n        try:\n            subprocess.check_call(cmd, stdout=devnull, stderr=devnull)\n        except Exception:",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "documentation": {}
    },
    {
        "label": "download_file_curl.viable",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "peekOfCode": "download_file_curl.viable = has_curl\ndef download_file_wget(url, target):\n    cmd = ['wget', url, '--quiet', '--output-document', target]\n    _clean_check(cmd, target)\ndef has_wget():\n    cmd = ['wget', '--version']\n    with open(os.path.devnull, 'wb') as devnull:\n        try:\n            subprocess.check_call(cmd, stdout=devnull, stderr=devnull)\n        except Exception:",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "documentation": {}
    },
    {
        "label": "download_file_wget.viable",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "peekOfCode": "download_file_wget.viable = has_wget\ndef download_file_insecure(url, target):\n    \"\"\"Use Python to download the file, without connection authentication.\"\"\"\n    src = urlopen(url)\n    try:\n        # Read all the data in one block.\n        data = src.read()\n    finally:\n        src.close()\n    # Write all the data in one block to avoid creating a partial file.",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "documentation": {}
    },
    {
        "label": "download_file_insecure.viable",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "peekOfCode": "download_file_insecure.viable = lambda: True\ndef get_best_downloader():\n    downloaders = (\n        download_file_powershell,\n        download_file_curl,\n        download_file_wget,\n        download_file_insecure,\n    )\n    viable_downloaders = (dl for dl in downloaders if dl.viable())\n    return next(viable_downloaders, None)",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.ez_setup",
        "documentation": {}
    },
    {
        "label": "read",
        "kind": 2,
        "importPath": "main.database.html.pages.public.mpesa daraja.django-daraja.setup",
        "description": "main.database.html.pages.public.mpesa daraja.django-daraja.setup",
        "peekOfCode": "def read(fname):\n    return open(os.path.join(os.path.dirname(__file__), fname)).read()\nsetup(\n    name='django-daraja',\n    version='1.2.0',\n    description='A python django library for interacting with the Safaricom MPESA Daraja API.',\n    long_description=\n'''\nThis is a django library based on the Safaricom MPESA daraja API. Use it for a simplified experience, spend less time setting up...\nRead the full documentation at https://django-daraja.readthedocs.io",
        "detail": "main.database.html.pages.public.mpesa daraja.django-daraja.setup",
        "documentation": {}
    },
    {
        "label": "getAccessToken",
        "kind": 2,
        "importPath": "main.database.html.pages.public.mpesa daraja.mpesaToken",
        "description": "main.database.html.pages.public.mpesa daraja.mpesaToken",
        "peekOfCode": "def getAccessToken(request):\n    consumer_key = ''\n    consumer_secret = ''\n    api_URL = 'https://sandbox.safaricom'\n    r = requests.get(api_URL, auth=HTTPBasicAuth(consumer_key,consumer_secret))\n    mpesa_access_token = json.loads(r.text)\n    validate_mpesa_access_token = mpesa_access_token['access_token']\n    print(validate_mpesa_access_token)\ngetAccessToken(request)",
        "detail": "main.database.html.pages.public.mpesa daraja.mpesaToken",
        "documentation": {}
    },
    {
        "label": "request",
        "kind": 5,
        "importPath": "main.database.html.pages.public.mpesa daraja.mpesaToken",
        "description": "main.database.html.pages.public.mpesa daraja.mpesaToken",
        "peekOfCode": "request = \"\"\ndef getAccessToken(request):\n    consumer_key = ''\n    consumer_secret = ''\n    api_URL = 'https://sandbox.safaricom'\n    r = requests.get(api_URL, auth=HTTPBasicAuth(consumer_key,consumer_secret))\n    mpesa_access_token = json.loads(r.text)\n    validate_mpesa_access_token = mpesa_access_token['access_token']\n    print(validate_mpesa_access_token)\ngetAccessToken(request)",
        "detail": "main.database.html.pages.public.mpesa daraja.mpesaToken",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "main.database.html.pages.public.mpesa daraja.pythonTest",
        "description": "main.database.html.pages.public.mpesa daraja.pythonTest",
        "peekOfCode": "def index(request):\n        cl = MpesaClient()\n        phone_number = '0745092523'\n        amount = 1\n        account_reference = 'reference'\n        transaction_desc = 'Description'\n        callback_url = request.build_absolute_uri(reverse('mpesa_stk_push_callback'))\n        response = cl.stk_push(phone_number, amount, account_reference, transaction_desc, callback_url)\n        return HttpResponse(response)",
        "detail": "main.database.html.pages.public.mpesa daraja.pythonTest",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "scrapper.setup.asgi",
        "description": "scrapper.setup.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "scrapper.setup.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "scrapper.setup.settings",
        "description": "scrapper.setup.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-h#o!wfhi+sjo(k3f(0y)=mzq_k5%(r2fj6fq4g$=xp^6d#a6xq'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "scrapper.setup.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "scrapper.setup.settings",
        "description": "scrapper.setup.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-h#o!wfhi+sjo(k3f(0y)=mzq_k5%(r2fj6fq4g$=xp^6d#a6xq'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "scrapper.setup.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "scrapper.setup.settings",
        "description": "scrapper.setup.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "scrapper.setup.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "scrapper.setup.settings",
        "description": "scrapper.setup.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]",
        "detail": "scrapper.setup.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "scrapper.setup.settings",
        "description": "scrapper.setup.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',",
        "detail": "scrapper.setup.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "scrapper.setup.settings",
        "description": "scrapper.setup.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'setup.urls'",
        "detail": "scrapper.setup.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "scrapper.setup.settings",
        "description": "scrapper.setup.settings",
        "peekOfCode": "ROOT_URLCONF = 'setup.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "scrapper.setup.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "scrapper.setup.settings",
        "description": "scrapper.setup.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "scrapper.setup.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "scrapper.setup.settings",
        "description": "scrapper.setup.settings",
        "peekOfCode": "WSGI_APPLICATION = 'setup.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "scrapper.setup.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "scrapper.setup.settings",
        "description": "scrapper.setup.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "scrapper.setup.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "scrapper.setup.settings",
        "description": "scrapper.setup.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "scrapper.setup.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "scrapper.setup.settings",
        "description": "scrapper.setup.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field",
        "detail": "scrapper.setup.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "scrapper.setup.settings",
        "description": "scrapper.setup.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "scrapper.setup.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "scrapper.setup.settings",
        "description": "scrapper.setup.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "scrapper.setup.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "scrapper.setup.settings",
        "description": "scrapper.setup.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "scrapper.setup.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "scrapper.setup.settings",
        "description": "scrapper.setup.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "scrapper.setup.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "scrapper.setup.settings",
        "description": "scrapper.setup.settings",
        "peekOfCode": "STATIC_URL = '/static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "scrapper.setup.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "scrapper.setup.settings",
        "description": "scrapper.setup.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "scrapper.setup.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "scrapper.setup.urls",
        "description": "scrapper.setup.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n]",
        "detail": "scrapper.setup.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "scrapper.setup.wsgi",
        "description": "scrapper.setup.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "scrapper.setup.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "scrapper.freelancer",
        "description": "scrapper.freelancer",
        "peekOfCode": "def main():\n    url = \"https://www.freelancer.com/search/projects?projectLanguages=fr,en&projectSkills=21,22,25,32,39,75,103,121,129,158,174,250,302,367,569,623,662,1070,1694\"\n    r = requests.get(url)\n    soup = BeautifulSoup(r.content, 'html5lib')\n    jobs = [] # a list to store the jobs present in an array .\n    table = soup.find('div' , attrs = {'id' : 'job-sites'})\n    for row in table.findAll ('div', attrs = {'class':'JobSearchCard-list'}):\n        job = {}\n        job ['title']= row.h5.text\n        job ['skill required'] = row.h3.text",
        "detail": "scrapper.freelancer",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "scrapper.guru",
        "description": "scrapper.guru",
        "peekOfCode": "def main():\n    url = \"https://www.guru.com/work/\"\n    r = requests.get(url) # making a get request\n    soup = BeautifulSoup(r.content, 'html5lib')\n    jobs = [] # a list to store the jobs present in an array .\n    table = soup.find('div' , attrs = {'id' : 'job-sites'})\n    for row in table.findAll ('div', attrs = {'class':'module_list cozy'}):\n        job = {}\n        job ['title']= row.h5.text\n        job ['skill required'] = row.h3.text",
        "detail": "scrapper.guru",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "scrapper.manage",
        "description": "scrapper.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'setup.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "scrapper.manage",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "scrapper.onefoma",
        "description": "scrapper.onefoma",
        "peekOfCode": "def main():\n    url = \"https://my.oneforma.com/UserPortal/work_opportunities.php\"\n    r = requests.get(url)\n    soup = BeautifulSoup(r.content, 'html5lib')\n    jobs = [] # a list to store the jobs present in an array .\n    table = soup.find('div' , attrs = {'id' : 'job-sites'})\n    for row in table.findAll ('div', attrs = {'class':'row'}):\n        job = {}\n        job ['title']= row.h5.text\n        job ['skill required'] = row.h3.text",
        "detail": "scrapper.onefoma",
        "documentation": {}
    },
    {
        "label": "more_buttons",
        "kind": 5,
        "importPath": "scrapper.test",
        "description": "scrapper.test",
        "peekOfCode": "more_buttons = driver.find_elements_by_class_name(\"\")\nfor x in range(len(more_buttons)):\n  if more_buttons[x].is_displayed():\n      driver.execute_script(\"arguments[0].click();\", more_buttons[x])\n      time.sleep(1)\npage_source = driver.page_source\noptions = webdriver.ChromeOptions()\noptions.add_argument('--ignore-certificate-errors')\noptions.add_argument('--incognito')\noptions.add_argument('--headless')",
        "detail": "scrapper.test",
        "documentation": {}
    },
    {
        "label": "page_source",
        "kind": 5,
        "importPath": "scrapper.test",
        "description": "scrapper.test",
        "peekOfCode": "page_source = driver.page_source\noptions = webdriver.ChromeOptions()\noptions.add_argument('--ignore-certificate-errors')\noptions.add_argument('--incognito')\noptions.add_argument('--headless')\ndriver = webdriver.Chrome(\"/usr/lib/chromium-browser/chromedriver\", chrome_options=options)\n# Making a GET request\nr =requests.get('http://192.168.9.6/#Queues.Simple_Queues/jsproxy')\n# check status code for response received\n# check status code for response received",
        "detail": "scrapper.test",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "scrapper.test",
        "description": "scrapper.test",
        "peekOfCode": "options = webdriver.ChromeOptions()\noptions.add_argument('--ignore-certificate-errors')\noptions.add_argument('--incognito')\noptions.add_argument('--headless')\ndriver = webdriver.Chrome(\"/usr/lib/chromium-browser/chromedriver\", chrome_options=options)\n# Making a GET request\nr =requests.get('http://192.168.9.6/#Queues.Simple_Queues/jsproxy')\n# check status code for response received\n# check status code for response received\n# success code - 200",
        "detail": "scrapper.test",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "scrapper.test",
        "description": "scrapper.test",
        "peekOfCode": "driver = webdriver.Chrome(\"/usr/lib/chromium-browser/chromedriver\", chrome_options=options)\n# Making a GET request\nr =requests.get('http://192.168.9.6/#Queues.Simple_Queues/jsproxy')\n# check status code for response received\n# check status code for response received\n# success code - 200\nprint(r)\n# Parsing the HTML\nsoup = BeautifulSoup(r.content, 'html.parser')\nprint(soup.prettify())",
        "detail": "scrapper.test",
        "documentation": {}
    },
    {
        "label": "soup",
        "kind": 5,
        "importPath": "scrapper.test",
        "description": "scrapper.test",
        "peekOfCode": "soup = BeautifulSoup(r.content, 'html.parser')\nprint(soup.prettify())",
        "detail": "scrapper.test",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "scrapper.upwork",
        "description": "scrapper.upwork",
        "peekOfCode": "def main():\n    url = \"https://www.upwork.com/nx/find-work/most-recent\"\n    r = requests.get(url)\n    soup = BeautifulSoup(r.content, 'html5lib')\n    jobs = [] # a list to store the jobs present in an array .\n    table = soup.find('div' , attrs = {'id' : 'job-sites'})\n    for row in table.findAll ('div', attrs = {'class':'up-card-section up-card-list-section up-card-hover'}):\n        job ['title']= row.h5.text\n        job ['skill required'] = row.h3.text\n        job ['url'] = row.a ['href']",
        "detail": "scrapper.upwork",
        "documentation": {}
    }
]